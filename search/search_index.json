{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u9879\u76ee\u6982\u8981","text":""},{"location":"#1","title":"1.\u9879\u76ee\u540d\u79f0","text":"<ul> <li>\u4e2d\u6587\u540d\uff1aC++\u90a3\u4e9b\u4e8b</li> <li>\u82f1\u6587\u540d\uff1aStories About C Plus Plus</li> </ul> <p>\u8fd9\u662f\u4e00\u4e2a\u9002\u5408\u521d\u5b66\u8005\u4ece\u5165\u95e8\u5230\u8fdb\u9636\u7684\u4ed3\u5e93\uff0c\u89e3\u51b3\u4e86\u9762\u8bd5\u8005\u4e0e\u5b66\u4e60\u8005\u60f3\u8981\u6df1\u5165C++\u53ca\u5982\u4f55\u5165\u5751C++\u7684\u95ee\u9898\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u672c\u4ed3\u5e93\u62d3\u5c55\u4e86\u66f4\u52a0\u6df1\u5165\u7684\u6e90\u7801\u5206\u6790\uff0c\u591a\u7ebf\u7a0b\u5e76\u53d1\u7b49\u7684\u77e5\u8bc6\uff0c\u662f\u4e00\u4e2a\u6bd4\u8f83\u5168\u9762\u7684C++\u5b66\u4e60\u4ece\u5165\u95e8\u5230\u8fdb\u9636\u63d0\u5347\u7684\u4ed3\u5e93\u3002</p>"},{"location":"#2","title":"2.\u9879\u76ee\u5730\u5740","text":"<p>\u6233\u8fd9\u91cc!!!</p>"},{"location":"#3","title":"3.\u76ee\u524d\u5df2\u6709\u5185\u5bb9","text":"<ul> <li>\u57fa\u7840\u8fdb\u9636</li> <li>\u5b9e\u6218\u7cfb\u5217</li> <li>C++\u65b0\u7279\u6027(C++11...)</li> <li>\u6e90\u7801\u5256\u6790</li> <li>\u5e76\u53d1\u7f16\u7a0b</li> <li>\u7f51\u7edc\u7f16\u7a0b</li> <li>\u60ef\u7528\u6cd5</li> <li>\u8f85\u52a9\u5de5\u5177</li> </ul>"},{"location":"#4","title":"4.\u9879\u76ee\u540e\u7eed\u66f4\u65b0\u8ba1\u5212","text":"<ul> <li>boost\u5e93\u7b14\u8bb0</li> <li>C++\u9762\u7ecf</li> <li>C++14/17\u7b49\u65b0\u7279\u6027</li> </ul>"},{"location":"#5","title":"5.\u5173\u4e8e\u4f5c\u8005","text":"<ul> <li>\u5fae\u4fe1\u516c\u4f17\u53f7</li> </ul> <ul> <li>\u8d5e\u8d4f\u6211</li> </ul>            \u652f\u4ed8\u5b9d                   \u5fae\u4fe1"},{"location":"about/","title":"\u8054\u7cfb\u4f5c\u8005\u00b6","text":"<ul> <li>\u5fae\u4fe1\u516c\u4f17\u53f7</li> </ul> <ul> <li>\u8d5e\u8d4f\u6211</li> </ul>            \u652f\u4ed8\u5b9d                   \u5fae\u4fe1        <ul> <li>\u90ae\u7bb1: 455954986@qq.com</li> </ul>"},{"location":"contribute/","title":"\u9879\u76ee\u8d21\u732e","text":""},{"location":"contribute/#_1","title":"\u8d21\u732e\u8005","text":"Francis  ChungZH"},{"location":"group/","title":"\u4f18\u8d28\u793e\u7fa4","text":""},{"location":"group/#1","title":"1.\u4f18\u8d28\u661f\u7403","text":"<p>\u76ee\u524d\u661f\u7403\u5185\u90e8\u5305\u542b\u5982\u4e0b\u5185\u5bb9\uff0c\u4e5f\u5728\u6301\u7eed\u66f4\u65b0\u4e2d~</p> <p>\u5982\u679c\u60a8\u60f3\u52a0\u5165\uff0c\u6b22\u8fce\u5fae\u4fe1\u79c1\u804a: gcxzhang\uff0c\u5907\u6ce8: \u661f\u7403</p> <p></p>"},{"location":"update/","title":"\u5f85\u66f4\u65b0","text":"<p>\u5f85\u66f4\u65b0\u3002\u3002\u3002</p>"},{"location":"use/","title":"\u4f7f\u7528\u987b\u77e5","text":""},{"location":"use/#1","title":"1.\u4e0b\u8f7d","text":"<p>\u5b89\u88c5\u597dgit\uff0c\u4f7f\u7528\u4e0b\u9762\u547d\u4ee4\uff1a</p> <pre><code>git clone git@github.com:Light-City/CPlusPlusThings.git\n</code></pre>"},{"location":"use/#2","title":"2.\u7f16\u8bd1\u73af\u5883","text":"<ul> <li>IDE\u63a8\u8350</li> </ul> <p>CLION</p> <ul> <li>\u7f16\u8bd1\u5668</li> </ul> <p>GCC/G++</p>"},{"location":"use/#3","title":"3.\u7f16\u8bd1\u672c\u9879\u76ee","text":"<p>\u65b9\u5f0f\u4e00: vscode + bazel</p> <p>\u7b2c\u4e00\u671f\uff1aStep By Step\u4e0a\u624b\u7f16\u8bd1\u672c\u9879\u76ee</p> <p>\u65b9\u5f0f\u4e8c: \u514d\u5f00\u53d1\u73af\u5883docker</p> <p>\u7b2c\u4e8c\u671f\uff1a\u514d\u5f00\u53d1\u73af\u5883docker</p> <pre><code>docker pull xingfranics/cplusplusthings:latest\n</code></pre> <p>\u65b9\u5f0f\u4e09: gcc/g++</p>"},{"location":"video/","title":"\u89c6\u9891\u6559\u7a0b","text":""},{"location":"video/#_1","title":"\u89c6\u9891\u6559\u7a0b","text":""},{"location":"video/#1","title":"1.\u89c6\u9891\u5730\u5740","text":"<p>\u76f8\u5173\u89c6\u9891\u5728B\u7ad9\u66f4\u65b0\uff0cB\u7ad9\u641c\u7d22\u7528\u6237\uff1a\u672a\u6765\u7684\u5149\u57ce</p> <p>\u6216\u8005\u70b9\u51fb\u4e0b\u9762\u7684\u89c6\u9891\u5173\u6ce8\u5373\u53ef~</p>"},{"location":"video/#2","title":"2.\u89c6\u9891\u5185\u5bb9","text":""},{"location":"video/#21","title":"2.1 \u73af\u5883\u90a3\u4e9b\u4e8b","text":"<ul> <li> <p>Step By Step\u4e0a\u624b\u7f16\u8bd1\u672c\u9879\u76ee</p> </li> <li> <p>\u514d\u5f00\u53d1\u73af\u5883docker</p> </li> </ul>"},{"location":"basic_content/abstract/","title":"\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/abstract/#1","title":"1.\u7eaf\u865a\u51fd\u6570\u4e0e\u62bd\u8c61\u7c7b","text":"<p>C++\u4e2d\u7684\u7eaf\u865a\u51fd\u6570(\u6216\u62bd\u8c61\u51fd\u6570)\u662f\u6211\u4eec\u6ca1\u6709\u5b9e\u73b0\u7684\u865a\u51fd\u6570\uff01\u6211\u4eec\u53ea\u9700\u58f0\u660e\u5b83!\u901a\u8fc7\u58f0\u660e\u4e2d\u8d4b\u503c0\u6765\u58f0\u660e\u7eaf\u865a\u51fd\u6570\uff01</p> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\uff1atest.cpp</p> <ul> <li>\u7eaf\u865a\u51fd\u6570\uff1a\u6ca1\u6709\u51fd\u6570\u4f53\u7684\u865a\u51fd\u6570</li> <li>\u62bd\u8c61\u7c7b\uff1a\u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b</li> </ul> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\uff1apure_virtual.cpp</p> <p>\u62bd\u8c61\u7c7b\u53ea\u80fd\u4f5c\u4e3a\u57fa\u7c7b\u6765\u6d3e\u751f\u65b0\u7c7b\u4f7f\u7528\uff0c\u4e0d\u80fd\u521b\u5efa\u62bd\u8c61\u7c7b\u7684\u5bf9\u8c61,\u62bd\u8c61\u7c7b\u7684\u6307\u9488\u548c\u5f15\u7528-&gt;\u7531\u62bd\u8c61\u7c7b\u6d3e\u751f\u51fa\u6765\u7684\u7c7b\u7684\u5bf9\u8c61\uff01</p>"},{"location":"basic_content/abstract/#2","title":"2.\u5b9e\u73b0\u62bd\u8c61\u7c7b","text":"<p>\u62bd\u8c61\u7c7b\u4e2d\uff1a\u5728\u6210\u5458\u51fd\u6570\u5185\u53ef\u4ee5\u8c03\u7528\u7eaf\u865a\u51fd\u6570\uff0c\u5728\u6784\u9020\u51fd\u6570/\u6790\u6784\u51fd\u6570\u5185\u90e8\u4e0d\u80fd\u4f7f\u7528\u7eaf\u865a\u51fd\u6570\u3002</p> <p>\u5982\u679c\u4e00\u4e2a\u7c7b\u4ece\u62bd\u8c61\u7c7b\u6d3e\u751f\u800c\u6765\uff0c\u5b83\u5fc5\u987b\u5b9e\u73b0\u4e86\u57fa\u7c7b\u4e2d\u7684\u6240\u6709\u7eaf\u865a\u51fd\u6570\uff0c\u624d\u80fd\u6210\u4e3a\u975e\u62bd\u8c61\u7c7b\u3002</p> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\uff1aabstract.cpp</p>"},{"location":"basic_content/abstract/#3","title":"3.\u91cd\u8981\u70b9","text":"<ul> <li>\u7eaf\u865a\u51fd\u6570\u4f7f\u4e00\u4e2a\u7c7b\u53d8\u6210\u62bd\u8c61\u7c7b</li> </ul> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\uff1ainteresting_facts1.cpp</p> <ul> <li>\u62bd\u8c61\u7c7b\u7c7b\u578b\u7684\u6307\u9488\u548c\u5f15\u7528</li> </ul> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\uff1ainteresting_facts2.cpp</p> <ul> <li>\u5982\u679c\u6211\u4eec\u4e0d\u5728\u6d3e\u751f\u7c7b\u4e2d\u8986\u76d6\u7eaf\u865a\u51fd\u6570\uff0c\u90a3\u4e48\u6d3e\u751f\u7c7b\u4e5f\u4f1a\u53d8\u6210\u62bd\u8c61\u7c7b\u3002</li> </ul> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\uff1ainteresting_facts3.cpp</p> <ul> <li>\u62bd\u8c61\u7c7b\u53ef\u4ee5\u6709\u6784\u9020\u51fd\u6570</li> </ul> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\uff1ainteresting_facts4.cpp</p> <ul> <li>\u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570\uff0c\u800c\u6790\u6784\u51fd\u6570\u53ef\u4ee5\u662f\u865a\u6790\u6784\u51fd\u6570\u3002</li> </ul> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\uff1ainteresting_facts5.cpp</p> <p>\u5f53\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\u5e76\u5220\u9664\u5bf9\u8c61\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u8c03\u7528\u9002\u5f53\u7684\u6790\u6784\u51fd\u6570\u3002\u5982\u679c\u6790\u6784\u51fd\u6570\u4e0d\u662f\u865a\u62df\u7684\uff0c\u5219\u53ea\u80fd\u8c03\u7528\u57fa\u7c7b\u6790\u6784\u51fd\u6570\u3002</p>"},{"location":"basic_content/abstract/#4","title":"4.\u5b8c\u6574\u5b9e\u4f8b","text":"<p>\u62bd\u8c61\u7c7b\u7531\u6d3e\u751f\u7c7b\u7ee7\u627f\u5b9e\u73b0\uff01</p> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\uff1aderived_full.cpp</p>"},{"location":"basic_content/assert/","title":"assert\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/assert/#1","title":"1.\u7b2c\u4e00\u4e2a\u65ad\u8a00\u6848\u4f8b","text":"<p>\u65ad\u8a00\uff0c\u662f\u5b8f\uff0c\u800c\u975e\u51fd\u6570\u3002assert \u5b8f\u7684\u539f\u578b\u5b9a\u4e49\u5728 \uff08C\uff09\u3001\uff08C++\uff09\u4e2d\uff0c\u5176\u4f5c\u7528\u662f\u5982\u679c\u5b83\u7684\u6761\u4ef6\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u7ec8\u6b62\u7a0b\u5e8f\u6267\u884c\u3002\u53ef\u4ee5\u901a\u8fc7\u5b9a\u4e49 NDEBUG \u6765\u5173\u95ed assert\uff0c\u4f46\u662f\u9700\u8981\u5728\u6e90\u4ee3\u7801\u7684\u5f00\u5934\uff0cinclude  \u4e4b\u524d\u3002 <pre><code>void assert(int expression);\n</code></pre> <p>\u5bf9\u5e94\u4ee3\u7801\uff1aassert.c</p> <pre><code>#include &lt;stdio.h&gt; #include &lt;assert.h&gt; int main() { int x = 7; /*  Some big code in between and let's say x  \n    is accidentally changed to 9  */\nx = 9; // Programmer assumes x to be 7 in rest of the code \nassert(x==7); /* Rest of the code */\n\nreturn 0; } </code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>assert: assert.c:13: main: Assertion `x==7' failed.\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u8f93\u51fa\u4f1a\u628a\u6e90\u7801\u6587\u4ef6\uff0c\u884c\u53f7\u9519\u8bef\u4f4d\u7f6e\uff0c\u63d0\u793a\u51fa\u6765\uff01</p>"},{"location":"basic_content/assert/#2","title":"2.\u65ad\u8a00\u4e0e\u6b63\u5e38\u9519\u8bef\u5904\u7406","text":"<p>\u65ad\u8a00\u4e3b\u8981\u7528\u4e8e\u68c0\u67e5\u903b\u8f91\u4e0a\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u5b83\u4eec\u53ef\u7528\u4e8e\u68c0\u67e5\u4ee3\u7801\u5728\u5f00\u59cb\u8fd0\u884c\u4e4b\u524d\u6240\u671f\u671b\u7684\u72b6\u6001\uff0c\u6216\u8005\u5728\u8fd0\u884c\u5b8c\u6210\u540e\u68c0\u67e5\u72b6\u6001\u3002\u4e0e\u6b63\u5e38\u7684\u9519\u8bef\u5904\u7406\u4e0d\u540c\uff0c\u65ad\u8a00\u901a\u5e38\u5728\u8fd0\u884c\u65f6\u88ab\u7981\u7528\u3002</p> <p>\u5ffd\u7565\u65ad\u8a00\uff1a</p> <p>\u5728\u4ee3\u7801\u5f00\u5934\u52a0\u4e0a\uff1a</p> <pre><code>#define NDEBUG          // \u52a0\u4e0a\u8fd9\u884c\uff0c\u5219 assert \u4e0d\u53ef\u7528\n</code></pre> <p>\u5bf9\u5e94\u5b66\u4e60\u7684\u4ee3\u7801\uff1aignore_assert.c</p>"},{"location":"basic_content/bit/","title":"\u4f4d\u57df\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/bit/#bit-field","title":"Bit field \u662f\u4ec0\u4e48\uff1f","text":"<p>\u201c \u4f4d\u57df \u201c \u6216 \u201c \u4f4d\u6bb5 \u201c(Bit field)\u4e3a\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u628a\u6570\u636e\u4ee5\u4f4d\u7684\u5f62\u5f0f\u7d27\u51d1\u7684\u50a8\u5b58\uff0c\u5e76\u5141\u8bb8\u7a0b\u5e8f\u5458\u5bf9\u6b64\u7ed3\u6784\u7684\u4f4d\u8fdb\u884c\u64cd\u4f5c\u3002\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u4e00\u4e2a\u597d\u5904\u662f\u5b83\u53ef\u4ee5\u4f7f\u6570\u636e\u5355\u5143\u8282\u7701\u50a8\u5b58\u7a7a\u95f4\uff0c\u5f53\u7a0b\u5e8f\u9700\u8981\u6210\u5343\u4e0a\u4e07\u4e2a\u6570\u636e\u5355\u5143\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5c31\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002\u7b2c\u4e8c\u4e2a\u597d\u5904\u662f\u4f4d\u6bb5\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8bbf\u95ee\u4e00\u4e2a\u6574\u6570\u503c\u7684\u90e8\u5206\u5185\u5bb9\u4ece\u800c\u53ef\u4ee5\u7b80\u5316\u7a0b\u5e8f\u6e90\u4ee3\u7801\u3002\u800c\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u7684\u7f3a\u70b9\u5728\u4e8e\uff0c\u4f4d\u6bb5\u5b9e\u73b0\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u673a\u5668\u548c\u7cfb\u7edf\uff0c\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u8fd9\u5bfc\u81f4\u4e86\u4f4d\u6bb5\u5728\u672c\u8d28\u4e0a\u662f\u4e0d\u53ef\u79fb\u690d\u7684\u3002</p> <ul> <li>\u4f4d\u57df\u5728\u5185\u5b58\u4e2d\u7684\u5e03\u5c40\u662f\u4e0e\u673a\u5668\u6709\u5173\u7684</li> <li>\u4f4d\u57df\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6574\u578b\u6216\u679a\u4e3e\u7c7b\u578b\uff0c\u5e26\u7b26\u53f7\u7c7b\u578b\u4e2d\u7684\u4f4d\u57df\u7684\u884c\u4e3a\u5c06\u56e0\u5177\u4f53\u5b9e\u73b0\u800c\u5b9a</li> <li>\u53d6\u5730\u5740\u8fd0\u7b97\u7b26\uff08&amp;\uff09\u4e0d\u80fd\u4f5c\u7528\u4e8e\u4f4d\u57df\uff0c\u4efb\u4f55\u6307\u9488\u90fd\u65e0\u6cd5\u6307\u5411\u7c7b\u7684\u4f4d\u57df</li> </ul>"},{"location":"basic_content/bit/#_2","title":"\u4f4d\u57df\u4f7f\u7528","text":"<p>\u4f4d\u57df\u901a\u5e38\u4f7f\u7528\u7ed3\u6784\u4f53\u58f0\u660e\uff0c \u8be5\u7ed3\u6784\u58f0\u660e\u4e3a\u6bcf\u4e2a\u4f4d\u57df\u6210\u5458\u8bbe\u7f6e\u540d\u79f0\uff0c\u5e76\u51b3\u5b9a\u5176\u5bbd\u5ea6\uff1a</p> <pre><code>struct bit_field_name\n{\n    type member_name : width;\n};\n</code></pre> Elements Description bit_field_name \u4f4d\u57df\u7ed3\u6784\u540d type \u4f4d\u57df\u6210\u5458\u7684\u7c7b\u578b\uff0c\u5fc5\u987b\u4e3a int\u3001signed int \u6216\u8005 unsigned int \u7c7b\u578b member_name \u4f4d\u57df\u6210\u5458\u540d width \u89c4\u5b9a\u6210\u5458\u6240\u5360\u7684\u4f4d\u6570 <p>\u4f8b\u5982\u58f0\u660e\u5982\u4e0b\u4e00\u4e2a\u4f4d\u57df:</p> <pre><code>struct _PRCODE\n{\n    unsigned int code1: 2;\n    unsigned int cdde2: 2;\n    unsigned int code3: 8;\n};\nstruct _PRCODE prcode;\n</code></pre> <p>\u8be5\u5b9a\u4e49\u4f7f <code>prcode</code>\u5305\u542b 2 \u4e2a 2 Bits \u4f4d\u57df\u548c 1 \u4e2a 8 Bits \u4f4d\u57df\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u7684\u6210\u5458\u8fd0\u7b97\u7b26\u5bf9\u5176\u8fdb\u884c\u8d4b\u503c</p> <pre><code>prcode.code1 = 0;\nprcode.code2 = 3;\nprocde.code3 = 102;\n</code></pre> <p>\u8d4b\u503c\u65f6\u8981\u6ce8\u610f\u503c\u7684\u5927\u5c0f\u4e0d\u80fd\u8d85\u8fc7\u4f4d\u57df\u6210\u5458\u7684\u5bb9\u91cf\uff0c\u4f8b\u5982 prcode.code3 \u4e3a 8 Bits \u7684\u4f4d\u57df\u6210\u5458\uff0c\u5176\u5bb9\u91cf\u4e3a 2^8 = 256\uff0c\u5373\u8d4b\u503c\u8303\u56f4\u5e94\u4e3a [0,255]\u3002</p>"},{"location":"basic_content/bit/#_3","title":"\u4f4d\u57df\u7684\u5927\u5c0f\u548c\u5bf9\u9f50","text":""},{"location":"basic_content/bit/#_4","title":"\u4f4d\u57df\u7684\u5927\u5c0f","text":"<p>\u4f8b\u5982\u4ee5\u4e0b\u4f4d\u57df\uff1a</p> <pre><code>struct box \n{\n    unsigned int a: 1;\n    unsigned int  : 3;\n    unsigned int b: 4;\n};\n</code></pre> <p>\u8be5\u4f4d\u57df\u7ed3\u6784\u4f53\u4e2d\u95f4\u6709\u4e00\u4e2a\u672a\u547d\u540d\u7684\u4f4d\u57df\uff0c\u5360\u636e 3 Bits\uff0c\u4ec5\u8d77\u586b\u5145\u4f5c\u7528\uff0c\u5e76\u65e0\u5b9e\u9645\u610f\u4e49\u3002 \u586b\u5145\u4f7f\u5f97\u8be5\u7ed3\u6784\u603b\u5171\u4f7f\u7528\u4e86 8 Bits\u3002\u4f46 C \u8bed\u8a00\u4f7f\u7528 unsigned int \u4f5c\u4e3a\u4f4d\u57df\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u5373\u4f7f\u4e00\u4e2a\u7ed3\u6784\u7684\u552f\u4e00\u6210\u5458\u4e3a 1 Bit \u7684\u4f4d\u57df\uff0c\u8be5\u7ed3\u6784\u5927\u5c0f\u4e5f\u548c\u4e00\u4e2a unsigned int \u5927\u5c0f\u76f8\u540c\u3002 \u6709\u4e9b\u7cfb\u7edf\u4e2d\uff0cunsigned int \u4e3a 16 Bits\uff0c\u5728 x86 \u7cfb\u7edf\u4e2d\u4e3a 32 Bits\u3002\u6587\u7ae0\u4ee5\u4e0b\u5747\u9ed8\u8ba4 unsigned int \u4e3a 32 Bits\u3002</p>"},{"location":"basic_content/bit/#_5","title":"\u4f4d\u57df\u7684\u5bf9\u9f50","text":"<p>\u4e00\u4e2a\u4f4d\u57df\u6210\u5458\u4e0d\u5141\u8bb8\u8de8\u8d8a\u4e24\u4e2a unsigned int \u7684\u8fb9\u754c\uff0c\u5982\u679c\u6210\u5458\u58f0\u660e\u7684\u603b\u4f4d\u6570\u8d85\u8fc7\u4e86\u4e00\u4e2a unsigned int \u7684\u5927\u5c0f\uff0c \u90a3\u4e48\u7f16\u8f91\u5668\u4f1a\u81ea\u52a8\u79fb\u4f4d\u4f4d\u57df\u6210\u5458\uff0c\u4f7f\u5176\u6309\u7167 unsigned int \u7684\u8fb9\u754c\u5bf9\u9f50\u3002 \u4f8b\u5982\uff1a</p> <pre><code>struct stuff \n{\n    unsigned int field1: 30;\n    unsigned int field2: 4;\n    unsigned int field3: 3;\n};\n</code></pre> <p><code>field1</code> + <code>field2</code> = 34 Bits\uff0c\u8d85\u51fa 32 Bits, \u7f16\u8bd1\u5668\u4f1a\u5c06<code>field2</code>\u79fb\u4f4d\u81f3\u4e0b\u4e00\u4e2a unsigned int \u5355\u5143\u5b58\u653e\uff0c stuff.field1 \u548c stuff.field2 \u4e4b\u95f4\u4f1a\u7559\u4e0b\u4e00\u4e2a 2 Bits \u7684\u7a7a\u9699\uff0c stuff.field3 \u7d27\u8ddf\u5728 stuff.field2 \u4e4b\u540e\uff0c\u8be5\u7ed3\u6784\u73b0\u5728\u5927\u5c0f\u4e3a 2 * 32 = 64 Bits\u3002</p> <p>\u8fd9\u4e2a\u7a7a\u6d1e\u53ef\u4ee5\u7528\u4e4b\u524d\u63d0\u5230\u7684\u672a\u547d\u540d\u7684\u4f4d\u57df\u6210\u5458\u586b\u5145\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5bbd\u5ea6\u4e3a 0 \u7684\u672a\u547d\u540d\u4f4d\u57df\u6210\u5458\u4ee4\u4e0b\u4e00\u4f4d\u57df\u6210\u5458\u4e0e\u4e0b\u4e00\u4e2a\u6574\u6570\u5bf9\u9f50\u3002 \u4f8b\u5982:</p> <pre><code>struct stuff \n{\n    unsigned int field1: 30;\n    unsigned int       : 2;\n    unsigned int field2: 4;\n    unsigned int       : 0;\n    unsigned int field3: 3; \n};\n</code></pre> <p>\u8fd9\u91cc stuff.field1 \u4e0e stuff.field2 \u4e4b\u95f4\u6709\u4e00\u4e2a 2 Bits \u7684\u7a7a\u9699\uff0cstuff.field3 \u5219\u5b58\u50a8\u5728\u4e0b\u4e00\u4e2a unsigned int \u4e2d\uff0c\u8be5\u7ed3\u6784\u73b0\u5728\u5927\u5c0f\u4e3a 3 * 32 = 96 Bits\u3002</p> <p>\u5b66\u4e60\u4ee3\u7801\u89c1\uff1alearn.cpp</p>"},{"location":"basic_content/bit/#_6","title":"\u4f4d\u57df\u7684\u521d\u59cb\u5316\u548c\u4f4d\u7684\u91cd\u6620\u5c04","text":""},{"location":"basic_content/bit/#_7","title":"\u521d\u59cb\u5316","text":"<p>\u4f4d\u57df\u7684\u521d\u59cb\u5316\u4e0e\u666e\u901a\u7ed3\u6784\u4f53\u521d\u59cb\u5316\u7684\u65b9\u6cd5\u76f8\u540c\uff0c\u8fd9\u91cc\u5217\u4e3e\u4e24\u79cd\uff0c\u5982\u4e0b:</p> <pre><code>struct stuff s1= {20,8,6};\n</code></pre> <p>\u6216\u8005\u76f4\u63a5\u4e3a\u4f4d\u57df\u6210\u5458\u8d4b\u503c</p> <pre><code>struct stuff s1;\ns1.field1 = 20;\ns1.field2 = 8;\ns1.field3 = 4;\n</code></pre>"},{"location":"basic_content/bit/#re-mapping","title":"\u4f4d\u57df\u7684\u91cd\u6620\u5c04 (Re-mapping)","text":"<p>\u58f0\u660e\u4e00\u4e2a \u5927\u5c0f\u4e3a 32 Bits \u7684\u4f4d\u57df</p> <pre><code>struct box {\n    unsigned int ready:     2;\n    unsigned int error:     2;\n    unsigned int command:   4;\n    unsigned int sector_no: 24;\n}b1;\n</code></pre>"},{"location":"basic_content/bit/#_8","title":"\u5229\u7528\u91cd\u6620\u5c04\u5c06\u4f4d\u57df\u5f52\u96f6","text":"<pre><code>int* p = (int *) &amp;b1;  // \u5c06 \"\u4f4d\u57df\u7ed3\u6784\u4f53\u7684\u5730\u5740\" \u6620\u5c04\u81f3 \"\u6574\u5f62\uff08int*) \u7684\u5730\u5740\" \n*p = 0;                // \u6e05\u9664 s1\uff0c\u5c06\u5404\u6210\u5458\u5f52\u96f6\n</code></pre>"},{"location":"basic_content/bit/#union-32-bits-unsigned-int","title":"\u5229\u7528\u8054\u5408 (union) \u5c06 32 Bits \u4f4d\u57df \u91cd\u6620\u5c04\u81f3 unsigned int \u578b","text":"<p>\u5148\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u8054\u5408</p> <p>\u201c\u8054\u5408\u201d \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\uff0c\u4e5f\u662f\u4e00\u79cd\u6784\u9020\u7c7b\u578b\u7684\u6570\u636e\u7ed3\u6784\u3002\u5728\u4e00\u4e2a \u201c\u8054\u5408\u201d \u5185\u53ef\u4ee5\u5b9a\u4e49\u591a\u79cd\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\uff0c \u4e00\u4e2a\u88ab\u8bf4\u660e\u4e3a\u8be5 \u201c\u8054\u5408\u201d \u7c7b\u578b\u7684\u53d8\u91cf\u4e2d\uff0c\u5141\u8bb8\u88c5\u5165\u8be5 \u201c\u8054\u5408\u201d \u6240\u5b9a\u4e49\u7684\u4efb\u4f55\u4e00\u79cd\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u5171\u4eab\u540c\u4e00\u6bb5\u5185\u5b58\uff0c\u4ee5\u8fbe\u5230\u8282\u7701\u7a7a\u95f4\u7684\u76ee\u7684</p> <p>\u201c\u8054\u5408\u201d \u4e0e \u201c\u7ed3\u6784\u201d \u6709\u4e00\u4e9b\u76f8\u4f3c\u4e4b\u5904\u3002\u4f46\u4e24\u8005\u6709\u672c\u8d28\u4e0a\u7684\u4e0d\u540c\u3002\u5728\u7ed3\u6784\u4e2d\u5404\u6210\u5458\u6709\u5404\u81ea\u7684\u5185\u5b58\u7a7a\u95f4\uff0c \u4e00\u4e2a\u7ed3\u6784\u53d8\u91cf\u7684\u603b\u957f\u5ea6\u662f\u5404\u6210\u5458\u957f\u5ea6\u4e4b\u548c\uff08\u7a7a\u7ed3\u6784\u9664\u5916\uff0c\u540c\u65f6\u4e0d\u8003\u8651\u8fb9\u754c\u8c03\u6574\uff09\u3002\u800c\u5728 \u201c\u8054\u5408\u201d \u4e2d\uff0c\u5404\u6210\u5458\u5171\u4eab\u4e00\u6bb5\u5185\u5b58\u7a7a\u95f4\uff0c \u4e00\u4e2a\u8054\u5408\u53d8\u91cf\u7684\u957f\u5ea6\u7b49\u4e8e\u5404\u6210\u5458\u4e2d\u6700\u957f\u7684\u957f\u5ea6\u3002\u5e94\u8be5\u8bf4\u660e\u7684\u662f\uff0c \u8fd9\u91cc\u6240\u8c13\u7684\u5171\u4eab\u4e0d\u662f\u6307\u628a\u591a\u4e2a\u6210\u5458\u540c\u65f6\u88c5\u5165\u4e00\u4e2a\u8054\u5408\u53d8\u91cf\u5185\uff0c \u800c\u662f\u6307\u8be5\u8054\u5408\u53d8\u91cf\u53ef\u88ab\u8d4b\u4e88\u4efb\u4e00\u6210\u5458\u503c\uff0c\u4f46\u6bcf\u6b21\u53ea\u80fd\u8d4b\u4e00\u79cd\u503c\uff0c \u8d4b\u5165\u65b0\u503c\u5219\u51b2\u53bb\u65e7\u503c\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u58f0\u660e\u4ee5\u4e0b\u8054\u5408:</p> <pre><code>union u_box {\n  struct box st_box;     \n  unsigned int ui_box;\n};\n</code></pre> <p>x86 \u7cfb\u7edf\u4e2d unsigned int \u548c box \u90fd\u4e3a 32 Bits, \u901a\u8fc7\u8be5\u8054\u5408\u4f7f st_box \u548c ui_box \u5171\u4eab\u4e00\u5757\u5185\u5b58\u3002\u5177\u4f53\u4f4d\u57df\u4e2d\u54ea\u4e00\u4f4d\u4e0e unsigned int \u54ea\u4e00\u4f4d\u76f8\u5bf9\u5e94\uff0c\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668\u548c\u786c\u4ef6\u3002 \u5229\u7528\u8054\u5408\u5c06\u4f4d\u57df\u5f52\u96f6\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>union u_box u;\nu.ui_box = 0;\n</code></pre> <p>\u5b66\u4e60\u53c2\u8003\u81ea\uff1ahttp://www.yuan-ji.me/C-C-%E4%BD%8D%E5%9F%9F-Bit-fields-%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</p>"},{"location":"basic_content/c_poly/","title":"C\u5b9e\u73b0C++\u7684\u9762\u5411\u5bf9\u8c61\u7279\u6027","text":""},{"location":"basic_content/c_poly/#1c","title":"1.C++\u5b9e\u73b0\u6848\u4f8b","text":"<p>C++\u4e2d\u7684\u591a\u6001:\u5728C++\u4e2d\u4f1a\u7ef4\u62a4\u4e00\u5f20\u865a\u51fd\u6570\u8868\uff0c\u6839\u636e\u8d4b\u503c\u517c\u5bb9\u89c4\u5219\uff0c\u6211\u4eec\u77e5\u9053\u7236\u7c7b\u7684\u6307\u9488\u6216\u8005\u5f15\u7528\u662f\u53ef\u4ee5\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61\u7684\u3002</p> <p>\u5982\u679c\u4e00\u4e2a\u7236\u7c7b\u7684\u6307\u9488\u6216\u8005\u5f15\u7528\u8c03\u7528\u7236\u7c7b\u7684\u865a\u51fd\u6570\u5219\u8be5\u7236\u7c7b\u7684\u6307\u9488\u4f1a\u5728\u81ea\u5df1\u7684\u865a\u51fd\u6570\u8868\u4e2d\u67e5\u627e\u81ea\u5df1\u7684\u51fd\u6570\u5730\u5740\uff0c\u5982\u679c\u8be5\u7236\u7c7b\u5bf9\u8c61\u7684\u6307\u9488\u6216\u8005\u5f15\u7528\u6307\u5411\u7684\u662f\u5b50\u7c7b\u7684\u5bf9\u8c61\uff0c\u800c\u4e14\u8be5\u5b50\u7c7b\u5df2\u7ecf\u91cd\u5199\u4e86\u7236\u7c7b\u7684\u865a\u51fd\u6570\uff0c\u5219\u8be5\u6307\u9488\u4f1a\u8c03\u7528\u5b50\u7c7b\u7684\u5df2\u7ecf\u91cd\u5199\u7684\u865a\u51fd\u6570\u3002</p> <p>\u5b66\u4e60\u6848\u4f8b\u4ee3\u7801\u89c1:c++_examp.cpp</p>"},{"location":"basic_content/c_poly/#2c","title":"2.C\u5b9e\u73b0","text":"<ul> <li>\u5c01\u88c5</li> </ul> <p>C\u8bed\u8a00\u4e2d\u662f\u6ca1\u6709class\u7c7b\u8fd9\u4e2a\u6982\u5ff5\u7684\uff0c\u4f46\u662f\u6709struct\u7ed3\u6784\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528struct\u6765\u6a21\u62df\uff1b</p> <p>\u4f7f\u7528\u51fd\u6570\u6307\u9488\u628a\u5c5e\u6027\u4e0e\u65b9\u6cd5\u5c01\u88c5\u5230\u7ed3\u6784\u4f53\u4e2d\u3002</p> <ul> <li>\u7ee7\u627f</li> </ul> <p>\u7ed3\u6784\u4f53\u5d4c\u5957</p> <ul> <li>\u591a\u6001</li> </ul> <p>\u7c7b\u4e0e\u5b50\u7c7b\u65b9\u6cd5\u7684\u51fd\u6570\u6307\u9488\u4e0d\u540c</p> <p>\u5728C\u8bed\u8a00\u7684\u7ed3\u6784\u4f53\u5185\u90e8\u662f\u6ca1\u6709\u6210\u5458\u51fd\u6570\u7684\uff0c\u5982\u679c\u5b9e\u73b0\u8fd9\u4e2a\u7236\u7ed3\u6784\u4f53\u548c\u5b50\u7ed3\u6784\u4f53\u5171\u6709\u7684\u51fd\u6570\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u51fd\u6570\u6307\u9488\u6765\u6a21\u62df\u3002\u4f46\u662f\u8fd9\u6837\u5904\u7406\u5b58\u5728\u4e00\u4e2a\u7f3a\u9677\u5c31\u662f\uff1a\u7236\u5b50\u5404\u81ea\u7684\u51fd\u6570\u6307\u9488\u4e4b\u95f4\u6307\u5411\u7684\u4e0d\u662f\u7c7b\u4f3cC++\u4e2d\u7ef4\u62a4\u7684\u865a\u51fd\u6570\u8868\u800c\u662f\u4e00\u5757\u7269\u7406\u5185\u5b58\uff0c\u5982\u679c\u6a21\u62df\u7684\u51fd\u6570\u8fc7\u591a\u7684\u8bdd\u5c31\u4f1a\u4e0d\u5bb9\u6613\u7ef4\u62a4\u4e86\u3002</p> <p>\u6a21\u62df\u591a\u6001\uff0c\u5fc5\u987b\u4fdd\u6301\u51fd\u6570\u6307\u9488\u53d8\u91cf\u5bf9\u9f50(\u5728\u5185\u5bb9\u4e0a\u5b8c\u5168\u4e00\u81f4\uff0c\u800c\u4e14\u53d8\u91cf\u5bf9\u9f50\u4e0a\u4e5f\u5b8c\u5168\u4e00\u81f4)\u3002\u5426\u5219\u7236\u7c7b\u6307\u9488\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61\uff0c\u8fd0\u884c\u5d29\u6e83\uff01</p> <p>\u5b66\u4e60\u6848\u4f8b\u4ee3\u7801\u89c1:c_examp.c</p>"},{"location":"basic_content/const/","title":"const\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/const/#1const","title":"1.const\u542b\u4e49","text":"<p>\u5e38\u7c7b\u578b\u662f\u6307\u4f7f\u7528\u7c7b\u578b\u4fee\u9970\u7b26const\u8bf4\u660e\u7684\u7c7b\u578b\uff0c\u5e38\u7c7b\u578b\u7684\u53d8\u91cf\u6216\u5bf9\u8c61\u7684\u503c\u662f\u4e0d\u80fd\u88ab\u66f4\u65b0\u7684\u3002</p>"},{"location":"basic_content/const/#2const","title":"2.const\u4f5c\u7528","text":"<p>\uff081\uff09\u53ef\u4ee5\u5b9a\u4e49\u5e38\u91cf</p> <pre><code>const int a=100;\n</code></pre> <p>\uff082\uff09\u7c7b\u578b\u68c0\u67e5</p> <p>const\u5e38\u91cf\u4e0e#define\u5b8f\u5b9a\u4e49\u5e38\u91cf\u7684\u533a\u522b\uff1a~~const\u5e38\u91cf\u5177\u6709\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u8fdb\u884c\u5b89\u5168\u68c0\u67e5\uff1b#define\u5b8f\u5b9a\u4e49\u6ca1\u6709\u6570\u636e\u7c7b\u578b\uff0c\u53ea\u662f\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u66ff\u6362\uff0c\u4e0d\u80fd\u8fdb\u884c\u5b89\u5168\u68c0\u67e5\u3002~~\u611f\u8c22\u4e24\u4f4d\u5927\u4f6c\u6307\u51fa\u8fd9\u91cc\u95ee\u9898\uff0c\u89c1\uff1a</p> <p>https://github.com/Light-City/CPlusPlusThings/issues/5</p> <p><code>const</code> \u5b9a\u4e49\u7684\u53d8\u91cf\u53ea\u6709\u7c7b\u578b\u4e3a\u6574\u6570\u6216\u679a\u4e3e\uff0c\u4e14\u4ee5\u5e38\u91cf\u8868\u8fbe\u5f0f\u521d\u59cb\u5316\u65f6\u624d\u80fd\u4f5c\u4e3a\u5e38\u91cf\u8868\u8fbe\u5f0f\u3002\u5176\u4ed6\u60c5\u51b5\u4e0b\u5b83\u53ea\u662f\u4e00\u4e2a <code>const</code> \u9650\u5b9a\u7684\u53d8\u91cf\uff0c\u4e0d\u8981\u5c06\u4e0e\u5e38\u91cf\u6df7\u6dc6\u3002</p> <p>\uff083\uff09\u9632\u6b62\u4fee\u6539\uff0c\u8d77\u4fdd\u62a4\u4f5c\u7528\uff0c\u589e\u52a0\u7a0b\u5e8f\u5065\u58ee\u6027</p> <pre><code>void f(const int i){\ni++; //error!\n}\n</code></pre> <p>\uff084\uff09\u53ef\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u5185\u5b58\u5206\u914d</p> <p>const\u5b9a\u4e49\u5e38\u91cf\u4ece\u6c47\u7f16\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u53ea\u662f\u7ed9\u51fa\u4e86\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\uff0c\u800c\u4e0d\u662f\u50cf#define\u4e00\u6837\u7ed9\u51fa\u7684\u662f\u7acb\u5373\u6570\uff0c\u6240\u4ee5\uff0cconst\u5b9a\u4e49\u7684\u5e38\u91cf\u5728\u7a0b\u5e8f\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53ea\u6709\u4e00\u4efd\u62f7\u8d1d\uff0c\u800c#define\u5b9a\u4e49\u7684\u5e38\u91cf\u5728\u5185\u5b58\u4e2d\u6709\u82e5\u5e72\u4e2a\u62f7\u8d1d\u3002</p>"},{"location":"basic_content/const/#3const","title":"3.const\u5bf9\u8c61\u9ed8\u8ba4\u4e3a\u6587\u4ef6\u5c40\u90e8\u53d8\u91cf","text":"<p>\u6ce8\u610f\uff1a\u975econst\u53d8\u91cf\u9ed8\u8ba4\u4e3aextern\u3002\u8981\u4f7fconst\u53d8\u91cf\u80fd\u591f\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u8bbf\u95ee\uff0c\u5fc5\u987b\u5728\u6587\u4ef6\u4e2d\u663e\u5f0f\u5730\u6307\u5b9a\u5b83\u4e3aextern\u3002</p> <p>\u672a\u88abconst\u4fee\u9970\u7684\u53d8\u91cf\u5728\u4e0d\u540c\u6587\u4ef6\u7684\u8bbf\u95ee</p> <pre><code>// file1.cpp\nint ext\n// file2.cpp\n#include&lt;iostream&gt;\n/**\n * by \u5149\u57ce\n * compile: g++ -o file file2.cpp file1.cpp\n * execute: ./file\n */\nextern int ext;\nint main(){\nstd::cout&lt;&lt;(ext+10)&lt;&lt;std::endl;\n}\n</code></pre> <p>const\u5e38\u91cf\u5728\u4e0d\u540c\u6587\u4ef6\u7684\u8bbf\u95ee</p> <pre><code>//extern_file1.cpp\nextern const int ext=12;\n//extern_file2.cpp\n#include&lt;iostream&gt;\n/**\n * by \u5149\u57ce\n * compile: g++ -o file const_file2.cpp const_file1.cpp\n * execute: ./file\n */\nextern const int ext;\nint main(){\nstd::cout&lt;&lt;ext&lt;&lt;std::endl;\n}\n</code></pre> <p>\u5c0f\u7ed3\uff1a\u53ef\u4ee5\u53d1\u73b0\u672a\u88abconst\u4fee\u9970\u7684\u53d8\u91cf\u4e0d\u9700\u8981extern\u663e\u5f0f\u58f0\u660e\uff01\u800cconst\u5e38\u91cf\u9700\u8981\u663e\u5f0f\u58f0\u660eextern\uff0c\u5e76\u4e14\u9700\u8981\u505a\u521d\u59cb\u5316\uff01\u56e0\u4e3a\u5e38\u91cf\u5728\u5b9a\u4e49\u540e\u5c31\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u6240\u4ee5\u5b9a\u4e49\u65f6\u5fc5\u987b\u521d\u59cb\u5316\u3002</p>"},{"location":"basic_content/const/#4","title":"4.\u5b9a\u4e49\u5e38\u91cf","text":"<pre><code>const int b = 10;\nb = 0; // error: assignment of read-only variable \u2018b\u2019\nconst string s = \"helloworld\";\nconst int i,j=0 // error: uninitialized const \u2018i\u2019\n</code></pre> <p>\u4e0a\u8ff0\u6709\u4e24\u4e2a\u9519\u8bef\uff0c\u7b2c\u4e00\uff1ab\u4e3a\u5e38\u91cf\uff0c\u4e0d\u53ef\u66f4\u6539\uff01\u7b2c\u4e8c\uff1ai\u4e3a\u5e38\u91cf\uff0c\u5fc5\u987b\u8fdb\u884c\u521d\u59cb\u5316\uff01(\u56e0\u4e3a\u5e38\u91cf\u5728\u5b9a\u4e49\u540e\u5c31\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u6240\u4ee5\u5b9a\u4e49\u65f6\u5fc5\u987b\u521d\u59cb\u5316\u3002)</p>"},{"location":"basic_content/const/#5const","title":"5.\u6307\u9488\u4e0econst","text":"<p>\u4e0e\u6307\u9488\u76f8\u5173\u7684const\u6709\u56db\u79cd\uff1a</p> <pre><code>const char * a; //\u6307\u5411const\u5bf9\u8c61\u7684\u6307\u9488\u6216\u8005\u8bf4\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\u3002\nchar const * a; //\u540c\u4e0a\nchar * const a; //\u6307\u5411\u7c7b\u578b\u5bf9\u8c61\u7684const\u6307\u9488\u3002\u6216\u8005\u8bf4\u5e38\u6307\u9488\u3001const\u6307\u9488\u3002\nconst char * const a; //\u6307\u5411const\u5bf9\u8c61\u7684const\u6307\u9488\u3002\n</code></pre> <p>\u5c0f\u7ed3\uff1a\u5982\u679cconst\u4f4d\u4e8e<code>*</code>\u7684\u5de6\u4fa7\uff0c\u5219const\u5c31\u662f\u7528\u6765\u4fee\u9970\u6307\u9488\u6240\u6307\u5411\u7684\u53d8\u91cf\uff0c\u5373\u6307\u9488\u6307\u5411\u4e3a\u5e38\u91cf\uff1b\u5982\u679cconst\u4f4d\u4e8e<code>*</code>\u7684\u53f3\u4fa7\uff0cconst\u5c31\u662f\u4fee\u9970\u6307\u9488\u672c\u8eab\uff0c\u5373\u6307\u9488\u672c\u8eab\u662f\u5e38\u91cf\u3002</p> <p>\u5177\u4f53\u4f7f\u7528\u5982\u4e0b\uff1a</p> <p>\uff081\uff09\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488</p> <pre><code>const int *ptr;\n*ptr = 10; //error\n</code></pre> <p>ptr\u662f\u4e00\u4e2a\u6307\u5411int\u7c7b\u578bconst\u5bf9\u8c61\u7684\u6307\u9488\uff0cconst\u5b9a\u4e49\u7684\u662fint\u7c7b\u578b\uff0c\u4e5f\u5c31\u662fptr\u6240\u6307\u5411\u7684\u5bf9\u8c61\u7c7b\u578b\uff0c\u800c\u4e0d\u662fptr\u672c\u8eab\uff0c\u6240\u4ee5ptr\u53ef\u4ee5\u4e0d\u7528\u8d4b\u521d\u59cb\u503c\u3002\u4f46\u662f\u4e0d\u80fd\u901a\u8fc7ptr\u53bb\u4fee\u6539\u6240\u6307\u5bf9\u8c61\u7684\u503c\u3002</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u4e5f\u4e0d\u80fd\u4f7f\u7528void<code>*</code>\u6307\u9488\u4fdd\u5b58const\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u5fc5\u987b\u4f7f\u7528const void<code>*</code>\u7c7b\u578b\u7684\u6307\u9488\u4fdd\u5b58const\u5bf9\u8c61\u7684\u5730\u5740\u3002</p> <pre><code>const int p = 10;\nconst void * vp = &amp;p;\nvoid *vp = &amp;p; //error\n</code></pre> <p>\u53e6\u5916\u4e00\u4e2a\u91cd\u70b9\u662f\uff1a\u5141\u8bb8\u628a\u975econst\u5bf9\u8c61\u7684\u5730\u5740\u8d4b\u7ed9\u6307\u5411const\u5bf9\u8c61\u7684\u6307\u9488\u3002</p> <p>\u5c06\u975econst\u5bf9\u8c61\u7684\u5730\u5740\u8d4b\u7ed9const\u5bf9\u8c61\u7684\u6307\u9488:</p> <pre><code>const int *ptr;\nint val = 3;\nptr = &amp;val; //ok\n</code></pre> <p>\u6211\u4eec\u4e0d\u80fd\u901a\u8fc7ptr\u6307\u9488\u6765\u4fee\u6539val\u7684\u503c\uff0c\u5373\u4f7f\u5b83\u6307\u5411\u7684\u662f\u975econst\u5bf9\u8c61!</p> <p>\u6211\u4eec\u4e0d\u80fd\u4f7f\u7528\u6307\u5411const\u5bf9\u8c61\u7684\u6307\u9488\u4fee\u6539\u57fa\u7840\u5bf9\u8c61\uff0c\u7136\u800c\u5982\u679c\u8be5\u6307\u9488\u6307\u5411\u4e86\u975econst\u5bf9\u8c61\uff0c\u53ef\u7528\u5176\u4ed6\u65b9\u5f0f\u4fee\u6539\u5176\u6240\u6307\u7684\u5bf9\u8c61\u3002\u53ef\u4ee5\u4fee\u6539const\u6307\u9488\u6240\u6307\u5411\u7684\u503c\u7684\uff0c\u4f46\u662f\u4e0d\u80fd\u901a\u8fc7const\u5bf9\u8c61\u6307\u9488\u6765\u8fdb\u884c\u800c\u5df2\uff01\u5982\u4e0b\u4fee\u6539\uff1a</p> <pre><code>int *ptr1 = &amp;val;\n*ptr1=4;\ncout&lt;&lt;*ptr&lt;&lt;endl;\n</code></pre> <p>\u5c0f\u7ed3\uff1a\u5bf9\u4e8e\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\uff0c\u4e0d\u80fd\u901a\u8fc7\u6307\u9488\u6765\u4fee\u6539\u5bf9\u8c61\u7684\u503c\u3002\u4e5f\u4e0d\u80fd\u4f7f\u7528void`*`\u6307\u9488\u4fdd\u5b58const\u5bf9\u8c61\u7684\u5730\u5740\uff0c\u5fc5\u987b\u4f7f\u7528const void`*`\u7c7b\u578b\u7684\u6307\u9488\u4fdd\u5b58const\u5bf9\u8c61\u7684\u5730\u5740\u3002\u5141\u8bb8\u628a\u975econst\u5bf9\u8c61\u7684\u5730\u5740\u8d4b\u503c\u7ed9const\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u5982\u679c\u8981\u4fee\u6539\u6307\u9488\u6240\u6307\u5411\u7684\u5bf9\u8c61\u503c\uff0c\u5fc5\u987b\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f\u4fee\u6539\uff0c\u4e0d\u80fd\u76f4\u63a5\u901a\u8fc7\u5f53\u524d\u6307\u9488\u76f4\u63a5\u4fee\u6539\u3002</p> <p>\uff082\uff09\u5e38\u6307\u9488</p> <p>const\u6307\u9488\u5fc5\u987b\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u4e14const\u6307\u9488\u7684\u503c\u4e0d\u80fd\u4fee\u6539\u3002</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main(){\n\nint num=0;\nint * const ptr=&amp;num; //const\u6307\u9488\u5fc5\u987b\u521d\u59cb\u5316\uff01\u4e14const\u6307\u9488\u7684\u503c\u4e0d\u80fd\u4fee\u6539\nint * t = &amp;num;\n*t = 1;\ncout&lt;&lt;*ptr&lt;&lt;endl;\n}\n</code></pre> <p>\u4e0a\u8ff0\u4fee\u6539ptr\u6307\u9488\u6240\u6307\u5411\u7684\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7\u975econst\u6307\u9488\u6765\u4fee\u6539\u3002</p> <p>\u6700\u540e\uff0c\u5f53\u628a\u4e00\u4e2aconst\u5e38\u91cf\u7684\u5730\u5740\u8d4b\u503c\u7ed9ptr\u65f6\u5019\uff0c\u7531\u4e8eptr\u6307\u5411\u7684\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u800c\u4e0d\u662fconst\u5e38\u91cf\uff0c\u6240\u4ee5\u4f1a\u62a5\u9519\uff0c\u51fa\u73b0\uff1aconst int<code>*</code> -&gt; int <code>*</code>\u9519\u8bef\uff01</p> <pre><code>#include&lt;iostream&gt;\nusing namespace std;\nint main(){\nconst int num=0;\nint * const ptr=&amp;num; //error! const int* -&gt; int*\ncout&lt;&lt;*ptr&lt;&lt;endl;\n}\n</code></pre> <p>\u4e0a\u8ff0\u82e5\u6539\u4e3a const int <code>*</code>ptr\u6216\u8005\u6539\u4e3aconst int <code>*</code>const ptr\uff0c\u90fd\u53ef\u4ee5\u6b63\u5e38\uff01</p> <p>\uff083\uff09\u6307\u5411\u5e38\u91cf\u7684\u5e38\u6307\u9488</p> <p>\u7406\u89e3\u5b8c\u524d\u4e24\u79cd\u60c5\u51b5\uff0c\u4e0b\u9762\u8fd9\u4e2a\u60c5\u51b5\u5c31\u6bd4\u8f83\u597d\u7406\u89e3\u4e86\uff1a</p> <pre><code>const int p = 3;\nconst int * const ptr = &amp;p; </code></pre> <p>ptr\u662f\u4e00\u4e2aconst\u6307\u9488\uff0c\u7136\u540e\u6307\u5411\u4e86\u4e00\u4e2aint \u7c7b\u578b\u7684const\u5bf9\u8c61\u3002</p>"},{"location":"basic_content/const/#6const","title":"6.\u51fd\u6570\u4e2d\u4f7f\u7528const","text":"<p>cost\u4fee\u9970\u51fd\u6570\u8fd4\u56de\u503c</p> <p>\u8fd9\u4e2a\u8ddfconst\u4fee\u9970\u666e\u901a\u53d8\u91cf\u4ee5\u53ca\u6307\u9488\u7684\u542b\u4e49\u57fa\u672c\u76f8\u540c\uff1a</p> <p>\uff081\uff09const int</p> <pre><code>const int func1();\n</code></pre> <p>\u8fd9\u4e2a\u672c\u8eab\u65e0\u610f\u4e49\uff0c\u56e0\u4e3a\u53c2\u6570\u8fd4\u56de\u672c\u8eab\u5c31\u662f\u8d4b\u503c\u7ed9\u5176\u4ed6\u7684\u53d8\u91cf\uff01</p> <p>\uff082\uff09const int*</p> <pre><code>const int* func2();\n</code></pre> <p>\u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u4e0d\u53d8\u3002</p> <p>\uff083\uff09int *const</p> <pre><code>int *const func2();\n</code></pre> <p>\u6307\u9488\u672c\u8eab\u4e0d\u53ef\u53d8\u3002</p> <p>const\u4fee\u9970\u51fd\u6570\u53c2\u6570</p> <p>\uff081\uff09\u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570\u53ca\u6307\u9488\u672c\u8eab\u5728\u51fd\u6570\u5185\u4e0d\u53ef\u53d8\uff0c\u65e0\u610f\u4e49\uff01</p> <pre><code>void func(const int var); // \u4f20\u9012\u8fc7\u6765\u7684\u53c2\u6570\u4e0d\u53ef\u53d8\nvoid func(int *const var); // \u6307\u9488\u672c\u8eab\u4e0d\u53ef\u53d8\n</code></pre> <p>\u8868\u660e\u53c2\u6570\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u4f46\u6b64\u5904\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\uff0cvar\u672c\u8eab\u5c31\u662f\u5f62\u53c2\uff0c\u5728\u51fd\u6570\u5185\u4e0d\u4f1a\u6539\u53d8\u3002\u5305\u62ec\u4f20\u5165\u7684\u5f62\u53c2\u662f\u6307\u9488\u4e5f\u662f\u4e00\u6837\u3002</p> <p>\u8f93\u5165\u53c2\u6570\u91c7\u7528\u201c\u503c\u4f20\u9012\u201d\uff0c\u7531\u4e8e\u51fd\u6570\u5c06\u81ea\u52a8\u4ea7\u751f\u4e34\u65f6\u53d8\u91cf\u7528\u4e8e\u590d\u5236\u8be5\u53c2\u6570\uff0c\u8be5\u8f93\u5165\u53c2\u6570\u672c\u6765\u5c31\u65e0\u9700\u4fdd\u62a4\uff0c\u6240\u4ee5\u4e0d\u8981\u52a0const \u4fee\u9970\u3002</p> <p>\uff082\uff09\u53c2\u6570\u6307\u9488\u6240\u6307\u5185\u5bb9\u4e3a\u5e38\u91cf\u4e0d\u53ef\u53d8</p> <pre><code>void StringCopy(char *dst, const char *src);\n</code></pre> <p>\u5176\u4e2dsrc \u662f\u8f93\u5165\u53c2\u6570\uff0cdst \u662f\u8f93\u51fa\u53c2\u6570\u3002\u7ed9src\u52a0\u4e0aconst\u4fee\u9970\u540e\uff0c\u5982\u679c\u51fd\u6570\u4f53\u5185\u7684\u8bed\u53e5\u8bd5\u56fe\u6539\u52a8src\u7684\u5185\u5bb9\uff0c\u7f16\u8bd1\u5668\u5c06\u6307\u51fa\u9519\u8bef\u3002\u8fd9\u5c31\u662f\u52a0\u4e86const\u7684\u4f5c\u7528\u4e4b\u4e00\u3002</p> <p>\uff083\uff09\u53c2\u6570\u4e3a\u5f15\u7528\uff0c\u4e3a\u4e86\u589e\u52a0\u6548\u7387\u540c\u65f6\u9632\u6b62\u4fee\u6539\u3002</p> <pre><code>void func(const A &amp;a)\n</code></pre> <p>\u5bf9\u4e8e\u975e\u5185\u90e8\u6570\u636e\u7c7b\u578b\u7684\u53c2\u6570\u800c\u8a00\uff0c\u8c61void func(A a) \u8fd9\u6837\u58f0\u660e\u7684\u51fd\u6570\u6ce8\u5b9a\u6548\u7387\u6bd4\u8f83\u4f4e\u3002\u56e0\u4e3a\u51fd\u6570\u4f53\u5185\u5c06\u4ea7\u751fA \u7c7b\u578b</p> <p>\u7684\u4e34\u65f6\u5bf9\u8c61\u7528\u4e8e\u590d\u5236\u53c2\u6570a\uff0c\u800c\u4e34\u65f6\u5bf9\u8c61\u7684\u6784\u9020\u3001\u590d\u5236\u3001\u6790\u6784\u8fc7\u7a0b\u90fd\u5c06\u6d88\u8017\u65f6\u95f4\u3002</p> <p>\u4e3a\u4e86\u63d0\u9ad8\u6548\u7387\uff0c\u53ef\u4ee5\u5c06\u51fd\u6570\u58f0\u660e\u6539\u4e3avoid func(A &amp;a)\uff0c\u56e0\u4e3a\u201c\u5f15\u7528\u4f20\u9012\u201d\u4ec5\u501f\u7528\u4e00\u4e0b\u53c2\u6570\u7684\u522b\u540d\u800c\u5df2\uff0c\u4e0d\u9700\u8981\u4ea7\u751f\u4e34</p> <p>\u65f6\u5bf9\u8c61\u3002\u4f46\u662f\u51fd\u6570void func(A &amp;a) \u5b58\u5728\u4e00\u4e2a\u7f3a\u70b9\uff1a</p> <p>\u201c\u5f15\u7528\u4f20\u9012\u201d\u6709\u53ef\u80fd\u6539\u53d8\u53c2\u6570a\uff0c\u8fd9\u662f\u6211\u4eec\u4e0d\u671f\u671b\u7684\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5f88\u5bb9\u6613\uff0c\u52a0const\u4fee\u9970\u5373\u53ef\uff0c\u56e0\u6b64\u51fd\u6570\u6700\u7ec8\u6210\u4e3a</p> <p>void func(const A &amp;a)\u3002</p> <p>\u4ee5\u6b64\u7c7b\u63a8\uff0c\u662f\u5426\u5e94\u5c06void func(int x) \u6539\u5199\u4e3avoid func(const int &amp;x)\uff0c\u4ee5\u4fbf\u63d0\u9ad8\u6548\u7387\uff1f\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\uff0c\u56e0\u4e3a\u5185\u90e8\u6570</p> <p>\u636e\u7c7b\u578b\u7684\u53c2\u6570\u4e0d\u5b58\u5728\u6784\u9020\u3001\u6790\u6784\u7684\u8fc7\u7a0b\uff0c\u800c\u590d\u5236\u4e5f\u975e\u5e38\u5feb\uff0c\u201c\u503c\u4f20\u9012\u201d\u548c\u201c\u5f15\u7528\u4f20\u9012\u201d\u7684\u6548\u7387\u51e0\u4e4e\u76f8\u5f53\u3002</p> <p>\u5c0f\u7ed3\uff1a\u5bf9\u4e8e\u975e\u5185\u90e8\u6570\u636e\u7c7b\u578b\u7684\u8f93\u5165\u53c2\u6570\uff0c\u5e94\u8be5\u5c06\u201c\u503c\u4f20\u9012\u201d\u7684\u65b9\u5f0f\u6539\u4e3a\u201cconst \u5f15\u7528\u4f20\u9012\u201d\uff0c\u76ee\u7684\u662f\u63d0\u9ad8\u6548\u7387\u3002\u4f8b\u5982\u5c06void func(A a) \u6539\u4e3avoid func(const A &amp;a)\u3002\u5bf9\u4e8e\u5185\u90e8\u6570\u636e\u7c7b\u578b\u7684\u8f93\u5165\u53c2\u6570\uff0c\u4e0d\u8981\u5c06\u201c\u503c\u4f20\u9012\u201d\u7684\u65b9\u5f0f\u6539\u4e3a\u201cconst \u5f15\u7528\u4f20\u9012\u201d\u3002\u5426\u5219\u65e2\u8fbe\u4e0d\u5230\u63d0\u9ad8\u6548\u7387\u7684\u76ee\u7684\uff0c\u53c8\u964d\u4f4e\u4e86\u51fd\u6570\u7684\u53ef\u7406\u89e3\u6027\u3002\u4f8b\u5982void func(int x) \u4e0d\u5e94\u8be5\u6539\u4e3avoid func(const int &amp;x)\u3002</p> <p>\u4ee5\u4e0a\u89e3\u51b3\u4e86\u4e24\u4e2a\u9762\u8bd5\u95ee\u9898\uff1a</p> <p>\uff081\uff09\u5982\u679c\u51fd\u6570\u9700\u8981\u4f20\u5165\u4e00\u4e2a\u6307\u9488\uff0c\u662f\u5426\u9700\u8981\u4e3a\u8be5\u6307\u9488\u52a0\u4e0aconst\uff0c\u628aconst\u52a0\u5728\u6307\u9488\u4e0d\u540c\u7684\u4f4d\u7f6e\u6709\u4ec0\u4e48\u533a\u522b\uff1b</p> <p>\uff082\uff09\u5982\u679c\u5199\u7684\u51fd\u6570\u9700\u8981\u4f20\u5165\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u590d\u6742\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4f20\u5165\u503c\u53c2\u6570\u6216\u8005\u5f15\u7528\u53c2\u6570\u6709\u4ec0\u4e48\u533a\u522b\uff0c\u4ec0\u4e48\u65f6\u5019\u9700\u8981\u4e3a\u4f20\u5165\u7684\u5f15\u7528\u53c2\u6570\u52a0\u4e0aconst\u3002 </p>"},{"location":"basic_content/const/#7const","title":"7.\u7c7b\u4e2d\u4f7f\u7528const","text":"<p>\u5728\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u4efb\u4f55\u4e0d\u4f1a\u4fee\u6539\u6570\u636e\u6210\u5458\u7684\u51fd\u6570\u90fd\u5e94\u8be5\u58f0\u660e\u4e3aconst\u7c7b\u578b\u3002\u5982\u679c\u5728\u7f16\u5199const\u6210\u5458\u51fd\u6570\u65f6\uff0c\u4e0d\u614e\u4fee\u6539</p> <p>\u6570\u636e\u6210\u5458\uff0c\u6216\u8005\u8c03\u7528\u4e86\u5176\u5b83\u975econst\u6210\u5458\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c06\u6307\u51fa\u9519\u8bef\uff0c\u8fd9\u65e0\u7591\u4f1a\u63d0\u9ad8\u7a0b\u5e8f\u7684\u5065\u58ee\u6027\u3002\u4f7f\u7528const\u5173</p> <p>\u5b57\u8fdb\u884c\u8bf4\u660e\u7684\u6210\u5458\u51fd\u6570\uff0c\u79f0\u4e3a\u5e38\u6210\u5458\u51fd\u6570\u3002\u53ea\u6709\u5e38\u6210\u5458\u51fd\u6570\u624d\u6709\u8d44\u683c\u64cd\u4f5c\u5e38\u91cf\u6216\u5e38\u5bf9\u8c61\uff0c\u6ca1\u6709\u4f7f\u7528const\u5173\u952e\u5b57</p> <p>\u660e\u7684\u6210\u5458\u51fd\u6570\u4e0d\u80fd\u7528\u6765\u64cd\u4f5c\u5e38\u5bf9\u8c61\u3002</p> <p>\u5bf9\u4e8e\u7c7b\u4e2d\u7684const\u6210\u5458\u53d8\u91cf\u5fc5\u987b\u901a\u8fc7\u521d\u59cb\u5316\u5217\u8868\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>class Apple\n{\nprivate:\nint people[100];\npublic:\nApple(int i); const int apple_number;\n};\n\nApple::Apple(int i):apple_number(i)\n{\n\n}\n</code></pre> <p>const\u5bf9\u8c61\u53ea\u80fd\u8bbf\u95eeconst\u6210\u5458\u51fd\u6570,\u800c\u975econst\u5bf9\u8c61\u53ef\u4ee5\u8bbf\u95ee\u4efb\u610f\u7684\u6210\u5458\u51fd\u6570,\u5305\u62ecconst\u6210\u5458\u51fd\u6570.</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>//apple.cpp\nclass Apple\n{\nprivate:\nint people[100];\npublic:\nApple(int i); const int apple_number;\nvoid take(int num) const;\nint add(int num);\nint add(int num) const;\nint getCount() const;\n\n};\n//main.cpp\n#include&lt;iostream&gt;\n#include\"apple.cpp\"\nusing namespace std;\n\nApple::Apple(int i):apple_number(i)\n{\n\n}\nint Apple::add(int num){\ntake(num);\n}\nint Apple::add(int num) const{\ntake(num);\n}\nvoid Apple::take(int num) const\n{\ncout&lt;&lt;\"take func \"&lt;&lt;num&lt;&lt;endl;\n}\nint Apple::getCount() const\n{\ntake(1);\n//    add(); //error\nreturn apple_number;\n}\nint main(){\nApple a(2);\ncout&lt;&lt;a.getCount()&lt;&lt;endl;\na.add(10);\nconst Apple b(3);\nb.add(100);\nreturn 0;\n}\n//\u7f16\u8bd1\uff1a g++ -o main main.cpp apple.cpp\n//\u7ed3\u679c\ntake func 1\n2\ntake func 10\ntake func 100\n</code></pre> <p>\u4e0a\u9762getCount()\u65b9\u6cd5\u4e2d\u8c03\u7528\u4e86\u4e00\u4e2aadd\u65b9\u6cd5\uff0c\u800cadd\u65b9\u6cd5\u5e76\u975econst\u4fee\u9970\uff0c\u6240\u4ee5\u8fd0\u884c\u62a5\u9519\u3002\u4e5f\u5c31\u662f\u8bf4const\u5bf9\u8c61\u53ea\u80fd\u8bbf\u95eeconst\u6210\u5458\u51fd\u6570\u3002</p> <p>\u800cadd\u65b9\u6cd5\u53c8\u8c03\u7528\u4e86const\u4fee\u9970\u7684take\u65b9\u6cd5\uff0c\u8bc1\u660e\u4e86\u975econst\u5bf9\u8c61\u53ef\u4ee5\u8bbf\u95ee\u4efb\u610f\u7684\u6210\u5458\u51fd\u6570,\u5305\u62ecconst\u6210\u5458\u51fd\u6570\u3002</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u770b\u5230add\u7684\u4e00\u4e2a\u91cd\u8f7d\u51fd\u6570\uff0c\u4e5f\u8f93\u51fa\u4e86\u4e24\u4e2a\u7ed3\u679c\uff0c\u8bf4\u660econst\u5bf9\u8c61\u9ed8\u8ba4\u8c03\u7528const\u6210\u5458\u51fd\u6570\u3002</p> <p>\u6211\u4eec\u9664\u4e86\u4e0a\u8ff0\u7684\u521d\u59cb\u5316const\u5e38\u91cf\u7528\u521d\u59cb\u5316\u5217\u8868\u65b9\u5f0f\u5916\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u65b9\u6cd5\uff1a</p> <p>\u7b2c\u4e00\uff1a\u5c06\u5e38\u91cf\u5b9a\u4e49\u4e0estatic\u7ed3\u5408\uff0c\u4e5f\u5c31\u662f\uff1a</p> <pre><code>static const int apple_number\n</code></pre> <p>\u7b2c\u4e8c\uff1a\u5728\u5916\u9762\u521d\u59cb\u5316\uff1a</p> <pre><code>const int Apple::apple_number=10;\n</code></pre> <p>\u5f53\u7136\uff0c\u5982\u679c\u4f60\u4f7f\u7528c++11\u8fdb\u884c\u7f16\u8bd1\uff0c\u76f4\u63a5\u53ef\u4ee5\u5728\u5b9a\u4e49\u51fa\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u76f4\u63a5\u5199\u6210\uff1a</p> <pre><code>static const int apple_number=10;\n\u6216\u8005\nconst int apple_number=10;\n</code></pre> <p>\u8fd9\u4e24\u79cd\u90fd\u5728c++11\u4e2d\u652f\u6301\uff01</p> <p>\u7f16\u8bd1\u7684\u65f6\u5019\u52a0\u4e0a<code>-std=c++11</code>\u5373\u53ef\uff01</p> <p>\u8fd9\u91cc\u63d0\u5230\u4e86static\uff0c\u4e0b\u9762\u7b80\u5355\u7684\u8bf4\u4e00\u4e0b\uff1a</p> <p>\u5728C++\u4e2d\uff0cstatic\u9759\u6001\u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u5728\u7c7b\u7684\u5185\u90e8\u521d\u59cb\u5316\u3002\u5728\u7c7b\u7684\u5185\u90e8\u53ea\u662f\u58f0\u660e\uff0c\u5b9a\u4e49\u5fc5\u987b\u5728\u7c7b\u5b9a\u4e49\u4f53\u7684\u5916\u90e8\uff0c\u901a\u5e38\u5728\u7c7b\u7684\u5b9e\u73b0\u6587\u4ef6\u4e2d\u521d\u59cb\u5316\u3002</p> <p>\u5728\u7c7b\u4e2d\u58f0\u660e\uff1a</p> <pre><code>static int ap;\n</code></pre> <p>\u5728\u7c7b\u5b9e\u73b0\u6587\u4ef6\u4e2d\u4f7f\u7528\uff1a</p> <pre><code>int Apple::ap=666\n</code></pre> <p>\u5bf9\u4e8e\u6b64\u9879\uff0cc++11\u4e0d\u80fd\u8fdb\u884c\u58f0\u660e\u5e76\u521d\u59cb\u5316\uff0c\u4e5f\u5c31\u662f\u4e0a\u8ff0\u4f7f\u7528\u65b9\u6cd5\u3002</p>"},{"location":"basic_content/decltype/","title":"decltype\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/decltype/#1","title":"1.\u57fa\u672c\u4f7f\u7528","text":"<p>decltype\u7684\u8bed\u6cd5\u662f:</p> <pre><code>decltype (expression)\n</code></pre> <p>\u8fd9\u91cc\u7684\u62ec\u53f7\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684,decltype\u7684\u4f5c\u7528\u662f\u201c\u67e5\u8be2\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u201d\uff0c\u56e0\u6b64\uff0c\u4e0a\u9762\u8bed\u53e5\u7684\u6548\u679c\u662f\uff0c\u8fd4\u56de expression \u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u3002\u6ce8\u610f\uff0cdecltype \u4ec5\u4ec5\u201c\u67e5\u8be2\u201d\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\uff0c\u5e76\u4e0d\u4f1a\u5bf9\u8868\u8fbe\u5f0f\u8fdb\u884c\u201c\u6c42\u503c\u201d\u3002</p>"},{"location":"basic_content/decltype/#11","title":"1.1 \u63a8\u5bfc\u51fa\u8868\u8fbe\u5f0f\u7c7b\u578b","text":"<pre><code>int i = 4;\ndecltype(i) a; //\u63a8\u5bfc\u7ed3\u679c\u4e3aint\u3002a\u7684\u7c7b\u578b\u4e3aint\u3002\n</code></pre>"},{"location":"basic_content/decltype/#12-usingtypedef","title":"1.2 \u4e0eusing/typedef\u5408\u7528\uff0c\u7528\u4e8e\u5b9a\u4e49\u7c7b\u578b\u3002","text":"<pre><code>using size_t = decltype(sizeof(0));//sizeof(a)\u7684\u8fd4\u56de\u503c\u4e3asize_t\u7c7b\u578b\nusing ptrdiff_t = decltype((int*)0 - (int*)0);\nusing nullptr_t = decltype(nullptr);\nvector&lt;int &gt;vec;\ntypedef decltype(vec.begin()) vectype;\nfor (vectype i = vec.begin; i != vec.end(); i++)\n{\n//...\n}\n</code></pre> <p>\u8fd9\u6837\u548cauto\u4e00\u6837\uff0c\u4e5f\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002</p>"},{"location":"basic_content/decltype/#13","title":"1.3 \u91cd\u7528\u533f\u540d\u7c7b\u578b","text":"<p>\u5728C++\u4e2d\uff0c\u6211\u4eec\u6709\u65f6\u5019\u4f1a\u9047\u4e0a\u4e00\u4e9b\u533f\u540d\u7c7b\u578b\uff0c\u5982:</p> <pre><code>struct {\nint d ;\ndoubel b;\n}anon_s;\n</code></pre> <p>\u800c\u501f\u52a9decltype\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u4f7f\u7528\u8fd9\u4e2a\u533f\u540d\u7684\u7ed3\u6784\u4f53\uff1a</p> <pre><code>decltype(anon_s) as ;//\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4e0a\u9762\u533f\u540d\u7684\u7ed3\u6784\u4f53\n</code></pre>"},{"location":"basic_content/decltype/#14-auto","title":"1.4 \u6cdb\u578b\u7f16\u7a0b\u4e2d\u7ed3\u5408auto\uff0c\u7528\u4e8e\u8ffd\u8e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b","text":"<p>\u8fd9\u4e5f\u662fdecltype\u6700\u5927\u7684\u7528\u9014\u4e86\u3002</p> <pre><code>template &lt;typename T&gt;\nauto multiply(T x, T y)-&gt;decltype(x*y)\n{\nreturn x*y;\n}\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u89c1\uff1adecltype.cpp</p>"},{"location":"basic_content/decltype/#2","title":"2.\u5224\u522b\u89c4\u5219","text":"<p>\u5bf9\u4e8edecltype(e)\u800c\u8a00\uff0c\u5176\u5224\u522b\u7ed3\u679c\u53d7\u4ee5\u4e0b\u6761\u4ef6\u7684\u5f71\u54cd\uff1a</p> <p>\u5982\u679ce\u662f\u4e00\u4e2a\u6ca1\u6709\u5e26\u62ec\u53f7\u7684\u6807\u8bb0\u7b26\u8868\u8fbe\u5f0f\u6216\u8005\u7c7b\u6210\u5458\u8bbf\u95ee\u8868\u8fbe\u5f0f\uff0c\u90a3\u4e48\u7684decltype\uff08e\uff09\u5c31\u662fe\u6240\u547d\u540d\u7684\u5b9e\u4f53\u7684\u7c7b\u578b\u3002\u6b64\u5916\uff0c\u5982\u679ce\u662f\u4e00\u4e2a\u88ab\u91cd\u8f7d\u7684\u51fd\u6570\uff0c\u5219\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\u3002 \u5426\u5219 \uff0c\u5047\u8bbee\u7684\u7c7b\u578b\u662fT\uff0c\u5982\u679ce\u662f\u4e00\u4e2a\u5c06\u4ea1\u503c\uff0c\u90a3\u4e48decltype\uff08e\uff09\u4e3aT&amp;&amp; \u5426\u5219\uff0c\u5047\u8bbee\u7684\u7c7b\u578b\u662fT\uff0c\u5982\u679ce\u662f\u4e00\u4e2a\u5de6\u503c\uff0c\u90a3\u4e48decltype\uff08e\uff09\u4e3aT&amp;\u3002 \u5426\u5219\uff0c\u5047\u8bbee\u7684\u7c7b\u578b\u662fT\uff0c\u5219decltype\uff08e\uff09\u4e3aT\u3002</p> <p>\u6807\u8bb0\u7b26\u6307\u7684\u662f\u9664\u53bb\u5173\u952e\u5b57\u3001\u5b57\u9762\u91cf\u7b49\u7f16\u8bd1\u5668\u9700\u8981\u4f7f\u7528\u7684\u6807\u8bb0\u4e4b\u5916\u7684\u7a0b\u5e8f\u5458\u81ea\u5df1\u5b9a\u4e49\u7684\u6807\u8bb0\uff0c\u800c\u5355\u4e2a\u6807\u8bb0\u7b26\u5bf9\u5e94\u7684\u8868\u8fbe\u5f0f\u5373\u4e3a\u6807\u8bb0\u7b26\u8868\u8fbe\u5f0f\u3002\u4f8b\u5982\uff1a</p> <pre><code>int arr[4]\n</code></pre> <p>\u5219arr\u4e3a\u4e00\u4e2a\u6807\u8bb0\u7b26\u8868\u8fbe\u5f0f\uff0c\u800carr[3]+0\u4e0d\u662f\u3002</p> <p>\u4e3e\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>int i = 4;\nint arr[5] = { 0 };\nint *ptr = arr;\nstruct S{ double d; }s ;\nvoid Overloaded(int);\nvoid Overloaded(char);//\u91cd\u8f7d\u7684\u51fd\u6570\nint &amp;&amp; RvalRef();\nconst bool Func(int);\n\n//\u89c4\u5219\u4e00\uff1a\u63a8\u5bfc\u4e3a\u5176\u7c7b\u578b\ndecltype (arr) var1; //int \u6807\u8bb0\u7b26\u8868\u8fbe\u5f0f\n\ndecltype (ptr) var2;//int *  \u6807\u8bb0\u7b26\u8868\u8fbe\u5f0f\n\ndecltype(s.d) var3;//doubel \u6210\u5458\u8bbf\u95ee\u8868\u8fbe\u5f0f\n\n//decltype(Overloaded) var4;//\u91cd\u8f7d\u51fd\u6570\u3002\u7f16\u8bd1\u9519\u8bef\u3002\n\n//\u89c4\u5219\u4e8c\uff1a\u5c06\u4ea1\u503c\u3002\u63a8\u5bfc\u4e3a\u7c7b\u578b\u7684\u53f3\u503c\u5f15\u7528\u3002\n\ndecltype (RvalRef()) var5 = 1;\n\n//\u89c4\u5219\u4e09\uff1a\u5de6\u503c\uff0c\u63a8\u5bfc\u4e3a\u7c7b\u578b\u7684\u5f15\u7528\u3002\n\ndecltype ((i))var6 = i;     //int&amp;\n\ndecltype (true ? i : i) var7 = i; //int&amp;  \u6761\u4ef6\u8868\u8fbe\u5f0f\u8fd4\u56de\u5de6\u503c\u3002\n\ndecltype (++i) var8 = i; //int&amp;  ++i\u8fd4\u56dei\u7684\u5de6\u503c\u3002\n\ndecltype(arr[5]) var9 = i;//int&amp;. []\u64cd\u4f5c\u8fd4\u56de\u5de6\u503c\n\ndecltype(*ptr)var10 = i;//int&amp; *\u64cd\u4f5c\u8fd4\u56de\u5de6\u503c\n\ndecltype(\"hello\")var11 = \"hello\"; //const char(&amp;)[9]  \u5b57\u7b26\u4e32\u5b57\u9762\u5e38\u91cf\u4e3a\u5de6\u503c\uff0c\u4e14\u4e3aconst\u5de6\u503c\u3002\n\n\n//\u89c4\u5219\u56db\uff1a\u4ee5\u4e0a\u90fd\u4e0d\u662f\uff0c\u5219\u63a8\u5bfc\u4e3a\u672c\u7c7b\u578b\n\ndecltype(1) var12;//const int\n\ndecltype(Func(1)) var13=true;//const bool\n\ndecltype(i++) var14 = i;//int i++\u8fd4\u56de\u53f3\u503c\n</code></pre> <p>\u5b66\u4e60\u53c2\u8003\uff1ahttps://www.cnblogs.com/QG-whz/p/4952980.html</p>"},{"location":"basic_content/enum/","title":"enum\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/enum/#_1","title":"\u4f20\u7edf\u884c\u4e3a","text":"<p>\u679a\u4e3e\u6709\u5982\u4e0b\u95ee\u9898\uff1a</p> <ul> <li>\u4f5c\u7528\u57df\u4e0d\u53d7\u9650,\u4f1a\u5bb9\u6613\u5f15\u8d77\u547d\u540d\u51b2\u7a81\u3002\u4f8b\u5982\u4e0b\u9762\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7\u7684\uff1a</li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nenum Color {RED,BLUE};\nenum Feeling {EXCITED,BLUE};\n\nint main() {\nreturn 0;\n}\n</code></pre> <ul> <li>\u4f1a\u9690\u5f0f\u8f6c\u6362\u4e3aint</li> <li>\u7528\u6765\u8868\u5f81\u679a\u4e3e\u53d8\u91cf\u7684\u5b9e\u9645\u7c7b\u578b\u4e0d\u80fd\u660e\u786e\u6307\u5b9a\uff0c\u4ece\u800c\u65e0\u6cd5\u652f\u6301\u679a\u4e3e\u7c7b\u578b\u7684\u524d\u5411\u58f0\u660e\u3002</li> </ul> <p>\u5177\u4f53\u5b9e\u73b0\u89c1\uff1atradition_color.cpp</p>"},{"location":"basic_content/enum/#_2","title":"\u7ecf\u5178\u505a\u6cd5","text":"<p>\u89e3\u51b3\u4f5c\u7528\u57df\u4e0d\u53d7\u9650\u5e26\u6765\u7684\u547d\u540d\u51b2\u7a81\u95ee\u9898\u7684\u4e00\u4e2a\u7b80\u5355\u65b9\u6cd5\u662f\uff0c\u7ed9\u679a\u4e3e\u53d8\u91cf\u547d\u540d\u65f6\u52a0\u524d\u7f00\uff0c\u5982\u4e0a\u9762\u4f8b\u5b50\u6539\u6210 COLOR_BLUE \u4ee5\u53ca FEELING_BLUE\u3002</p> <p>\u4e00\u822c\u8bf4\u6765\uff0c\u4e3a\u4e86\u4e00\u81f4\u6027\u6211\u4eec\u4f1a\u628a\u6240\u6709\u5e38\u91cf\u7edf\u4e00\u52a0\u4e0a\u524d\u7f00\u3002\u4f46\u662f\u8fd9\u6837\u5b9a\u4e49\u679a\u4e3e\u53d8\u91cf\u7684\u4ee3\u7801\u5c31\u663e\u5f97\u7d2f\u8d58\u3002C \u7a0b\u5e8f\u4e2d\u53ef\u80fd\u4e0d\u5f97\u4e0d\u8fd9\u6837\u505a\u3002\u4e0d\u8fc7 C++ \u7a0b\u5e8f\u5458\u6050\u6015\u90fd\u4e0d\u559c\u6b22\u8fd9\u79cd\u65b9\u6cd5\u3002\u66ff\u4ee3\u65b9\u6848\u662f\u547d\u540d\u7a7a\u95f4:</p> <pre><code>namespace Color {\nenum Type\n{\nRED=15,\nYELLOW,\nBLUE\n};\n};\n</code></pre> <p>\u8fd9\u6837\u4e4b\u540e\u5c31\u53ef\u4ee5\u7528 <code>Color::Type c = Color::RED;</code> \u6765\u5b9a\u4e49\u65b0\u7684\u679a\u4e3e\u53d8\u91cf\u4e86\u3002\u5982\u679c <code>using namespace Color</code> \u540e\uff0c\u524d\u7f00\u8fd8\u53ef\u4ee5\u7701\u53bb\uff0c\u4f7f\u5f97\u4ee3\u7801\u7b80\u5316\u3002\u4e0d\u8fc7\uff0c\u56e0\u4e3a\u547d\u540d\u7a7a\u95f4\u662f\u53ef\u4ee5\u968f\u540e\u88ab\u6269\u5145\u5185\u5bb9\u7684\uff0c\u6240\u4ee5\u5b83\u63d0\u4f9b\u7684\u4f5c\u7528\u57df\u5c01\u95ed\u6027\u4e0d\u9ad8\u3002\u5728\u5927\u9879\u76ee\u4e2d\uff0c\u8fd8\u662f\u6709\u53ef\u80fd\u4e0d\u540c\u4eba\u7ed9\u4e0d\u540c\u7684\u4e1c\u897f\u8d77\u540c\u6837\u7684\u679a\u4e3e\u7c7b\u578b\u540d\u3002</p> <p>\u66f4\u201c\u6709\u6548\u201d\u7684\u529e\u6cd5\u662f\u7528\u4e00\u4e2a\u7c7b\u6216\u7ed3\u6784\u4f53\u6765\u9650\u5b9a\u5176\u4f5c\u7528\u57df\uff0c\u4f8b\u5982\uff1a\u5b9a\u4e49\u65b0\u53d8\u91cf\u7684\u65b9\u6cd5\u548c\u4e0a\u9762\u547d\u540d\u7a7a\u95f4\u7684\u76f8\u540c\u3002\u4e0d\u8fc7\u8fd9\u6837\u5c31\u4e0d\u7528\u62c5\u5fc3\u7c7b\u5728\u522b\u5904\u88ab\u4fee\u6539\u5185\u5bb9\u3002\u8fd9\u91cc\u7528\u7ed3\u6784\u4f53\u800c\u975e\u7c7b\uff0c\u4e00\u662f\u56e0\u4e3a\u672c\u8eab\u5e0c\u671b\u8fd9\u4e9b\u5e38\u91cf\u53ef\u4ee5\u516c\u5f00\u8bbf\u95ee\uff0c\u4e8c\u662f\u56e0\u4e3a\u5b83\u53ea\u5305\u542b\u6570\u636e\u6ca1\u6709\u6210\u5458\u51fd\u6570\u3002</p> <pre><code>struct Color1\n{\nenum Type\n{\nRED=102,\nYELLOW,\nBLUE\n};\n};\n</code></pre> <p>\u5177\u4f53\u5b9e\u73b0\u89c1\uff1aclassic_practice.cpp</p>"},{"location":"basic_content/enum/#c11","title":"C++11 \u7684\u679a\u4e3e\u7c7b","text":"<p>\u4e0a\u9762\u7684\u505a\u6cd5\u89e3\u51b3\u4e86\u7b2c\u4e00\u4e2a\u95ee\u9898\uff0c\u4f46\u5bf9\u4e8e\u540e\u4e24\u4e2a\u4ecd\u65e0\u80fd\u4e3a\u529b\u3002\u5e86\u5e78\u7684\u662f\uff0cC++11 \u6807\u51c6\u4e2d\u5f15\u5165\u4e86\u201c\u679a\u4e3e\u7c7b\u201d(enum class)\uff0c\u53ef\u4ee5\u8f83\u597d\u5730\u89e3\u51b3\u4e0a\u8ff0\u95ee\u9898\u3002</p> <ul> <li>\u65b0\u7684enum\u7684\u4f5c\u7528\u57df\u4e0d\u5728\u662f\u5168\u5c40\u7684</li> <li>\u4e0d\u80fd\u9690\u5f0f\u8f6c\u6362\u6210\u5176\u4ed6\u7c7b\u578b</li> </ul> <pre><code>/**\n * @brief C++11\u7684\u679a\u4e3e\u7c7b\n * \u4e0b\u9762\u7b49\u4ef7\u4e8eenum class Color2:int\n */\nenum class Color2\n{\nRED=2,\nYELLOW,\nBLUE\n};\nr2 c2 = Color2::RED;\ncout &lt;&lt; static_cast&lt;int&gt;(c2) &lt;&lt; endl; //\u5fc5\u987b\u8f6c\uff01\n</code></pre> <ul> <li>\u53ef\u4ee5\u6307\u5b9a\u7528\u7279\u5b9a\u7684\u7c7b\u578b\u6765\u5b58\u50a8enum</li> </ul> <pre><code>enum class Color3:char;  // \u524d\u5411\u58f0\u660e\n\n// \u5b9a\u4e49\nenum class Color3:char {\nRED='r',\nBLUE\n};\nchar c3 = static_cast&lt;char&gt;(Color3::RED);\n</code></pre> <p>\u5177\u4f53\u5b9e\u73b0\u89c1\uff1aclassic_practice.cpp</p>"},{"location":"basic_content/enum/#_3","title":"\u7c7b\u4e2d\u7684\u679a\u4e3e\u7c7b\u578b","text":"<p>\u6709\u65f6\u6211\u4eec\u5e0c\u671b\u67d0\u4e9b\u5e38\u91cf\u53ea\u5728\u7c7b\u4e2d\u6709\u6548\u3002 \u7531\u4e8e#define \u5b9a\u4e49\u7684\u5b8f\u5e38\u91cf\u662f\u5168\u5c40\u7684\uff0c\u4e0d\u80fd\u8fbe\u5230\u76ee\u7684\uff0c\u4e8e\u662f\u60f3\u5230\u5b9e\u7528const \u4fee\u9970\u6570\u636e\u6210\u5458\u6765\u5b9e\u73b0\u3002\u800cconst \u6570\u636e\u6210\u5458\u7684\u786e\u662f\u5b58\u5728\u7684\uff0c\u4f46\u5176\u542b\u4e49\u5374\u4e0d\u662f\u6211\u4eec\u6240\u671f\u671b\u7684\u3002</p> <p>const \u6570\u636e\u6210\u5458\u53ea\u5728\u67d0\u4e2a\u5bf9\u8c61\u751f\u5b58\u671f\u5185\u662f\u5e38\u91cf\uff0c\u800c\u5bf9\u4e8e\u6574\u4e2a\u7c7b\u800c\u8a00\u5374\u662f\u53ef\u53d8\u7684\uff0c\u56e0\u4e3a\u7c7b\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u5bf9\u8c61\uff0c\u4e0d\u540c\u7684\u5bf9\u8c61\u5176 const \u6570\u636e\u6210\u5458\u7684\u503c\u53ef\u4ee5\u4e0d\u540c\u3002 </p> <p>\u4e0d\u80fd\u5728\u7c7b\u58f0\u660e\u4e2d\u521d\u59cb\u5316 const \u6570\u636e\u6210\u5458\u3002\u4ee5\u4e0b\u7528\u6cd5\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u7c7b\u7684\u5bf9\u8c61\u672a\u88ab\u521b\u5efa\u65f6\uff0c\u7f16\u8bd1\u5668\u4e0d\u77e5\u9053 SIZE \u7684\u503c\u662f\u4ec0\u4e48\u3002(c++11\u6807\u51c6\u524d)</p> <pre><code>class A {\nconst int SIZE = 100;   // \u9519\u8bef\uff0c\u4f01\u56fe\u5728\u7c7b\u58f0\u660e\u4e2d\u521d\u59cb\u5316 const \u6570\u636e\u6210\u5458 \nint array[SIZE];  // \u9519\u8bef\uff0c\u672a\u77e5\u7684 SIZE \n}; </code></pre> <p>\u6b63\u786e\u5e94\u8be5\u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u4e2d\u8fdb\u884c\uff1a</p> <pre><code>class A {\nA(int size);  // \u6784\u9020\u51fd\u6570 \nconst int SIZE ;    }; A::A(int size) : SIZE(size)  // \u6784\u9020\u51fd\u6570\u7684\u5b9a\u4e49\n{ } A  a(100); // \u5bf9\u8c61 a \u7684 SIZE \u503c\u4e3a 100 \nA  b(200); // \u5bf9\u8c61 b \u7684 SIZE \u503c\u4e3a 200 \n</code></pre> <p>\u600e\u6837\u624d\u80fd\u5efa\u7acb\u5728\u6574\u4e2a\u7c7b\u4e2d\u90fd\u6052\u5b9a\u7684\u5e38\u91cf\u5462\uff1f</p> <p>\u522b\u6307\u671b const \u6570\u636e\u6210\u5458\u4e86\uff0c\u5e94\u8be5\u7528\u7c7b\u4e2d\u7684\u679a\u4e3e\u5e38\u91cf\u6765\u5b9e\u73b0\u3002\u4f8b\u5982:</p> <pre><code>class Person{\npublic:\ntypedef enum {\nBOY = 0,\nGIRL\n}SexType;\n};\n//\u8bbf\u95ee\u7684\u65f6\u5019\u901a\u8fc7\uff0cPerson::BOY\u6216\u8005Person::GIRL\u6765\u8fdb\u884c\u8bbf\u95ee\u3002\n</code></pre> <p>\u679a\u4e3e\u5e38\u91cf\u4e0d\u4f1a\u5360\u7528\u5bf9\u8c61\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u5b83\u4eec\u5728\u7f16\u8bd1\u65f6\u88ab\u5168\u90e8\u6c42\u503c\u3002</p> <p>\u679a\u4e3e\u5e38\u91cf\u7684\u7f3a\u70b9\u662f\uff1a\u5b83\u7684\u9690\u542b\u6570\u636e\u7c7b\u578b\u662f\u6574\u6570\uff0c\u5176\u6700\u5927\u503c\u6709\u9650\uff0c\u4e14\u4e0d\u80fd\u8868\u793a\u6d6e\u70b9\u3002</p>"},{"location":"basic_content/explicit/","title":"explicit(\u663e\u5f0f)\u5173\u952e\u5b57\u90a3\u4e9b\u4e8b","text":"<ul> <li>explicit \u4fee\u9970\u6784\u9020\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u9632\u6b62\u9690\u5f0f\u8f6c\u6362\u548c\u590d\u5236\u521d\u59cb\u5316</li> <li>explicit \u4fee\u9970\u8f6c\u6362\u51fd\u6570\u65f6\uff0c\u53ef\u4ee5\u9632\u6b62\u9690\u5f0f\u8f6c\u6362\uff0c\u4f46\u6309\u8bed\u5883\u8f6c\u6362\u9664\u5916</li> </ul> <p>\u4ee3\u7801\u53c2\u89c1:.explicit.cpp</p> <p>\u53c2\u8003\u94fe\u63a5\uff1a</p> <p>https://stackoverflow.com/questions/4600295/what-is-the-meaning-of-operator-bool-const</p>"},{"location":"basic_content/extern/","title":"extern \"C\"\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/extern/#1cc","title":"1.C++\u4e0eC\u7f16\u8bd1\u533a\u522b","text":"<p>\u5728C++\u4e2d\u5e38\u5728\u5934\u6587\u4ef6\u89c1\u5230extern \"C\"\u4fee\u9970\u51fd\u6570\uff0c\u90a3\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f \u662f\u7528\u4e8eC++\u94fe\u63a5\u5728C\u8bed\u8a00\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3002</p> <p>C++\u867d\u7136\u517c\u5bb9C\uff0c\u4f46C++\u6587\u4ef6\u4e2d\u51fd\u6570\u7f16\u8bd1\u540e\u751f\u6210\u7684\u7b26\u53f7\u4e0eC\u8bed\u8a00\u751f\u6210\u7684\u4e0d\u540c\u3002\u56e0\u4e3aC++\u652f\u6301\u51fd\u6570\u91cd\u8f7d\uff0cC++\u51fd\u6570\u7f16\u8bd1\u540e\u751f\u6210\u7684\u7b26\u53f7\u5e26\u6709\u51fd\u6570\u53c2\u6570\u7c7b\u578b\u7684\u4fe1\u606f\uff0c\u800cC\u5219\u6ca1\u6709\u3002</p> <p>\u4f8b\u5982<code>int add(int a, int b)</code>\u51fd\u6570\u7ecf\u8fc7C++\u7f16\u8bd1\u5668\u751f\u6210.o\u6587\u4ef6\u540e\uff0c<code>add</code>\u4f1a\u53d8\u6210\u5f62\u5982<code>add_int_int</code>\u4e4b\u7c7b\u7684, \u800cC\u7684\u8bdd\u5219\u4f1a\u662f\u5f62\u5982<code>_add</code>, \u5c31\u662f\u8bf4\uff1a\u76f8\u540c\u7684\u51fd\u6570\uff0c\u5728C\u548cC++\u4e2d\uff0c\u7f16\u8bd1\u540e\u751f\u6210\u7684\u7b26\u53f7\u4e0d\u540c\u3002</p> <p>\u8fd9\u5c31\u5bfc\u81f4\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679cC++\u4e2d\u4f7f\u7528C\u8bed\u8a00\u5b9e\u73b0\u7684\u51fd\u6570\uff0c\u5728\u7f16\u8bd1\u94fe\u63a5\u7684\u65f6\u5019\uff0c\u4f1a\u51fa\u9519\uff0c\u63d0\u793a\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u7b26\u53f7\u3002\u6b64\u65f6<code>extern \"C\"</code>\u5c31\u8d77\u4f5c\u7528\u4e86\uff1a\u544a\u8bc9\u94fe\u63a5\u5668\u53bb\u5bfb\u627e<code>_add</code>\u8fd9\u7c7b\u7684C\u8bed\u8a00\u7b26\u53f7\uff0c\u800c\u4e0d\u662f\u7ecf\u8fc7C++\u4fee\u9970\u7684\u7b26\u53f7\u3002</p>"},{"location":"basic_content/extern/#2cc","title":"2.C++\u8c03\u7528C\u51fd\u6570","text":"<p>C++\u8c03\u7528C\u51fd\u6570\u7684\u4f8b\u5b50: \u5f15\u7528C\u7684\u5934\u6587\u4ef6\u65f6\uff0c\u9700\u8981\u52a0<code>extern \"C\"</code></p> <pre><code>//add.h\n#ifndef ADD_H\n#define ADD_H\nint add(int x,int y);\n#endif\n\n//add.c\n#include \"add.h\"\n\nint add(int x,int y) {\nreturn x+y;\n}\n\n//add.cpp\n#include &lt;iostream&gt;\n#include \"add.h\"\nusing namespace std;\nint main() {\nadd(2,3);\nreturn 0;\n}\n</code></pre> <p>\u7f16\u8bd1\uff1a</p> <pre><code>//Generate add.o file\ngcc -c add.c\n</code></pre> <p>\u94fe\u63a5\uff1a</p> <pre><code>g++ add.cpp add.o -o main\n</code></pre> <p>\u6ca1\u6709\u6dfb\u52a0extern \"C\" \u62a5\u9519\uff1a</p> <pre><code>&gt; g++ add.cpp add.o -o main                                   add.o\uff1a\u5728\u51fd\u6570\u2018main\u2019\u4e2d\uff1a\nadd.cpp:(.text+0x0): `main'\u88ab\u591a\u6b21\u5b9a\u4e49\n/tmp/ccH65yQF.o:add.cpp:(.text+0x0)\uff1a\u7b2c\u4e00\u6b21\u5728\u6b64\u5b9a\u4e49\n/tmp/ccH65yQF.o\uff1a\u5728\u51fd\u6570\u2018main\u2019\u4e2d\uff1a\nadd.cpp:(.text+0xf)\uff1a\u5bf9\u2018add(int, int)\u2019\u672a\u5b9a\u4e49\u7684\u5f15\u7528\nadd.o\uff1a\u5728\u51fd\u6570\u2018main\u2019\u4e2d\uff1a\nadd.cpp:(.text+0xf)\uff1a\u5bf9\u2018add(int, int)\u2019\u672a\u5b9a\u4e49\u7684\u5f15\u7528\ncollect2: error: ld returned 1 exit status\n</code></pre> <p>\u6dfb\u52a0extern \"C\"\u540e\uff1a</p> <p><code>add.cpp</code></p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nextern \"C\" {\n#include \"add.h\"\n}\nint main() {\nadd(2,3);\nreturn 0;\n}\n</code></pre> <p>\u7f16\u8bd1\u7684\u65f6\u5019\u4e00\u5b9a\u8981\u6ce8\u610f\uff0c\u5148\u901a\u8fc7gcc\u751f\u6210\u4e2d\u95f4\u6587\u4ef6add.o\u3002</p> <pre><code>gcc -c add.c \n</code></pre> <p>\u7136\u540e\u7f16\u8bd1\uff1a</p> <pre><code>g++ add.cpp add.o -o main\n</code></pre> <p>\u4e0a\u8ff0\u6848\u4f8b\u6e90\u4ee3\u7801\u89c1\uff1a</p> <ul> <li> <p>add.h</p> </li> <li> <p>add.c</p> </li> <li> <p>add.cpp</p> </li> </ul>"},{"location":"basic_content/extern/#2cc_1","title":"2.C\u4e2d\u8c03\u7528C++\u51fd\u6570","text":"<p><code>extern \"C\"</code>\u5728C\u4e2d\u662f\u8bed\u6cd5\u9519\u8bef\uff0c\u9700\u8981\u653e\u5728C++\u5934\u6587\u4ef6\u4e2d\u3002</p> <pre><code>// add.h\n#ifndef ADD_H\n#define ADD_H\nextern \"C\" {\nint add(int x,int y);\n}\n#endif\n\n// add.cpp\n#include \"add.h\"\n\nint add(int x,int y) {\nreturn x+y;\n}\n\n// add.c\nextern int add(int x,int y);\nint main() {\nadd(2,3);\nreturn 0;\n}\n</code></pre> <p>\u7f16\u8bd1\uff1a</p> <pre><code>g++ -c add.cpp\n</code></pre> <p>\u94fe\u63a5\uff1a</p> <pre><code>gcc add.c add.o -o main\n</code></pre> <p>\u4e0a\u8ff0\u6848\u4f8b\u6e90\u4ee3\u7801\u89c1\uff1a</p> <ul> <li> <p>add.h</p> </li> <li> <p>add.c</p> </li> <li> <p>add.cpp</p> </li> </ul> <p>\u7efc\u4e0a\uff0c\u603b\u7ed3\u51fa\u4f7f\u7528\u65b9\u6cd5\uff0c\u5728C\u8bed\u8a00\u7684\u5934\u6587\u4ef6\u4e2d\uff0c\u5bf9\u5176\u5916\u90e8\u51fd\u6570\u53ea\u80fd\u6307\u5b9a\u4e3aextern\u7c7b\u578b\uff0cC\u8bed\u8a00\u4e2d\u4e0d\u652f\u6301extern \"C\"\u58f0\u660e\uff0c\u5728.c\u6587\u4ef6\u4e2d\u5305\u542b\u4e86extern \"C\"\u65f6\u4f1a\u51fa\u73b0\u7f16\u8bd1\u8bed\u6cd5\u9519\u8bef\u3002\u6240\u4ee5\u4f7f\u7528extern \"C\"\u5168\u90e8\u90fd\u653e\u5728\u4e8ecpp\u7a0b\u5e8f\u76f8\u5173\u6587\u4ef6\u6216\u5176\u5934\u6587\u4ef6\u4e2d\u3002</p> <p>\u603b\u7ed3\u51fa\u5982\u4e0b\u5f62\u5f0f\uff1a</p> <p>\uff081\uff09C++\u8c03\u7528C\u51fd\u6570\uff1a</p> <pre><code>//xx.h\nextern int add(...)\n\n//xx.c\nint add(){\n\n}\n\n//xx.cpp\nextern \"C\" {\n#include \"xx.h\"\n}\n</code></pre> <p>\uff082\uff09C\u8c03\u7528C++\u51fd\u6570</p> <pre><code>//xx.h\nextern \"C\"{\nint add();\n}\n//xx.cpp\nint add(){\n\n}\n//xx.c\nextern int add();\n</code></pre>"},{"location":"basic_content/friend/","title":"friend\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/friend/#0","title":"0.\u6982\u8ff0","text":"<p>\u53cb\u5143\u63d0\u4f9b\u4e86\u4e00\u79cd \u666e\u901a\u51fd\u6570\u6216\u8005\u7c7b\u6210\u5458\u51fd\u6570 \u8bbf\u95ee\u53e6\u4e00\u4e2a\u7c7b\u4e2d\u7684\u79c1\u6709\u6216\u4fdd\u62a4\u6210\u5458 \u7684\u673a\u5236\u3002\u4e5f\u5c31\u662f\u8bf4\u6709\u4e24\u79cd\u5f62\u5f0f\u7684\u53cb\u5143\uff1a</p> <p>\uff081\uff09\u53cb\u5143\u51fd\u6570\uff1a\u666e\u901a\u51fd\u6570\u5bf9\u4e00\u4e2a\u8bbf\u95ee\u67d0\u4e2a\u7c7b\u4e2d\u7684\u79c1\u6709\u6216\u4fdd\u62a4\u6210\u5458\u3002</p> <p>\uff082\uff09\u53cb\u5143\u7c7b\uff1a\u7c7bA\u4e2d\u7684\u6210\u5458\u51fd\u6570\u8bbf\u95ee\u7c7bB\u4e2d\u7684\u79c1\u6709\u6216\u4fdd\u62a4\u6210\u5458</p> <p>\u4f18\u70b9\uff1a\u63d0\u9ad8\u4e86\u7a0b\u5e8f\u7684\u8fd0\u884c\u6548\u7387\u3002</p> <p>\u7f3a\u70b9\uff1a\u7834\u574f\u4e86\u7c7b\u7684\u5c01\u88c5\u6027\u548c\u6570\u636e\u7684\u900f\u660e\u6027\u3002</p> <p>\u603b\u7ed3\uff1a - \u80fd\u8bbf\u95ee\u79c1\u6709\u6210\u5458 - \u7834\u574f\u5c01\u88c5\u6027 - \u53cb\u5143\u5173\u7cfb\u4e0d\u53ef\u4f20\u9012 - \u53cb\u5143\u5173\u7cfb\u7684\u5355\u5411\u6027 - \u53cb\u5143\u58f0\u660e\u7684\u5f62\u5f0f\u53ca\u6570\u91cf\u4e0d\u53d7\u9650\u5236</p>"},{"location":"basic_content/friend/#1","title":"1.\u53cb\u5143\u51fd\u6570","text":"<p>\u5728\u7c7b\u58f0\u660e\u7684\u4efb\u4f55\u533a\u57df\u4e2d\u58f0\u660e\uff0c\u800c\u5b9a\u4e49\u5219\u5728\u7c7b\u7684\u5916\u90e8\u3002</p> <pre><code>friend &lt;\u7c7b\u578b&gt;&lt;\u53cb\u5143\u51fd\u6570\u540d&gt;(&lt;\u53c2\u6570\u8868&gt;);\n</code></pre> <p>\u6ce8\u610f\uff0c\u53cb\u5143\u51fd\u6570\u53ea\u662f\u4e00\u4e2a\u666e\u901a\u51fd\u6570\uff0c\u5e76\u4e0d\u662f\u8be5\u7c7b\u7684\u7c7b\u6210\u5458\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u8c03\u7528\uff0c\u53cb\u5143\u51fd\u6570\u4e2d\u901a\u8fc7\u5bf9\u8c61\u540d\u6765\u8bbf\u95ee\u8be5\u7c7b\u7684\u79c1\u6709\u6216\u4fdd\u62a4\u6210\u5458\u3002</p> <p>\u5177\u4f53\u4ee3\u7801\u89c1\uff1afriend_func.cpp</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass A\n{\npublic:\nA(int _a):a(_a){};\nfriend int geta(A &amp;ca);  ///&lt; \u53cb\u5143\u51fd\u6570\nprivate:\nint a;\n};\n\nint geta(A &amp;ca) {\nreturn ca.a;\n}\n\nint main()\n{\nA a(3);    cout&lt;&lt;geta(a)&lt;&lt;endl;\n\nreturn 0;\n}\n</code></pre>"},{"location":"basic_content/friend/#2","title":"2.\u53cb\u5143\u7c7b","text":"<p>\u53cb\u5143\u7c7b\u7684\u58f0\u660e\u5728\u8be5\u7c7b\u7684\u58f0\u660e\u4e2d\uff0c\u800c\u5b9e\u73b0\u5728\u8be5\u7c7b\u5916\u3002</p> <pre><code>friend class &lt;\u53cb\u5143\u7c7b\u540d&gt;;\n</code></pre> <p>\u7c7bB\u662f\u7c7bA\u7684\u53cb\u5143\uff0c\u90a3\u4e48\u7c7bB\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95eeA\u7684\u79c1\u6709\u6210\u5458\u3002</p> <p>\u5177\u4f53\u4ee3\u7801\u89c1\uff1afriend_class.cpp</p> <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nclass A\n{\npublic:\nA(int _a):a(_a){};\nfriend class B;\nprivate:\nint a;\n};\n\nclass B\n{\npublic:\nint getb(A ca) {\nreturn  ca.a; };\n};\n\nint main() {\nA a(3);\nB b;\ncout&lt;&lt;b.getb(a)&lt;&lt;endl;\nreturn 0;\n}\n</code></pre>"},{"location":"basic_content/friend/#3","title":"3.\u6ce8\u610f","text":"<ul> <li> <p>\u53cb\u5143\u5173\u7cfb\u6ca1\u6709\u7ee7\u627f\u6027 \u5047\u5982\u7c7bB\u662f\u7c7bA\u7684\u53cb\u5143\uff0c\u7c7bC\u7ee7\u627f\u4e8e\u7c7bA\uff0c\u90a3\u4e48\u53cb\u5143\u7c7bB\u662f\u6ca1\u529e\u6cd5\u76f4\u63a5\u8bbf\u95ee\u7c7bC\u7684\u79c1\u6709\u6216\u4fdd\u62a4\u6210\u5458\u3002</p> </li> <li> <p>\u53cb\u5143\u5173\u7cfb\u6ca1\u6709\u4f20\u9012\u6027 \u5047\u5982\u7c7bB\u662f\u7c7bA\u7684\u53cb\u5143\uff0c\u7c7bC\u662f\u7c7bB\u7684\u53cb\u5143\uff0c\u90a3\u4e48\u53cb\u5143\u7c7bC\u662f\u6ca1\u529e\u6cd5\u76f4\u63a5\u8bbf\u95ee\u7c7bA\u7684\u79c1\u6709\u6216\u4fdd\u62a4\u6210\u5458\uff0c\u4e5f\u5c31\u662f\u4e0d\u5b58\u5728\u201c\u53cb\u5143\u7684\u53cb\u5143\u201d\u8fd9\u79cd\u5173\u7cfb\u3002</p> </li> </ul>"},{"location":"basic_content/inline/","title":"inline\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/inline/#1","title":"1.\u7c7b\u4e2d\u5185\u8054","text":"<p>\u5934\u6587\u4ef6\u4e2d\u58f0\u660e\u65b9\u6cd5</p> <pre><code>class A\n{\npublic:\nvoid f1(int x); /**\n     * @brief \u7c7b\u4e2d\u5b9a\u4e49\u4e86\u7684\u51fd\u6570\u662f\u9690\u5f0f\u5185\u8054\u51fd\u6570,\u58f0\u660e\u8981\u60f3\u6210\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5fc5\u987b\u5728\u5b9e\u73b0\u5904(\u5b9a\u4e49\u5904)\u52a0inline\u5173\u952e\u5b57\u3002\n     *\n     * @param x\n     * @param y\n     */\nvoid Foo(int x,int y) ///&lt; \u5b9a\u4e49\u5373\u9690\u5f0f\u5185\u8054\u51fd\u6570\uff01\n{\n\n};\nvoid f1(int x); ///&lt; \u58f0\u660e\u540e\uff0c\u8981\u60f3\u6210\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5fc5\u987b\u5728\u5b9a\u4e49\u5904\u52a0inline\u5173\u952e\u5b57\u3002  \n};\n</code></pre> <p>\u5b9e\u73b0\u6587\u4ef6\u4e2d\u5b9a\u4e49\u5185\u8054\u51fd\u6570\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include \"inline.h\"\n\nusing namespace std;\n\n/**\n * @brief inline\u8981\u8d77\u4f5c\u7528,inline\u8981\u4e0e\u51fd\u6570\u5b9a\u4e49\u653e\u5728\u4e00\u8d77,inline\u662f\u4e00\u79cd\u201c\u7528\u4e8e\u5b9e\u73b0\u7684\u5173\u952e\u5b57,\u800c\u4e0d\u662f\u7528\u4e8e\u58f0\u660e\u7684\u5173\u952e\u5b57\u201d\n *\n * @param x\n * @param y\n *\n * @return \n */\nint Foo(int x,int y);  // \u51fd\u6570\u58f0\u660e\ninline int Foo(int x,int y) // \u51fd\u6570\u5b9a\u4e49\n{\nreturn x+y;\n}\n\n// \u5b9a\u4e49\u5904\u52a0inline\u5173\u952e\u5b57\uff0c\u63a8\u8350\u8fd9\u79cd\u5199\u6cd5\uff01\ninline void A::f1(int x){\n\n}\n\nint main()\n{\n\n\ncout&lt;&lt;Foo(1,2)&lt;&lt;endl;\n\n}\n/**\n * \u7f16\u8bd1\u5668\u5bf9 inline \u51fd\u6570\u7684\u5904\u7406\u6b65\u9aa4\n * \u5c06 inline \u51fd\u6570\u4f53\u590d\u5236\u5230 inline \u51fd\u6570\u8c03\u7528\u70b9\u5904\uff1b\n * \u4e3a\u6240\u7528 inline \u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff1b\n * \u5c06 inline \u51fd\u6570\u7684\u7684\u8f93\u5165\u53c2\u6570\u548c\u8fd4\u56de\u503c\u6620\u5c04\u5230\u8c03\u7528\u65b9\u6cd5\u7684\u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4\u4e2d\uff1b\n * \u5982\u679c inline \u51fd\u6570\u6709\u591a\u4e2a\u8fd4\u56de\u70b9\uff0c\u5c06\u5176\u8f6c\u53d8\u4e3a inline \u51fd\u6570\u4ee3\u7801\u5757\u672b\u5c3e\u7684\u5206\u652f\uff08\u4f7f\u7528 GOTO\uff09\u3002\n */\n</code></pre> <p>\u5185\u8054\u80fd\u63d0\u9ad8\u51fd\u6570\u6548\u7387\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u7684\u51fd\u6570\u90fd\u5b9a\u4e49\u6210\u5185\u8054\u51fd\u6570\uff01\u5185\u8054\u662f\u4ee5\u4ee3\u7801\u81a8\u80c0(\u590d\u5236)\u4e3a\u4ee3\u4ef7\uff0c\u4ec5\u4ec5\u7701\u53bb\u4e86\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\uff0c\u4ece\u800c\u63d0\u9ad8\u51fd\u6570\u7684\u6267\u884c\u6548\u7387\u3002</p> <ul> <li> <p>\u5982\u679c\u6267\u884c\u51fd\u6570\u4f53\u5185\u4ee3\u7801\u7684\u65f6\u95f4\u76f8\u6bd4\u4e8e\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\u8f83\u5927\uff0c\u90a3\u4e48\u6548\u7387\u7684\u6536\u8d27\u4f1a\u66f4\u5c11\uff01</p> </li> <li> <p>\u53e6\u4e00\u65b9\u9762\uff0c\u6bcf\u4e00\u5904\u5185\u8054\u51fd\u6570\u7684\u8c03\u7528\u90fd\u8981\u590d\u5236\u4ee3\u7801\uff0c\u5c06\u4f7f\u7a0b\u5e8f\u7684\u603b\u4ee3\u7801\u91cf\u589e\u5927\uff0c\u6d88\u8017\u66f4\u591a\u7684\u5185\u5b58\u7a7a\u95f4\u3002</p> </li> </ul> <p>\u4ee5\u4e0b\u60c5\u51b5\u4e0d\u5b9c\u7528\u5185\u8054\uff1a</p> <p>\uff081\uff09\u5982\u679c\u51fd\u6570\u4f53\u5185\u7684\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u4f7f\u5f97\u5185\u8054\u5c06\u5bfc\u81f4\u5185\u5b58\u6d88\u8017\u4ee3\u4ef7\u6bd4\u8f83\u9ad8\u3002</p> <p>\uff082\uff09\u5982\u679c\u51fd\u6570\u4f53\u5185\u51fa\u73b0\u5faa\u73af\uff0c\u90a3\u4e48\u6267\u884c\u51fd\u6570\u4f53\u5185\u4ee3\u7801\u7684\u65f6\u95f4\u8981\u6bd4\u51fd\u6570\u8c03\u7528\u7684\u5f00\u9500\u5927\u3002</p>"},{"location":"basic_content/inline/#2virtualinline","title":"2.\u865a\u51fd\u6570\uff08virtual\uff09\u53ef\u4ee5\u662f\u5185\u8054\u51fd\u6570\uff08inline\uff09\u5417\uff1f","text":"<ul> <li>\u865a\u51fd\u6570\u53ef\u4ee5\u662f\u5185\u8054\u51fd\u6570\uff0c\u5185\u8054\u662f\u53ef\u4ee5\u4fee\u9970\u865a\u51fd\u6570\u7684\uff0c\u4f46\u662f\u5f53\u865a\u51fd\u6570\u8868\u73b0\u591a\u6001\u6027\u7684\u65f6\u5019\u4e0d\u80fd\u5185\u8054\u3002</li> <li>\u5185\u8054\u662f\u5728\u7f16\u8bd1\u5668\u5efa\u8bae\u7f16\u8bd1\u5668\u5185\u8054\uff0c\u800c\u865a\u51fd\u6570\u7684\u591a\u6001\u6027\u5728\u8fd0\u884c\u671f\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u77e5\u9053\u8fd0\u884c\u671f\u8c03\u7528\u54ea\u4e2a\u4ee3\u7801\uff0c\u56e0\u6b64\u865a\u51fd\u6570\u8868\u73b0\u4e3a\u591a\u6001\u6027\u65f6\uff08\u8fd0\u884c\u671f\uff09\u4e0d\u53ef\u4ee5\u5185\u8054\u3002</li> <li><code>inline virtual</code> \u552f\u4e00\u53ef\u4ee5\u5185\u8054\u7684\u65f6\u5019\u662f\uff1a\u7f16\u8bd1\u5668\u77e5\u9053\u6240\u8c03\u7528\u7684\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\uff08\u5982 <code>Base::who()</code>\uff09\uff0c\u8fd9\u53ea\u6709\u5728\u7f16\u8bd1\u5668\u5177\u6709\u5b9e\u9645\u5bf9\u8c61\u800c\u4e0d\u662f\u5bf9\u8c61\u7684\u6307\u9488\u6216\u5f15\u7528\u65f6\u624d\u4f1a\u53d1\u751f\u3002</li> </ul> <pre><code>#include &lt;iostream&gt;  using namespace std;\nclass Base\n{\npublic:\ninline virtual void who()\n{\ncout &lt;&lt; \"I am Base\\n\";\n}\nvirtual ~Base() {}\n};\nclass Derived : public Base\n{\npublic:\ninline void who()  // \u4e0d\u5199inline\u65f6\u9690\u5f0f\u5185\u8054\n{\ncout &lt;&lt; \"I am Derived\\n\";\n}\n};\n\nint main()\n{\n// \u6b64\u5904\u7684\u865a\u51fd\u6570 who()\uff0c\u662f\u901a\u8fc7\u7c7b\uff08Base\uff09\u7684\u5177\u4f53\u5bf9\u8c61\uff08b\uff09\u6765\u8c03\u7528\u7684\uff0c\u7f16\u8bd1\u671f\u95f4\u5c31\u80fd\u786e\u5b9a\u4e86\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u662f\u5185\u8054\u7684\uff0c\u4f46\u6700\u7ec8\u662f\u5426\u5185\u8054\u53d6\u51b3\u4e8e\u7f16\u8bd1\u5668\u3002 \nBase b;\nb.who();\n\n// \u6b64\u5904\u7684\u865a\u51fd\u6570\u662f\u901a\u8fc7\u6307\u9488\u8c03\u7528\u7684\uff0c\u5448\u73b0\u591a\u6001\u6027\uff0c\u9700\u8981\u5728\u8fd0\u884c\u65f6\u671f\u95f4\u624d\u80fd\u786e\u5b9a\uff0c\u6240\u4ee5\u4e0d\u80fd\u4e3a\u5185\u8054\u3002  \nBase *ptr = new Derived();\nptr-&gt;who();\n\n// \u56e0\u4e3aBase\u6709\u865a\u6790\u6784\u51fd\u6570\uff08virtual ~Base() {}\uff09\uff0c\u6240\u4ee5 delete \u65f6\uff0c\u4f1a\u5148\u8c03\u7528\u6d3e\u751f\u7c7b\uff08Derived\uff09\u6790\u6784\u51fd\u6570\uff0c\u518d\u8c03\u7528\u57fa\u7c7b\uff08Base\uff09\u6790\u6784\u51fd\u6570\uff0c\u9632\u6b62\u5185\u5b58\u6cc4\u6f0f\u3002\ndelete ptr;\nptr = nullptr;\n\nsystem(\"pause\");\nreturn 0;\n} </code></pre>"},{"location":"basic_content/macro/","title":"\u5b8f\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/macro/#1","title":"1.\u5b8f\u4e2d\u5305\u542b\u7279\u6b8a\u7b26\u53f7","text":"<p>\u5206\u4e3a\u51e0\u79cd\uff1a<code>#</code>\uff0c<code>##</code>\uff0c<code>\\</code></p>"},{"location":"basic_content/macro/#11","title":"1.1 \u5b57\u7b26\u4e32\u5316\u64cd\u4f5c\u7b26\uff08#\uff09","text":"<p>\u5728\u4e00\u4e2a\u5b8f\u4e2d\u7684\u53c2\u6570\u524d\u9762\u4f7f\u7528\u4e00\u4e2a#,\u9884\u5904\u7406\u5668\u4f1a\u628a\u8fd9\u4e2a\u53c2\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\uff0c\u6362\u8a00\u4e4b\u5c31\u662f\uff1a#\u662f\u201c\u5b57\u7b26\u4e32\u5316\u201d\u7684\u610f\u601d\uff0c\u51fa\u73b0\u5728\u5b8f\u5b9a\u4e49\u4e2d\u7684#\u662f\u628a\u8ddf\u5728\u540e\u9762\u7684\u53c2\u6570\u8f6c\u6362\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002</p> <p>\u6ce8\u610f\uff1a\u5176\u53ea\u80fd\u7528\u4e8e\u6709\u4f20\u5165\u53c2\u6570\u7684\u5b8f\u5b9a\u4e49\u4e2d\uff0c\u4e14\u5fc5\u987b\u7f6e\u4e8e\u5b8f\u5b9a\u4e49\u4f53\u4e2d\u7684\u53c2\u6570\u540d\u524d\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>#define exp(s) printf(\"test s is:%s\\n\",s)\n#define exp1(s) printf(\"test s is:%s\\n\",#s)\n#define exp2(s) #s \nint main() {\nexp(\"hello\");\nexp1(hello);\n\nstring str = exp2(   bac );\ncout&lt;&lt;str&lt;&lt;\" \"&lt;&lt;str.size()&lt;&lt;endl;\n/**\n     * \u5ffd\u7565\u4f20\u5165\u53c2\u6570\u540d\u524d\u9762\u548c\u540e\u9762\u7684\u7a7a\u683c\u3002\n     */\nstring str1 = exp2( asda  bac );\n/**\n     * \u5f53\u4f20\u5165\u53c2\u6570\u540d\u95f4\u5b58\u5728\u7a7a\u683c\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u4f1a\u81ea\u52a8\u8fde\u63a5\u5404\u4e2a\u5b50\u5b57\u7b26\u4e32\uff0c\n     * \u7528\u6bcf\u4e2a\u5b50\u5b57\u7b26\u4e32\u4e4b\u95f4\u4ee5\u4e00\u4e2a\u7a7a\u683c\u8fde\u63a5\uff0c\u5ffd\u7565\u5269\u4f59\u7a7a\u683c\u3002\n     */\ncout&lt;&lt;str1&lt;&lt;\" \"&lt;&lt;str1.size()&lt;&lt;endl;\nreturn 0;\n}\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u7ed9\u51fa\u4e86\u57fa\u672c\u7684\u4f7f\u7528\u4e0e\u7a7a\u683c\u5904\u7406\u89c4\u5219\uff0c\u7a7a\u683c\u5904\u7406\u89c4\u5219\u5982\u4e0b\uff1a</p> <ul> <li>\u5ffd\u7565\u4f20\u5165\u53c2\u6570\u540d\u524d\u9762\u548c\u540e\u9762\u7684\u7a7a\u683c\u3002</li> </ul> <pre><code>string str = exp2(   bac );\ncout&lt;&lt;str&lt;&lt;\" \"&lt;&lt;str.size()&lt;&lt;endl;\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>bac 3\n</code></pre> <ul> <li>\u5f53\u4f20\u5165\u53c2\u6570\u540d\u95f4\u5b58\u5728\u7a7a\u683c\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u4f1a\u81ea\u52a8\u8fde\u63a5\u5404\u4e2a\u5b50\u5b57\u7b26\u4e32\uff0c\u7528\u6bcf\u4e2a\u5b50\u5b57\u7b26\u4e32\u4e4b\u95f4\u4ee5\u4e00\u4e2a\u7a7a\u683c\u8fde\u63a5\uff0c\u5ffd\u7565\u5269\u4f59\u7a7a\u683c\u3002</li> </ul> <pre><code>string str1 = exp2( asda  bac );\ncout&lt;&lt;str1&lt;&lt;\" \"&lt;&lt;str1.size()&lt;&lt;endl;\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>asda bac 8\n</code></pre>"},{"location":"basic_content/macro/#12","title":"1.2 \u7b26\u53f7\u8fde\u63a5\u64cd\u4f5c\u7b26\uff08##\uff09","text":"<p>\u201c##\u201d\u662f\u4e00\u79cd\u5206\u9694\u8fde\u63a5\u65b9\u5f0f\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u5148\u5206\u9694\uff0c\u7136\u540e\u8fdb\u884c\u5f3a\u5236\u8fde\u63a5\u3002\u5c06\u5b8f\u5b9a\u4e49\u7684\u591a\u4e2a\u5f62\u53c2\u8f6c\u6362\u6210\u4e00\u4e2a\u5b9e\u9645\u53c2\u6570\u540d\u3002</p> <p>\u6ce8\u610f\u4e8b\u9879\uff1a</p> <p>\uff081\uff09\u5f53\u7528##\u8fde\u63a5\u5f62\u53c2\u65f6\uff0c##\u524d\u540e\u7684\u7a7a\u683c\u53ef\u6709\u53ef\u65e0\u3002</p> <p>\uff082\uff09\u8fde\u63a5\u540e\u7684\u5b9e\u9645\u53c2\u6570\u540d\uff0c\u5fc5\u987b\u4e3a\u5b9e\u9645\u5b58\u5728\u7684\u53c2\u6570\u540d\u6216\u662f\u7f16\u8bd1\u5668\u5df2\u77e5\u7684\u5b8f\u5b9a\u4e49\u3002</p> <p>\uff083\uff09\u5982\u679c##\u540e\u7684\u53c2\u6570\u672c\u8eab\u4e5f\u662f\u4e00\u4e2a\u5b8f\u7684\u8bdd\uff0c##\u4f1a\u963b\u6b62\u8fd9\u4e2a\u5b8f\u7684\u5c55\u5f00\u3002</p> <p>\u793a\u4f8b\uff1a</p> <pre><code>#define expA(s) printf(\"\u524d\u7f00\u52a0\u4e0a\u540e\u7684\u5b57\u7b26\u4e32\u4e3a:%s\\n\",gc_##s)  //gc_s\u5fc5\u987b\u5b58\u5728\n// \u6ce8\u610f\u4e8b\u98792\n#define expB(s) printf(\"\u524d\u7f00\u52a0\u4e0a\u540e\u7684\u5b57\u7b26\u4e32\u4e3a:%s\\n\",gc_  ##  s)  //gc_s\u5fc5\u987b\u5b58\u5728\n// \u6ce8\u610f\u4e8b\u98791\n#define gc_hello1 \"I am gc_hello1\"\nint main() {\n// \u6ce8\u610f\u4e8b\u98791\nconst char * gc_hello = \"I am gc_hello\";\nexpA(hello);\nexpB(hello1);\n}\n</code></pre>"},{"location":"basic_content/macro/#13","title":"1.3 \u7eed\u884c\u64cd\u4f5c\u7b26\uff08\\\uff09","text":"<p>\u5f53\u5b9a\u4e49\u7684\u5b8f\u4e0d\u80fd\u7528\u4e00\u884c\u8868\u8fbe\u5b8c\u6574\u65f6\uff0c\u53ef\u4ee5\u7528\u201d\\\u201d\u8868\u793a\u4e0b\u4e00\u884c\u7ee7\u7eed\u6b64\u5b8f\u7684\u5b9a\u4e49\u3002</p> <p>\u6ce8\u610f \\ \u524d\u7559\u7a7a\u683c\u3002</p> <pre><code>#define MAX(a,b) ((a)&gt;(b) ? (a) \\\n   :(b))  \nint main() {\nint max_val = MAX(3,6);\ncout&lt;&lt;max_val&lt;&lt;endl;\n}\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u89c1\uff1asig_examp.cpp</p>"},{"location":"basic_content/macro/#2dowhile0","title":"2.do{...}while(0)\u7684\u4f7f\u7528","text":""},{"location":"basic_content/macro/#21","title":"2.1 \u907f\u514d\u8bed\u4e49\u66f2\u89e3","text":"<p>\u4f8b\u5982\uff1a</p> <pre><code>#define fun() f1();f2();\nif(a&gt;0)\n    fun()\n</code></pre> <p>\u8fd9\u4e2a\u5b8f\u88ab\u5c55\u5f00\u540e\u5c31\u662f\uff1a</p> <pre><code>if(a&gt;0)\n    f1();\n    f2();\n</code></pre> <p>\u672c\u610f\u662fa&gt;0\u6267\u884cf1 f2\uff0c\u800c\u5b9e\u9645\u662ff2\u6bcf\u6b21\u90fd\u4f1a\u6267\u884c\uff0c\u6240\u4ee5\u5c31\u9519\u8bef\u4e86\u3002</p> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u79cd\u95ee\u9898\uff0c\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u901a\u5e38\u53ef\u4ee5\u91c7\u7528<code>{}</code>\u5757\u3002</p> <p>\u5982\uff1a</p> <pre><code>#define fun() {f1();f2();}\nif(a&gt;0)\nfun();\n// \u5b8f\u5c55\u5f00\nif(a&gt;0)\n{\nf1();\nf2();\n};\n</code></pre> <p>\u4f46\u662f\u4f1a\u53d1\u73b0\u4e0a\u8ff0\u5b8f\u5c55\u5f00\u540e\u591a\u4e86\u4e00\u4e2a\u5206\u53f7\uff0c\u5b9e\u9645\u8bed\u6cd5\u4e0d\u592a\u5bf9\u3002(\u867d\u7136\u7f16\u8bd1\u8fd0\u884c\u6ca1\u95ee\u9898\uff0c\u6b63\u5e38\u6ca1\u5206\u53f7)\u3002</p>"},{"location":"basic_content/macro/#22goto","title":"2.2\u907f\u514d\u4f7f\u7528goto\u63a7\u5236\u6d41","text":"<p>\u5728\u4e00\u4e9b\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u5728return\u8bed\u53e5\u4e4b\u524d\u505a\u4e00\u4e9b\u6e05\u7406\u5de5\u4f5c\uff0c\u6bd4\u5982\u91ca\u653e\u5728\u51fd\u6570\u5f00\u59cb\u5904\u7531malloc\u7533\u8bf7\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4f7f\u7528goto\u603b\u662f\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\uff1a</p> <pre><code>int f() {\nint *p = (int *)malloc(sizeof(int));\n*p = 10; cout&lt;&lt;*p&lt;&lt;endl;\n#ifndef DEBUG\nint error=1;\n#endif\nif(error)\ngoto END;\n// dosomething\nEND:\ncout&lt;&lt;\"free\"&lt;&lt;endl;\nfree(p);\nreturn 0;\n}\n</code></pre> <p>\u4f46\u7531\u4e8egoto\u4e0d\u7b26\u5408\u8f6f\u4ef6\u5de5\u7a0b\u7684\u7ed3\u6784\u5316\uff0c\u800c\u4e14\u6709\u53ef\u80fd\u4f7f\u5f97\u4ee3\u7801\u96be\u61c2\uff0c\u6240\u4ee5\u5f88\u591a\u4eba\u90fd\u4e0d\u5021\u5bfc\u4f7f\u7528\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528do{...}while(0)\u6765\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff1a</p> <pre><code>int ff() {\nint *p = (int *)malloc(sizeof(int));\n*p = 10; cout&lt;&lt;*p&lt;&lt;endl;\ndo{ #ifndef DEBUG\nint error=1;\n#endif\nif(error)\nbreak;\n//dosomething\n}while(0);\ncout&lt;&lt;\"free\"&lt;&lt;endl;\nfree(p);\nreturn 0;\n}\n</code></pre> <p>\u8fd9\u91cc\u5c06\u51fd\u6570\u4e3b\u4f53\u90e8\u5206\u4f7f\u7528do{...}while(0)\u5305\u542b\u8d77\u6765\uff0c\u4f7f\u7528break\u6765\u4ee3\u66ffgoto\uff0c\u540e\u7eed\u7684\u6e05\u7406\u5de5\u4f5c\u5728while\u4e4b\u540e\uff0c\u73b0\u5728\u65e2\u80fd\u8fbe\u5230\u540c\u6837\u7684\u6548\u679c\uff0c\u800c\u4e14\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3001\u53ef\u7ef4\u62a4\u6027\u90fd\u8981\u6bd4\u4e0a\u9762\u7684goto\u4ee3\u7801\u597d\u7684\u591a\u4e86\u3002</p>"},{"location":"basic_content/macro/#23","title":"2.3 \u907f\u514d\u7531\u5b8f\u5f15\u8d77\u7684\u8b66\u544a","text":"<p>\u5185\u6838\u4e2d\u7531\u4e8e\u4e0d\u540c\u67b6\u6784\u7684\u9650\u5236\uff0c\u5f88\u591a\u65f6\u5019\u4f1a\u7528\u5230\u7a7a\u5b8f\uff0c\u3002\u5728\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u8fd9\u4e9b\u7a7a\u5b8f\u4f1a\u7ed9\u51fawarning\uff0c\u4e3a\u4e86\u907f\u514d\u8fd9\u6837\u7684warning\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528do{...}while(0)\u6765\u5b9a\u4e49\u7a7a\u5b8f\uff1a</p> <pre><code>#define EMPTYMICRO do{}while(0)\n</code></pre>"},{"location":"basic_content/macro/#24","title":"2.4 \u5b9a\u4e49\u5355\u4e00\u7684\u51fd\u6570\u5757\u6765\u5b8c\u6210\u590d\u6742\u7684\u64cd\u4f5c","text":"<p>\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u590d\u6742\u7684\u51fd\u6570\uff0c\u53d8\u91cf\u5f88\u591a\uff0c\u800c\u4e14\u4f60\u4e0d\u60f3\u8981\u589e\u52a0\u65b0\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528do{...}while(0)\uff0c\u5c06\u4f60\u7684\u4ee3\u7801\u5199\u5728\u91cc\u9762\uff0c\u91cc\u9762\u53ef\u4ee5\u5b9a\u4e49\u53d8\u91cf\u800c\u4e0d\u7528\u8003\u8651\u53d8\u91cf\u540d\u4f1a\u540c\u51fd\u6570\u4e4b\u524d\u6216\u8005\u4e4b\u540e\u7684\u91cd\u590d\u3002 \u8fd9\u79cd\u60c5\u51b5\u5e94\u8be5\u662f\u6307\u4e00\u4e2a\u53d8\u91cf\u591a\u5904\u4f7f\u7528\uff08\u4f46\u6bcf\u5904\u7684\u610f\u4e49\u8fd8\u4e0d\u540c\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6bcf\u4e2ado-while\u4e2d\u7f29\u5c0f\u4f5c\u7528\u57df\uff0c\u6bd4\u5982\uff1a</p> <pre><code>int fc()\n{\nint k1 = 10;\ncout&lt;&lt;k1&lt;&lt;endl;\ndo{\nint k1 = 100;\ncout&lt;&lt;k1&lt;&lt;endl;\n}while(0);\ncout&lt;&lt;k1&lt;&lt;endl;\n}\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u89c1\uff1ado_while.cpp</p> <p>\u5b66\u4e60\u6587\u7ae0\uff1ahttps://www.cnblogs.com/lizhenghn/p/3674430.html</p>"},{"location":"basic_content/maohao/","title":":: \u90a3\u4e9b\u4e8b","text":"<ul> <li>\u5168\u5c40\u4f5c\u7528\u57df\u7b26\uff08::name\uff09\uff1a\u7528\u4e8e\u7c7b\u578b\u540d\u79f0\uff08\u7c7b\u3001\u7c7b\u6210\u5458\u3001\u6210\u5458\u51fd\u6570\u3001\u53d8\u91cf\u7b49\uff09\u524d\uff0c\u8868\u793a\u4f5c\u7528\u57df\u4e3a\u5168\u5c40\u547d\u540d\u7a7a\u95f4</li> <li>\u7c7b\u4f5c\u7528\u57df\u7b26\uff08class::name\uff09\uff1a\u7528\u4e8e\u8868\u793a\u6307\u5b9a\u7c7b\u578b\u7684\u4f5c\u7528\u57df\u8303\u56f4\u662f\u5177\u4f53\u67d0\u4e2a\u7c7b\u7684</li> <li>\u547d\u540d\u7a7a\u95f4\u4f5c\u7528\u57df\u7b26\uff08namespace::name\uff09:\u7528\u4e8e\u8868\u793a\u6307\u5b9a\u7c7b\u578b\u7684\u4f5c\u7528\u57df\u8303\u56f4\u662f\u5177\u4f53\u67d0\u4e2a\u547d\u540d\u7a7a\u95f4\u7684</li> </ul> <p>\u5177\u4f53\u4ee3\u7801\u89c1\uff1a::.cpp</p>"},{"location":"basic_content/pointer_refer/","title":"\u5f15\u7528\u4e0e\u6307\u9488\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/pointer_refer/#1","title":"1.\u5f15\u7528\u4e0e\u6307\u9488","text":"<p>\u603b\u8bba\uff1a</p> \u5f15\u7528 \u6307\u9488 \u5fc5\u987b\u521d\u59cb\u5316 \u53ef\u4ee5\u4e0d\u521d\u59cb\u5316 \u4e0d\u80fd\u4e3a\u7a7a \u53ef\u4ee5\u4e3a\u7a7a \u4e0d\u80fd\u66f4\u6362\u76ee\u6807 \u53ef\u4ee5\u66f4\u6362\u76ee\u6807 <p>\u5f15\u7528\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u800c\u6307\u9488\u53ef\u4ee5\u4e0d\u521d\u59cb\u5316\u3002</p> <p>\u6211\u4eec\u5728\u5b9a\u4e49\u4e00\u4e2a\u5f15\u7528\u7684\u65f6\u5019\u5fc5\u987b\u4e3a\u5176\u6307\u5b9a\u4e00\u4e2a\u521d\u59cb\u503c\uff0c\u4f46\u662f\u6307\u9488\u5374\u4e0d\u9700\u8981\u3002</p> <pre><code>int &amp;r;    //\u4e0d\u5408\u6cd5\uff0c\u6ca1\u6709\u521d\u59cb\u5316\u5f15\u7528\nint *p;    //\u5408\u6cd5\uff0c\u4f46p\u4e3a\u91ce\u6307\u9488\uff0c\u4f7f\u7528\u9700\u8981\u5c0f\u5fc3\n</code></pre> <p>\u5f15\u7528\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u800c\u6307\u9488\u53ef\u4ee5\u4e3a\u7a7a\u3002</p> <p>\u7531\u4e8e\u5f15\u7528\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u4f7f\u7528\u5f15\u7528\u7684\u65f6\u5019\u4e0d\u9700\u8981\u6d4b\u8bd5\u5176\u5408\u6cd5\u6027\uff0c\u800c\u5728\u4f7f\u7528\u6307\u9488\u7684\u65f6\u5019\u9700\u8981\u9996\u5148\u5224\u65ad\u6307\u9488\u662f\u5426\u4e3a\u7a7a\u6307\u9488\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5f15\u8d77\u7a0b\u5e8f\u5d29\u6e83\u3002</p> <pre><code>void test_p(int* p)\n{\nif(p != null_ptr)    //\u5bf9p\u6240\u6307\u5bf9\u8c61\u8d4b\u503c\u65f6\u9700\u5148\u5224\u65adp\u662f\u5426\u4e3a\u7a7a\u6307\u9488\n*p = 3;\nreturn;\n}\nvoid test_r(int&amp; r)\n{\nr = 3;    //\u7531\u4e8e\u5f15\u7528\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u6240\u4ee5\u6b64\u5904\u65e0\u9700\u5224\u65adr\u7684\u6709\u6548\u6027\u5c31\u53ef\u4ee5\u5bf9r\u76f4\u63a5\u8d4b\u503c\nreturn;\n}\n</code></pre> <p>\u5f15\u7528\u4e0d\u80fd\u66f4\u6362\u76ee\u6807</p> <p>\u6307\u9488\u53ef\u4ee5\u968f\u65f6\u6539\u53d8\u6307\u5411\uff0c\u4f46\u662f\u5f15\u7528\u53ea\u80fd\u6307\u5411\u521d\u59cb\u5316\u65f6\u6307\u5411\u7684\u5bf9\u8c61\uff0c\u65e0\u6cd5\u6539\u53d8\u3002</p> <pre><code>int a = 1;\nint b = 2;\n\nint &amp;r = a;    //\u521d\u59cb\u5316\u5f15\u7528r\u6307\u5411\u53d8\u91cfa\nint *p = &amp;a;   //\u521d\u59cb\u5316\u6307\u9488p\u6307\u5411\u53d8\u91cfa\n\np = &amp;b;        //\u6307\u9488p\u6307\u5411\u4e86\u53d8\u91cfb\nr = b;         //\u5f15\u7528r\u4f9d\u7136\u6307\u5411a\uff0c\u4f46a\u7684\u503c\u53d8\u6210\u4e86b\n</code></pre>"},{"location":"basic_content/pointer_refer/#2","title":"2.\u5f15\u7528","text":""},{"location":"basic_content/pointer_refer/#_2","title":"\u5de6\u503c\u5f15\u7528","text":"<p>\u5e38\u89c4\u5f15\u7528\uff0c\u4e00\u822c\u8868\u793a\u5bf9\u8c61\u7684\u8eab\u4efd\u3002</p>"},{"location":"basic_content/pointer_refer/#_3","title":"\u53f3\u503c\u5f15\u7528","text":"<p>\u53f3\u503c\u5f15\u7528\u5c31\u662f\u5fc5\u987b\u7ed1\u5b9a\u5230\u53f3\u503c\uff08\u4e00\u4e2a\u4e34\u65f6\u5bf9\u8c61\u3001\u5c06\u8981\u9500\u6bc1\u7684\u5bf9\u8c61\uff09\u7684\u5f15\u7528\uff0c\u4e00\u822c\u8868\u793a\u5bf9\u8c61\u7684\u503c\u3002</p> <p>\u53f3\u503c\u5f15\u7528\u53ef\u5b9e\u73b0\u8f6c\u79fb\u8bed\u4e49\uff08Move Sementics\uff09\u548c\u7cbe\u786e\u4f20\u9012\uff08Perfect Forwarding\uff09\uff0c\u5b83\u7684\u4e3b\u8981\u76ee\u7684\u6709\u4e24\u4e2a\u65b9\u9762\uff1a</p> <ul> <li>\u6d88\u9664\u4e24\u4e2a\u5bf9\u8c61\u4ea4\u4e92\u65f6\u4e0d\u5fc5\u8981\u7684\u5bf9\u8c61\u62f7\u8d1d\uff0c\u8282\u7701\u8fd0\u7b97\u5b58\u50a8\u8d44\u6e90\uff0c\u63d0\u9ad8\u6548\u7387\u3002</li> <li>\u80fd\u591f\u66f4\u7b80\u6d01\u660e\u786e\u5730\u5b9a\u4e49\u6cdb\u578b\u51fd\u6570\u3002</li> </ul>"},{"location":"basic_content/pointer_refer/#_4","title":"\u5f15\u7528\u6298\u53e0","text":"<ul> <li><code>X&amp; &amp;</code>\u3001<code>X&amp; &amp;&amp;</code>\u3001<code>X&amp;&amp; &amp;</code> \u53ef\u6298\u53e0\u6210 <code>X&amp;</code></li> <li><code>X&amp;&amp; &amp;&amp;</code> \u53ef\u6298\u53e0\u6210 <code>X&amp;&amp;</code></li> </ul> <p>C++\u7684\u5f15\u7528\u5728\u51cf\u5c11\u4e86\u7a0b\u5e8f\u5458\u81ea\u7531\u5ea6\u7684\u540c\u65f6\u63d0\u5347\u4e86\u5185\u5b58\u64cd\u4f5c\u7684\u5b89\u5168\u6027\u548c\u8bed\u4e49\u7684\u4f18\u7f8e\u6027\u3002\u6bd4\u5982\u5f15\u7528\u5f3a\u5236\u8981\u6c42\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u4f7f\u7528\u5f15\u7528\u7684\u65f6\u5019\u4e0d\u7528\u518d\u53bb\u5224\u65ad\u5f15\u7528\u662f\u5426\u4e3a\u7a7a\uff0c\u8ba9\u4ee3\u7801\u66f4\u52a0\u7b80\u6d01\u4f18\u7f8e\uff0c\u907f\u514d\u4e86\u6307\u9488\u6ee1\u5929\u98de\u7684\u60c5\u5f62\u3002\u9664\u4e86\u8fd9\u79cd\u573a\u666f\u4e4b\u5916\u5f15\u7528\u8fd8\u7528\u4e8e\u5982\u4e0b\u4e24\u4e2a\u573a\u666f\uff1a</p> <p>\u5f15\u7528\u578b\u53c2\u6570</p> <p>\u4e00\u822c\u6211\u4eec\u4f7f\u7528const reference\u53c2\u6570\u4f5c\u4e3a\u53ea\u8bfb\u5f62\u53c2\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u65e2\u53ef\u4ee5\u907f\u514d\u53c2\u6570\u62f7\u8d1d\u8fd8\u53ef\u4ee5\u83b7\u5f97\u4e0e\u4f20\u503c\u53c2\u6570\u4e00\u6837\u7684\u8c03\u7528\u65b9\u5f0f\u3002</p> <pre><code>void test(const vector&lt;int&gt; &amp;data)\n{\n//...\n}\nint main()\n{\nvector&lt;int&gt; data{1,2,3,4,5,6,7,8};\ntest(data);\n}\n</code></pre> <p>\u5f15\u7528\u578b\u8fd4\u56de\u503c</p> <p>C++\u63d0\u4f9b\u4e86\u91cd\u8f7d\u8fd0\u7b97\u7b26\u7684\u529f\u80fd\uff0c\u6211\u4eec\u5728\u91cd\u8f7d\u67d0\u4e9b\u64cd\u4f5c\u7b26\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u5f15\u7528\u578b\u8fd4\u56de\u503c\u53ef\u4ee5\u83b7\u5f97\u8ddf\u8be5\u64cd\u4f5c\u7b26\u539f\u6765\u8bed\u6cd5\u76f8\u540c\u7684\u8c03\u7528\u65b9\u5f0f\uff0c\u4fdd\u6301\u4e86\u64cd\u4f5c\u7b26\u8bed\u4e49\u7684\u4e00\u81f4\u6027\u3002\u4e00\u4e2a\u4f8b\u5b50\u5c31\u662foperator []\u64cd\u4f5c\u7b26\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7b26\u4e00\u822c\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\u5bf9\u8c61\uff0c\u624d\u80fd\u6b63\u786e\u7684\u88ab\u4fee\u6539\u3002</p> <pre><code>vector&lt;int&gt; v(10);\nv[5] = 10;    //[]\u64cd\u4f5c\u7b26\u8fd4\u56de\u5f15\u7528\uff0c\u7136\u540evector\u5bf9\u5e94\u5143\u7d20\u624d\u80fd\u88ab\u4fee\u6539\n//\u5982\u679c[]\u64cd\u4f5c\u7b26\u4e0d\u8fd4\u56de\u5f15\u7528\u800c\u662f\u6307\u9488\u7684\u8bdd\uff0c\u8d4b\u503c\u8bed\u53e5\u5219\u9700\u8981\u8fd9\u6837\u5199\n*v[5] = 10;   //\u8fd9\u79cd\u4e66\u5199\u65b9\u5f0f\uff0c\u5b8c\u5168\u4e0d\u7b26\u5408\u6211\u4eec\u5bf9[]\u8c03\u7528\u7684\u8ba4\u77e5\uff0c\u5bb9\u6613\u4ea7\u751f\u8bef\u89e3\n</code></pre>"},{"location":"basic_content/pointer_refer/#3","title":"3.\u6307\u9488\u4e0e\u5f15\u7528\u7684\u6027\u80fd\u5dee\u8ddd","text":"<p>\u6307\u9488\u4e0e\u5f15\u7528\u4e4b\u95f4\u6709\u6ca1\u6709\u6027\u80fd\u5dee\u8ddd\u5462\uff1f\u8fd9\u79cd\u95ee\u9898\u5c31\u9700\u8981\u8fdb\u5165\u6c47\u7f16\u5c42\u9762\u53bb\u770b\u4e00\u4e0b\u3002\u6211\u4eec\u5148\u5199\u4e00\u4e2atest1\u51fd\u6570\uff0c\u53c2\u6570\u4f20\u9012\u4f7f\u7528\u6307\u9488\uff1a</p> <pre><code>void test1(int* p)\n{\n*p = 3;    //\u6b64\u5904\u5e94\u8be5\u9996\u5148\u5224\u65adp\u662f\u5426\u4e3a\u7a7a\uff0c\u4e3a\u4e86\u6d4b\u8bd5\u7684\u9700\u8981\uff0c\u6b64\u5904\u6211\u4eec\u6ca1\u52a0\u3002\nreturn;\n}\n</code></pre> <p>\u8be5\u4ee3\u7801\u6bb5\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>(gdb) disassemble Dump of assembler code for function test1(int*):\n0x0000000000400886 &lt;+0&gt;:  push   %rbp\n0x0000000000400887 &lt;+1&gt;:  mov    %rsp,%rbp\n0x000000000040088a &lt;+4&gt;:  mov    %rdi,-0x8(%rbp)\n=&gt; 0x000000000040088e &lt;+8&gt;:  mov    -0x8(%rbp),%rax\n0x0000000000400892 &lt;+12&gt;: movl   $0x3,(%rax)\n0x0000000000400898 &lt;+18&gt;: nop\n0x0000000000400899 &lt;+19&gt;: pop    %rbp\n0x000000000040089a &lt;+20&gt;: retq   End of assembler dump.\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u78011\u30012\u884c\u662f\u53c2\u6570\u8c03\u7528\u4fdd\u5b58\u73b0\u573a\u64cd\u4f5c\uff1b\u7b2c3\u884c\u662f\u53c2\u6570\u4f20\u9012\uff0c\u51fd\u6570\u8c03\u7528\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e00\u822c\u653e\u5728rdi\u5bc4\u5b58\u5668\uff0c\u6b64\u884c\u4ee3\u7801\u628ardi\u5bc4\u5b58\u5668\u503c\uff08\u6307\u9488p\u7684\u503c\uff09\u5199\u5165\u6808\u4e2d\uff1b\u7b2c4\u884c\u662f\u628a\u6808\u4e2dp\u7684\u503c\u5199\u5165rax\u5bc4\u5b58\u5668\uff1b\u7b2c5\u884c\u662f\u628a\u7acb\u5373\u65703\u5199\u5165\u5230rax\u5bc4\u5b58\u5668\u503c\u6240\u6307\u5411\u7684\u5185\u5b58\u4e2d\uff0c\u6b64\u5904\u8981\u6ce8\u610f(%rax)\u4e24\u8fb9\u7684\u62ec\u53f7\uff0c\u8fd9\u4e2a\u62ec\u53f7\u5e76\u5e76\u4e0d\u662f\u53ef\u6709\u53ef\u65e0\u7684\uff0c(%rax)\u548c%rax\u5b8c\u5168\u662f\u4e24\u79cd\u610f\u4e49\uff0c(%rax)\u4ee3\u8868rax\u5bc4\u5b58\u5668\u4e2d\u503c\u6240\u4ee3\u8868\u5730\u5740\u90e8\u5206\u7684\u5185\u5b58\uff0c\u5373\u76f8\u5f53\u4e8eC++\u4ee3\u7801\u4e2d\u7684*p\uff0c\u800c%rax\u4ee3\u8868rax\u5bc4\u5b58\u5668\uff0c\u76f8\u5f53\u4e8eC++\u4ee3\u7801\u4e2d\u7684p\u503c\uff0c\u6240\u4ee5\u6c47\u7f16\u8fd9\u91cc\u4f7f\u7528\u4e86(%rax)\u800c\u4e0d\u662f%rax\u3002</p> <p>\u6211\u4eec\u518d\u5199\u51fa\u53c2\u6570\u4f20\u9012\u4f7f\u7528\u5f15\u7528\u7684C++\u4ee3\u7801\u6bb5test2\uff1a</p> <pre><code>void test2(int&amp; r)\n{\nr = 3;    //\u8d4b\u503c\u524d\u65e0\u9700\u5224\u65adreference\u662f\u5426\u4e3a\u7a7a\nreturn;\n}\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>(gdb) disassemble Dump of assembler code for function test2(int&amp;):\n0x000000000040089b &lt;+0&gt;:  push   %rbp\n0x000000000040089c &lt;+1&gt;:  mov    %rsp,%rbp\n0x000000000040089f &lt;+4&gt;:  mov    %rdi,-0x8(%rbp)\n=&gt; 0x00000000004008a3 &lt;+8&gt;:  mov    -0x8(%rbp),%rax\n0x00000000004008a7 &lt;+12&gt;: movl   $0x3,(%rax)\n0x00000000004008ad &lt;+18&gt;: nop\n0x00000000004008ae &lt;+19&gt;: pop    %rbp\n0x00000000004008af &lt;+20&gt;: retq   End of assembler dump.\n</code></pre> <p>\u6211\u4eec\u53d1\u73b0test2\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\u548ctest1\u5bf9\u5e94\u7684\u6c47\u7f16\u4ee3\u7801\u5b8c\u5168\u76f8\u540c\uff0c\u8fd9\u8bf4\u660eC++\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u7a0b\u5e8f\u7684\u65f6\u5019\u5c06\u6307\u9488\u548c\u5f15\u7528\u7f16\u8bd1\u6210\u4e86\u5b8c\u5168\u4e00\u6837\u7684\u673a\u5668\u7801\u3002\u6240\u4ee5C++\u4e2d\u7684\u5f15\u7528\u53ea\u662fC++\u5bf9\u6307\u9488\u64cd\u4f5c\u7684\u4e00\u4e2a\u201c\u8bed\u6cd5\u7cd6\u201d\uff0c\u5728\u5e95\u5c42\u5b9e\u73b0\u65f6C++\u7f16\u8bd1\u5668\u5b9e\u73b0\u8fd9\u4e24\u79cd\u64cd\u4f5c\u7684\u65b9\u6cd5\u5b8c\u5168\u76f8\u540c\u3002</p>"},{"location":"basic_content/pointer_refer/#3_1","title":"3.\u603b\u7ed3","text":"<p>C++\u4e2d\u5f15\u5165\u4e86\u5f15\u7528\u64cd\u4f5c\uff0c\u5728\u5bf9\u5f15\u7528\u7684\u4f7f\u7528\u52a0\u4e86\u66f4\u591a\u9650\u5236\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\uff0c\u4fdd\u8bc1\u4e86\u5f15\u7528\u4f7f\u7528\u7684\u5b89\u5168\u6027\u548c\u4fbf\u6377\u6027\uff0c\u8fd8\u53ef\u4ee5\u4fdd\u6301\u4ee3\u7801\u7684\u4f18\u96c5\u6027\u3002\u5728\u9002\u5408\u7684\u60c5\u51b5\u4f7f\u7528\u9002\u5408\u7684\u64cd\u4f5c\uff0c\u5f15\u7528\u7684\u4f7f\u7528\u53ef\u4ee5\u4e00\u5b9a\u7a0b\u5ea6\u907f\u514d\u201c\u6307\u9488\u6ee1\u5929\u98de\u201d\u7684\u60c5\u51b5\uff0c\u5bf9\u4e8e\u63d0\u5347\u7a0b\u5e8f\u7a33\u5b9a\u6027\u4e5f\u6709\u4e00\u5b9a\u7684\u79ef\u6781\u610f\u4e49\u3002\u6700\u540e\uff0c\u6307\u9488\u4e0e\u5f15\u7528\u5e95\u5c42\u5b9e\u73b0\u90fd\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u7528\u62c5\u5fc3\u4e24\u8005\u7684\u6027\u80fd\u5dee\u8ddd\u3002</p> <p>\u4e0a\u8ff0\u90e8\u5206\u53c2\u8003\u81ea\uff1ahttp://irootlee.com/juicer_pointer_reference/#</p>"},{"location":"basic_content/sizeof/","title":"\u7c7b\u5927\u5c0f\u8ba1\u7b97","text":"<p>\u9996\u5148\u6765\u4e2a\u603b\u7ed3\uff0c\u7136\u540e\u4e0b\u9762\u7ed9\u51fa\u5b9e\u9645\u4f8b\u5b50\uff0c\u5b9e\u6218\uff01</p> <ul> <li>\u7a7a\u7c7b\u7684\u5927\u5c0f\u4e3a1\u5b57\u8282</li> <li>\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u865a\u51fd\u6570\u672c\u8eab\u3001\u6210\u5458\u51fd\u6570\uff08\u5305\u62ec\u9759\u6001\u4e0e\u975e\u9759\u6001\uff09\u548c\u9759\u6001\u6570\u636e\u6210\u5458\u90fd\u662f\u4e0d\u5360\u7528\u7c7b\u5bf9\u8c61\u7684\u5b58\u50a8\u7a7a\u95f4\u3002</li> <li>\u5bf9\u4e8e\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\uff0c\u4e0d\u7ba1\u6709\u591a\u5c11\u4e2a\u865a\u51fd\u6570\uff0c\u53ea\u6709\u4e00\u4e2a\u865a\u6307\u9488,vptr\u7684\u5927\u5c0f\u3002</li> <li>\u666e\u901a\u7ee7\u627f\uff0c\u6d3e\u751f\u7c7b\u7ee7\u627f\u4e86\u6240\u6709\u57fa\u7c7b\u7684\u51fd\u6570\u4e0e\u6210\u5458\uff0c\u8981\u6309\u7167\u5b57\u8282\u5bf9\u9f50\u6765\u8ba1\u7b97\u5927\u5c0f</li> <li>\u865a\u51fd\u6570\u7ee7\u627f\uff0c\u4e0d\u7ba1\u662f\u5355\u7ee7\u627f\u8fd8\u662f\u591a\u7ee7\u627f\uff0c\u90fd\u662f\u7ee7\u627f\u4e86\u57fa\u7c7b\u7684vptr\u3002(32\u4f4d\u64cd\u4f5c\u7cfb\u7edf4\u5b57\u8282\uff0c64\u4f4d\u64cd\u4f5c\u7cfb\u7edf 8\u5b57\u8282)\uff01</li> <li>\u865a\u7ee7\u627f,\u7ee7\u627f\u57fa\u7c7b\u7684vptr\u3002</li> </ul>"},{"location":"basic_content/sizeof/#11","title":"1.\u539f\u52191","text":"<pre><code>/**\n * @file blackclass.cpp\n * @brief \u7a7a\u7c7b\u7684\u5927\u5c0f\u4e3a1\u5b57\u8282\n * @author \u5149\u57ce\n * @version v1\n * @date 2019-07-21\n */\n#include&lt;iostream&gt;\nusing namespace std;\nclass A{};\nint main()\n{\ncout&lt;&lt;sizeof(A)&lt;&lt;endl;\nreturn 0;\n}\n</code></pre>"},{"location":"basic_content/sizeof/#22","title":"2.\u539f\u52192","text":"<pre><code>/**\n * @file static.cpp\n * @brief \u9759\u6001\u6570\u636e\u6210\u5458\n * \u9759\u6001\u6570\u636e\u6210\u5458\u88ab\u7f16\u8bd1\u5668\u653e\u5728\u7a0b\u5e8f\u7684\u4e00\u4e2aglobal data members\u4e2d\uff0c\u5b83\u662f\u7c7b\u7684\u4e00\u4e2a\u6570\u636e\u6210\u5458\uff0c\u4f46\u4e0d\u5f71\u54cd\u7c7b\u7684\u5927\u5c0f\u3002\u4e0d\u7ba1\u8fd9\u4e2a\u7c7b\u4ea7\u751f\u4e86\u591a\u5c11\u4e2a\u5b9e\u4f8b\uff0c\u8fd8\u662f\u6d3e\u751f\u4e86\u591a\u5c11\u65b0\u7684\u7c7b\uff0c\u9759\u6001\u6570\u636e\u6210\u5458\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\u3002\u9759\u6001\u6570\u636e\u6210\u5458\uff0c\u4e00\u65e6\u88ab\u58f0\u660e\uff0c\u5c31\u5df2\u7ecf\u5b58\u5728\u3002 \n * @author \u5149\u57ce\n * @version v1\n * @date 2019-07-21\n */\n#include&lt;iostream&gt;\nusing namespace std;\nclass A\n{\npublic:\nchar b;\nvirtual void fun() {};\nstatic int c;\nstatic int d;\nstatic int f;\n};\n\nint main()\n{\n/**\n     * @brief 16  \u5b57\u8282\u5bf9\u9f50\u3001\u9759\u6001\u53d8\u91cf\u4e0d\u5f71\u54cd\u7c7b\u7684\u5927\u5c0f\u3001vptr\u6307\u9488=8\n     */\ncout&lt;&lt;sizeof(A)&lt;&lt;endl; return 0;\n}\n</code></pre>"},{"location":"basic_content/sizeof/#33","title":"3.\u539f\u52193","text":"<pre><code>/**\n * @file morevir.cpp\n * @brief \u5bf9\u4e8e\u5305\u542b\u865a\u51fd\u6570\u7684\u7c7b\uff0c\u4e0d\u7ba1\u6709\u591a\u5c11\u4e2a\u865a\u51fd\u6570\uff0c\u53ea\u6709\u4e00\u4e2a\u865a\u6307\u9488,vptr\u7684\u5927\u5c0f\u3002\n * @author \u5149\u57ce\n * @version v1\n * @date 2019-07-21\n */\n#include&lt;iostream&gt;\nusing namespace std;\nclass A{\nvirtual void fun();\nvirtual void fun1();\nvirtual void fun2();\nvirtual void fun3();\n};\nint main()\n{\ncout&lt;&lt;sizeof(A)&lt;&lt;endl; // 8\nreturn 0;\n}\n</code></pre>"},{"location":"basic_content/sizeof/#445","title":"4.\u539f\u52194\u4e0e5","text":"<pre><code>/**\n * @file geninhe.cpp\n * @brief 1.\u666e\u901a\u5355\u7ee7\u627f,\u7ee7\u627f\u5c31\u662f\u57fa\u7c7b+\u6d3e\u751f\u7c7b\u81ea\u8eab\u7684\u5927\u5c0f(\u6ce8\u610f\u5b57\u8282\u5bf9\u9f50)\n * \u6ce8\u610f\uff1a\u7c7b\u7684\u6570\u636e\u6210\u5458\u6309\u5176\u58f0\u660e\u987a\u5e8f\u52a0\u5165\u5185\u5b58\uff0c\u65e0\u8bbf\u95ee\u6743\u9650\u65e0\u5173\uff0c\u53ea\u770b\u58f0\u660e\u987a\u5e8f\u3002\n * 2.\u865a\u5355\u7ee7\u627f\uff0c\u6d3e\u751f\u7c7b\u7ee7\u627f\u57fa\u7c7bvptr\n * @author \u5149\u57ce\n * @version v1\n * @date 2019-07-21\n */\n\n#include&lt;iostream&gt;\n\nusing namespace std;\n\nclass A\n{\npublic:\nchar a;\nint b;\n};\n\n/**\n * @brief \u6b64\u65f6B\u6309\u7167\u987a\u5e8f\uff1a\n * char a\n * int b\n * short a\n * long b\n * \u6839\u636e\u5b57\u8282\u5bf9\u9f504+4=8+8+8=24\n */\nclass B:A\n{\npublic:\nshort a;\nlong b;\n};\nclass C\n{\nA a;\nchar c;\n};\nclass A1\n{\nvirtual void fun(){}\n};\nclass C1:public A\n{\n};\n\nint main()\n{\ncout&lt;&lt;sizeof(A)&lt;&lt;endl; // 8\ncout&lt;&lt;sizeof(B)&lt;&lt;endl; // 24\ncout&lt;&lt;sizeof(C)&lt;&lt;endl; // 12\n/**\n     * @brief \u5bf9\u4e8e\u865a\u5355\u51fd\u6570\u7ee7\u627f\uff0c\u6d3e\u751f\u7c7b\u4e5f\u7ee7\u627f\u4e86\u57fa\u7c7b\u7684vptr\uff0c\u6240\u4ee5\u662f8\u5b57\u8282\n     */\ncout&lt;&lt;sizeof(C1)&lt;&lt;endl; // 8 \nreturn 0;\n}\n</code></pre>"},{"location":"basic_content/sizeof/#56","title":"5.\u539f\u52196","text":"<pre><code>/**\n * @file virnhe.cpp\n * @brief \u865a\u7ee7\u627f\n * @author \u5149\u57ce\n * @version v1\n * @date 2019-07-21\n */\n\n#include&lt;iostream&gt;\nusing namespace std;\nclass A\n{\nvirtual void fun() {}\n};\nclass B\n{\nvirtual void fun2() {}\n};\nclass C : virtual public  A, virtual public B\n{\npublic:\nvirtual void fun3() {}\n};\n\nint main()\n{\n/**\n     * @brief 8 8 16  \u6d3e\u751f\u7c7b\u865a\u7ee7\u627f\u591a\u4e2a\u865a\u51fd\u6570\uff0c\u4f1a\u7ee7\u627f\u6240\u6709\u865a\u51fd\u6570\u7684vptr\n     */\ncout&lt;&lt;sizeof(A)&lt;&lt;\" \"&lt;&lt;sizeof(B)&lt;&lt;\" \"&lt;&lt;sizeof(C);\n\nreturn 0;\n}\n</code></pre>"},{"location":"basic_content/static/","title":"static\u90a3\u4e9b\u4e8b","text":"<p>\u5f53\u4e0e\u4e0d\u540c\u7c7b\u578b\u4e00\u8d77\u4f7f\u7528\u65f6\uff0cStatic\u5173\u952e\u5b57\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528static\u5173\u952e\u5b57\uff1a</p> <p>\u9759\u6001\u53d8\u91cf\uff1a \u51fd\u6570\u4e2d\u7684\u53d8\u91cf\uff0c\u7c7b\u4e2d\u7684\u53d8\u91cf</p> <p>\u9759\u6001\u7c7b\u7684\u6210\u5458\uff1a \u7c7b\u5bf9\u8c61\u548c\u7c7b\u4e2d\u7684\u51fd\u6570</p> <p>\u73b0\u5728\u8ba9\u6211\u4eec\u8be6\u7ec6\u770b\u4e00\u4e0b\u9759\u6001\u7684\u8fd9\u4e9b\u7528\u6cd5\uff1a</p> <p>\u9759\u6001\u53d8\u91cf</p> <ul> <li>\u51fd\u6570\u4e2d\u7684\u9759\u6001\u53d8\u91cf</li> </ul> <p>\u5f53\u53d8\u91cf\u58f0\u660e\u4e3astatic\u65f6\uff0c\u7a7a\u95f4\u5c06\u5728\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u5185\u5206\u914d\u3002\u5373\u4f7f\u591a\u6b21\u8c03\u7528\u8be5\u51fd\u6570\uff0c\u9759\u6001\u53d8\u91cf\u7684\u7a7a\u95f4\u4e5f\u53ea\u5206\u914d\u4e00\u6b21\uff0c\u524d\u4e00\u6b21\u8c03\u7528\u4e2d\u7684\u53d8\u91cf\u503c\u901a\u8fc7\u4e0b\u4e00\u6b21\u51fd\u6570\u8c03\u7528\u4f20\u9012\u3002\u8fd9\u5bf9\u4e8e\u5728C / C ++\u6216\u9700\u8981\u5b58\u50a8\u5148\u524d\u51fd\u6570\u72b6\u6001\u7684\u4efb\u4f55\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u975e\u5e38\u6709\u7528\u3002</p> <pre><code>#include &lt;iostream&gt; #include &lt;string&gt; using namespace std; void demo() { // static variable \nstatic int count = 0; cout &lt;&lt; count &lt;&lt; \" \"; // value is updated and \n// will be carried to next \n// function calls \ncount++; } int main() { for (int i=0; i&lt;5; i++)  demo(); return 0; } </code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>0 1 2 3 4 \n</code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\u770b\u5230\u53d8\u91cfcount\u88ab\u58f0\u660e\u4e3astatic\u3002\u56e0\u6b64\uff0c\u5b83\u7684\u503c\u901a\u8fc7\u51fd\u6570\u8c03\u7528\u6765\u4f20\u9012\u3002\u6bcf\u6b21\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u90fd\u4e0d\u4f1a\u5bf9\u53d8\u91cf\u8ba1\u6570\u8fdb\u884c\u521d\u59cb\u5316\u3002</p> <ul> <li>\u7c7b\u4e2d\u7684\u9759\u6001\u53d8\u91cf</li> </ul> <p>\u7531\u4e8e\u58f0\u660e\u4e3astatic\u7684\u53d8\u91cf\u53ea\u88ab\u521d\u59cb\u5316\u4e00\u6b21\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u5355\u72ec\u7684\u9759\u6001\u5b58\u50a8\u4e2d\u5206\u914d\u4e86\u7a7a\u95f4\uff0c\u56e0\u6b64\u7c7b\u4e2d\u7684\u9759\u6001\u53d8\u91cf\u7531\u5bf9\u8c61\u5171\u4eab\u3002\u5bf9\u4e8e\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u4e0d\u80fd\u6709\u76f8\u540c\u9759\u6001\u53d8\u91cf\u7684\u591a\u4e2a\u526f\u672c\u3002\u4e5f\u662f\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u9759\u6001\u53d8\u91cf\u4e0d\u80fd\u4f7f\u7528\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u3002</p> <pre><code>#include&lt;iostream&gt; using namespace std; class Apple { public: static int i; Apple() { // Do nothing \n}; }; int main() { Apple obj1; Apple obj2; obj1.i =2; obj2.i = 3; // prints value of i \ncout &lt;&lt; obj1.i&lt;&lt;\" \"&lt;&lt;obj2.i; } </code></pre> <p>\u60a8\u53ef\u4ee5\u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\u770b\u5230\u6211\u4eec\u5df2\u7ecf\u5c1d\u8bd5\u4e3a\u591a\u4e2a\u5bf9\u8c61\u521b\u5efa\u9759\u6001\u53d8\u91cfi\u7684\u591a\u4e2a\u526f\u672c\u3002\u4f46\u8fd9\u5e76\u6ca1\u6709\u53d1\u751f\u3002\u56e0\u6b64\uff0c\u7c7b\u4e2d\u7684\u9759\u6001\u53d8\u91cf\u5e94\u7531\u7528\u6237\u4f7f\u7528\u7c7b\u5916\u7684\u7c7b\u540d\u548c\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26\u663e\u5f0f\u521d\u59cb\u5316\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <pre><code>#include&lt;iostream&gt; using namespace std; class Apple { public: static int i; Apple() { // Do nothing \n}; }; int Apple::i = 1; int main() { Apple obj; // prints value of i \ncout &lt;&lt; obj.i; } </code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>1\n</code></pre> <p>\u9759\u6001\u6210\u5458</p> <ul> <li>\u7c7b\u5bf9\u8c61\u4e3a\u9759\u6001</li> </ul> <p>\u5c31\u50cf\u53d8\u91cf\u4e00\u6837\uff0c\u5bf9\u8c61\u4e5f\u5728\u58f0\u660e\u4e3astatic\u65f6\u5177\u6709\u8303\u56f4\uff0c\u76f4\u5230\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u3002</p> <p>\u8003\u8651\u4ee5\u4e0b\u7a0b\u5e8f\uff0c\u5176\u4e2d\u5bf9\u8c61\u662f\u975e\u9759\u6001\u7684\u3002</p> <pre><code>#include&lt;iostream&gt; using namespace std; class Apple { int i; public: Apple() { i = 0; cout &lt;&lt; \"Inside Constructor\\n\"; } ~Apple() { cout &lt;&lt; \"Inside Destructor\\n\"; } }; int main() { int x = 0; if (x==0) { Apple obj; } cout &lt;&lt; \"End of main\\n\"; } </code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Inside Constructor\nInside Destructor\nEnd of main\n</code></pre> <p>\u5728\u4e0a\u9762\u7684\u7a0b\u5e8f\u4e2d\uff0c\u5bf9\u8c61\u5728if\u5757\u5185\u58f0\u660e\u4e3a\u975e\u9759\u6001\u3002\u56e0\u6b64\uff0c\u53d8\u91cf\u7684\u8303\u56f4\u4ec5\u5728if\u5757\u5185\u3002\u56e0\u6b64\uff0c\u5f53\u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u5c06\u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4e14\u5728if\u5757\u7684\u63a7\u5236\u6743\u8d8a\u8fc7\u6790\u6784\u51fd\u6570\u7684\u540c\u65f6\u8c03\u7528\uff0c\u56e0\u4e3a\u5bf9\u8c61\u7684\u8303\u56f4\u4ec5\u5728\u58f0\u660e\u5b83\u7684if\u5757\u5185\u3002 \u5982\u679c\u6211\u4eec\u5c06\u5bf9\u8c61\u58f0\u660e\u4e3a\u9759\u6001\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u770b\u770b\u8f93\u51fa\u7684\u53d8\u5316\u3002</p> <pre><code>#include&lt;iostream&gt; using namespace std; class Apple { int i; public: Apple() { i = 0; cout &lt;&lt; \"Inside Constructor\\n\"; } ~Apple() { cout &lt;&lt; \"Inside Destructor\\n\"; } }; int main() { int x = 0; if (x==0) { static Apple obj; } cout &lt;&lt; \"End of main\\n\"; } </code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Inside Constructor\nEnd of main\nInside Destructor\n</code></pre> <p>\u60a8\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\u8f93\u51fa\u7684\u53d8\u5316\u3002\u73b0\u5728\uff0c\u5728main\u7ed3\u675f\u540e\u8c03\u7528\u6790\u6784\u51fd\u6570\u3002\u8fd9\u662f\u56e0\u4e3a\u9759\u6001\u5bf9\u8c61\u7684\u8303\u56f4\u662f\u8d2f\u7a7f\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u3002</p> <ul> <li>\u7c7b\u4e2d\u7684\u9759\u6001\u51fd\u6570</li> </ul> <p>\u5c31\u50cf\u7c7b\u4e2d\u7684\u9759\u6001\u6570\u636e\u6210\u5458\u6216\u9759\u6001\u53d8\u91cf\u4e00\u6837\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u4e5f\u4e0d\u4f9d\u8d56\u4e8e\u7c7b\u7684\u5bf9\u8c61\u3002\u6211\u4eec\u88ab\u5141\u8bb8\u4f7f\u7528\u5bf9\u8c61\u548c'.'\u6765\u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\u3002\u4f46\u5efa\u8bae\u4f7f\u7528\u7c7b\u540d\u548c\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26\u8c03\u7528\u9759\u6001\u6210\u5458\u3002</p> <p>\u5141\u8bb8\u9759\u6001\u6210\u5458\u51fd\u6570\u4ec5\u8bbf\u95ee\u9759\u6001\u6570\u636e\u6210\u5458\u6216\u5176\u4ed6\u9759\u6001\u6210\u5458\u51fd\u6570\uff0c\u5b83\u4eec\u65e0\u6cd5\u8bbf\u95ee\u7c7b\u7684\u975e\u9759\u6001\u6570\u636e\u6210\u5458\u6216\u6210\u5458\u51fd\u6570\u3002</p> <pre><code>#include&lt;iostream&gt; using namespace std; class Apple { public: // static member function \nstatic void printMsg() {\ncout&lt;&lt;\"Welcome to Apple!\"; }\n}; // main function \nint main() { // invoking a static member function \nApple::printMsg(); } </code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Welcome to Apple!\n</code></pre>"},{"location":"basic_content/struct/","title":"\u4e00\u6587\u641e\u61c2C\u548cC++\u4e2dstruct","text":""},{"location":"basic_content/struct/#1cstruct","title":"1.C\u4e2dstruct","text":"<ul> <li>\u5728C\u4e2dstruct\u53ea\u5355\u7eaf\u7684\u7528\u4f5c\u6570\u636e\u7684\u590d\u5408\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u7ed3\u6784\u4f53\u58f0\u660e\u4e2d\u53ea\u80fd\u5c06\u6570\u636e\u6210\u5458\u653e\u5728\u91cc\u9762\uff0c\u800c\u4e0d\u80fd\u5c06\u51fd\u6570\u653e\u5728\u91cc\u9762\u3002 </li> <li>\u5728C\u7ed3\u6784\u4f53\u58f0\u660e\u4e2d\u4e0d\u80fd\u4f7f\u7528C++\u8bbf\u95ee\u4fee\u9970\u7b26\uff0c\u5982\uff1apublic\u3001protected\u3001private \u800c\u5728C++\u4e2d\u53ef\u4ee5\u4f7f\u7528\u3002</li> <li>\u5728C\u4e2d\u5b9a\u4e49\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u5982\u679c\u4f7f\u7528\u4e86\u4e0b\u9762\u5b9a\u4e49\u5fc5\u987b\u52a0struct\u3002</li> <li>C\u7684\u7ed3\u6784\u4f53\u4e0d\u80fd\u7ee7\u627f\uff08\u6ca1\u6709\u8fd9\u4e00\u6982\u5ff5\uff09\u3002</li> <li>\u82e5\u7ed3\u6784\u4f53\u7684\u540d\u5b57\u4e0e\u51fd\u6570\u540d\u76f8\u540c\uff0c\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u4e14\u6b63\u5e38\u7684\u8c03\u7528\uff01\u4f8b\u5982\uff1a\u53ef\u4ee5\u5b9a\u4e49\u4e0e struct Base \u4e0d\u51b2\u7a81\u7684 void Base() {}\u3002</li> </ul> <p>\u5b8c\u6574\u6848\u4f8b\uff1a</p> <pre><code>#include&lt;stdio.h&gt;\n\nstruct Base {            // public\nint v1; //    public:      //error\nint v2; //private:\nint v3; //void print(){       // c\u4e2d\u4e0d\u80fd\u5728\u7ed3\u6784\u4f53\u4e2d\u5d4c\u5165\u51fd\u6570\n//    printf(\"%s\\n\",\"hello world\");\n//};    //error!\n};\n\nvoid Base(){\nprintf(\"%s\\n\",\"I am Base func\");\n}\n//struct Base base1;  //ok\n//Base base2; //error\nint main() {\nstruct Base base;\nbase.v1=1;\n//base.print();\nprintf(\"%d\\n\",base.v1);\nBase();\nreturn 0;\n}\n</code></pre> <p>\u6700\u540e\u8f93\u51fa\uff1a</p> <pre><code>1\nI am Base func\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u89c1\uff1astruct_func.c</p>"},{"location":"basic_content/struct/#2cstruct","title":"2.C++\u4e2dstruct","text":"<p>\u4e0eC\u5bf9\u6bd4\u5982\u4e0b\uff1a</p> <ul> <li>C++\u7ed3\u6784\u4f53\u4e2d\u4e0d\u4ec5\u53ef\u4ee5\u5b9a\u4e49\u6570\u636e\uff0c\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u51fd\u6570\u3002</li> <li>C++\u7ed3\u6784\u4f53\u4e2d\u53ef\u4ee5\u4f7f\u7528\u8bbf\u95ee\u4fee\u9970\u7b26\uff0c\u5982\uff1apublic\u3001protected\u3001private \u3002</li> <li>C++\u7ed3\u6784\u4f53\u4f7f\u7528\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e0d\u5e26struct\u3002</li> <li>C++\u7ee7\u627f</li> <li>\u82e5\u7ed3\u6784\u4f53\u7684\u540d\u5b57\u4e0e\u51fd\u6570\u540d\u76f8\u540c\uff0c\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u4e14\u6b63\u5e38\u7684\u8c03\u7528\uff01\u4f46\u662f\u5b9a\u4e49\u7ed3\u6784\u4f53\u53d8\u91cf\u65f6\u5019\u53ea\u7528\u7528\u5e26struct\u7684\uff01</li> </ul> <p>\u4f8b\u5982\uff1a</p> <p>\u60c5\u5f621\uff1a\u4e0d\u9002\u7528typedef\u5b9a\u4e49\u7ed3\u6784\u4f53\u522b\u540d</p> <p>\u672a\u6dfb\u52a0\u540c\u540d\u51fd\u6570\u524d\uff1a</p> <pre><code>struct Student {\n\n};\nStudent(){}\nStruct Student s; //ok\nStudent s;  //ok\n</code></pre> <p>\u6dfb\u52a0\u540c\u540d\u51fd\u6570\u540e\uff1a</p> <pre><code>struct Student {\n\n};\nStudent(){}\nStruct Student s; //ok\nStudent s;  //error\n</code></pre> <p>\u60c5\u5f62\u4e8c\uff1a\u4f7f\u7528typedef\u5b9a\u4e49\u7ed3\u6784\u4f53\u522b\u540d</p> <pre><code>typedef struct Base1 {         int v1;\n//    private:   //error!\nint v3;\npublic:     //\u663e\u793a\u58f0\u660epublic\nint v2;\nvoid print(){       printf(\"%s\\n\",\"hello world\");\n};    }B;\n//void B() {}  //error! \u7b26\u53f7 \"B\" \u5df2\u7ecf\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a \"struct Base1\" \u7684\u522b\u540d\n</code></pre> <p>\u524d\u4e09\u79cd\u6848\u4f8b</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;stdio.h&gt;\n\nstruct Base {         int v1;\n//    private:   //error!\nint v3;\npublic:     //\u663e\u793a\u58f0\u660epublic\nint v2;\nvoid print(){       printf(\"%s\\n\",\"hello world\");\n};    };\n\nint main() {\nstruct Base base1;  //ok\nBase base2; //ok\nBase base;\nbase.v1=1;\nbase.v3=2;\nbase.print();\nprintf(\"%d\\n\",base.v1);\nprintf(\"%d\\n\",base.v3);\nreturn 0;\n}\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u89c1\uff1astruct_func.cpp</p> <p>\u7ee7\u627f\u6848\u4f8b</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;stdio.h&gt;\nstruct Base {         int v1;\n//    private:   //error!\nint v3;\npublic:   //\u663e\u793a\u58f0\u660epublic\nint v2;\nvirtual void print(){       printf(\"%s\\n\",\"Base\");\n};    };\nstruct Derived:Base {         public:\nint v2;\nvoid print(){       printf(\"%s\\n\",\"Derived\");\n};    };\nint main() {\nBase *b=new Derived();\nb-&gt;print();\nreturn 0;\n}\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u89c1\uff1aext_struct_func.cpp</p> <p>\u540c\u540d\u51fd\u6570</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;stdio.h&gt;\n\nstruct Base {         int v1;\n//    private:   //error!\nint v3;\npublic:     //\u663e\u793a\u58f0\u660epublic\nint v2;\nvoid print(){       printf(\"%s\\n\",\"hello world\");\n};    };\n\ntypedef struct Base1 {         int v1;\n//    private:   //error!\nint v3;\npublic:     //\u663e\u793a\u58f0\u660epublic\nint v2;\nvoid print(){       printf(\"%s\\n\",\"hello world\");\n};    }B;\nvoid Base(){\nprintf(\"%s\\n\",\"I am Base func\");\n}\n//void B() {}  //error! \u7b26\u53f7 \"B\" \u5df2\u7ecf\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a \"struct Base1\" \u7684\u522b\u540d\nint main() {\nstruct Base base;  //ok\n//Base base1;  // error!\nbase.v1=1;\nbase.v3=2;\nbase.print();\nprintf(\"%d\\n\",base.v1);\nprintf(\"%d\\n\",base.v3);\nBase();\nreturn 0;\n}\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u89c1\uff1astruct_func_func.cpp</p>"},{"location":"basic_content/struct/#3","title":"3.\u603b\u7ed3","text":""},{"location":"basic_content/struct/#ccstruct_1","title":"C\u548cC++\u4e2d\u7684Struct\u533a\u522b","text":"C C++ \u4e0d\u80fd\u5c06\u51fd\u6570\u653e\u5728\u7ed3\u6784\u4f53\u58f0\u660e \u80fd\u5c06\u51fd\u6570\u653e\u5728\u7ed3\u6784\u4f53\u58f0\u660e \u5728C\u7ed3\u6784\u4f53\u58f0\u660e\u4e2d\u4e0d\u80fd\u4f7f\u7528C++\u8bbf\u95ee\u4fee\u9970\u7b26\u3002 public\u3001protected\u3001private \u5728C++\u4e2d\u53ef\u4ee5\u4f7f\u7528\u3002 \u5728C\u4e2d\u5b9a\u4e49\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u5982\u679c\u4f7f\u7528\u4e86\u4e0b\u9762\u5b9a\u4e49\u5fc5\u987b\u52a0struct\u3002 \u53ef\u4ee5\u4e0d\u52a0struct \u7ed3\u6784\u4f53\u4e0d\u80fd\u7ee7\u627f\uff08\u6ca1\u6709\u8fd9\u4e00\u6982\u5ff5\uff09\u3002 \u53ef\u4ee5\u7ee7\u627f \u82e5\u7ed3\u6784\u4f53\u7684\u540d\u5b57\u4e0e\u51fd\u6570\u540d\u76f8\u540c\uff0c\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u4e14\u6b63\u5e38\u7684\u8c03\u7528\uff01 \u82e5\u7ed3\u6784\u4f53\u7684\u540d\u5b57\u4e0e\u51fd\u6570\u540d\u76f8\u540c\uff0c\u4f7f\u7528\u7ed3\u6784\u4f53\uff0c\u53ea\u80fd\u4f7f\u7528\u5e26struct\u5b9a\u4e49\uff01"},{"location":"basic_content/struct_class/","title":"struct\u4e0eclass\u533a\u522b","text":"<p>\u5173\u4e8eC\u4e0eC++\u4e2dstruct\u5185\u5bb9\uff1a\u89c1struct\u90a3\u4e9b\u4e8b</p> <p>\u603b\u7684\u6765\u8bf4\uff0cstruct \u66f4\u9002\u5408\u770b\u6210\u662f\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u5b9e\u73b0\u4f53\uff0cclass \u66f4\u9002\u5408\u770b\u6210\u662f\u4e00\u4e2a\u5bf9\u8c61\u7684\u5b9e\u73b0\u4f53\u3002</p> <p>\u533a\u522b:</p> <p>\u6700\u672c\u8d28\u7684\u4e00\u4e2a\u533a\u522b\u5c31\u662f\u9ed8\u8ba4\u7684\u8bbf\u95ee\u63a7\u5236</p> <p>\u9ed8\u8ba4\u7684\u7ee7\u627f\u8bbf\u95ee\u6743\u9650\u3002struct \u662f public \u7684\uff0cclass \u662f private \u7684\u3002</p> <p>struct \u4f5c\u4e3a\u6570\u636e\u7ed3\u6784\u7684\u5b9e\u73b0\u4f53\uff0c\u5b83\u9ed8\u8ba4\u7684\u6570\u636e\u8bbf\u95ee\u63a7\u5236\u662f public \u7684\uff0c\u800c class \u4f5c\u4e3a\u5bf9\u8c61\u7684\u5b9e\u73b0\u4f53\uff0c\u5b83\u9ed8\u8ba4\u7684\u6210\u5458\u53d8\u91cf\u8bbf\u95ee\u63a7\u5236\u662f private \u7684\u3002</p>"},{"location":"basic_content/this/","title":"this\u6307\u9488\u90a3\u4e9b\u4e8b","text":"<p>\u76f8\u4fe1\u5728\u5750\u7684\u5f88\u591a\u4eba\uff0c\u90fd\u5728\u5b66Python\uff0c\u5bf9\u4e8ePython\u6765\u8bf4\u6709self\uff0c\u7c7b\u6bd4\u5230C++\u4e2d\u5c31\u662fthis\u6307\u9488\uff0c\u90a3\u4e48\u4e0b\u9762\u4e00\u8d77\u6765\u6df1\u5165\u5206\u6790this\u6307\u9488\u5728\u7c7b\u4e2d\u7684\u4f7f\u7528\uff01</p> <p>\u9996\u5148\u6765\u8c08\u8c08this\u6307\u9488\u7684\u7528\u5904\uff1a</p> <p>\uff081\uff09\u4e00\u4e2a\u5bf9\u8c61\u7684this\u6307\u9488\u5e76\u4e0d\u662f\u5bf9\u8c61\u672c\u8eab\u7684\u4e00\u90e8\u5206\uff0c\u4e0d\u4f1a\u5f71\u54cdsizeof(\u5bf9\u8c61)\u7684\u7ed3\u679c\u3002</p> <p>\uff082\uff09this\u4f5c\u7528\u57df\u662f\u5728\u7c7b\u5185\u90e8\uff0c\u5f53\u5728\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u4e2d\u8bbf\u95ee\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u7684\u65f6\u5019\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u5c06\u5bf9\u8c61\u672c\u8eab\u7684\u5730\u5740\u4f5c\u4e3a\u4e00\u4e2a\u9690\u542b\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5373\u4f7f\u4f60\u6ca1\u6709\u5199\u4e0athis\u6307\u9488\uff0c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u4e5f\u662f\u52a0\u4e0athis\u7684\uff0c\u5b83\u4f5c\u4e3a\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u9690\u542b\u5f62\u53c2\uff0c\u5bf9\u5404\u6210\u5458\u7684\u8bbf\u95ee\u5747\u901a\u8fc7this\u8fdb\u884c\u3002</p> <p>\u5176\u6b21\uff0cthis\u6307\u9488\u7684\u4f7f\u7528\uff1a</p> <p>\uff081\uff09\u5728\u7c7b\u7684\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u4e2d\u8fd4\u56de\u7c7b\u5bf9\u8c61\u672c\u8eab\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u4f7f\u7528 return *this\u3002</p> <p>\uff082\uff09\u5f53\u53c2\u6570\u4e0e\u6210\u5458\u53d8\u91cf\u540d\u76f8\u540c\u65f6\uff0c\u5982this-&gt;n = n \uff08\u4e0d\u80fd\u5199\u6210n = n)\u3002</p> <p>\u53e6\u5916\uff0c\u5728\u7f51\u4e0a\u5927\u5bb6\u4f1a\u770b\u5230this\u4f1a\u88ab\u7f16\u8bd1\u5668\u89e3\u6790\u6210<code>A *const</code>\uff0c<code>A const *</code>\uff0c\u7a76\u7adf\u662f\u54ea\u4e00\u4e2a\u5462\uff1f\u4e0b\u9762\u901a\u8fc7\u65ad\u70b9\u8c03\u8bd5\u5206\u6790\uff1a</p> <p>\u73b0\u6709\u5982\u4e0b\u4f8b\u5b50\uff1a</p> <pre><code>#include&lt;iostream&gt;\n#include&lt;cstring&gt;\n\n\nusing namespace std;\nclass Person{\npublic:\ntypedef enum {\nBOY = 0, GIRL }SexType;\nPerson(char *n, int a,SexType s){\nname=new char[strlen(n)+1];\nstrcpy(name,n);\nage=a;\nsex=s;\n}\nint get_age() const{\n\nreturn this-&gt;age; }\nPerson&amp; add_age(int a){\nage+=a;\nreturn *this; }\n~Person(){\ndelete [] name;\n}\nprivate:\nchar * name;\nint age;\nSexType sex;\n};\n\n\nint main(){\nPerson p(\"zhangsan\",20,Person::BOY); cout&lt;&lt;p.get_age()&lt;&lt;endl;\ncout&lt;&lt;p.add_age(10).get_age()&lt;&lt;endl;\nreturn 0;\n}\n</code></pre> <p>\u5bf9\u4e8e\u8fd9\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\uff0c\u76f8\u4fe1\u5927\u5bb6\u6ca1\u5f97\u95ee\u9898\u5427\uff0c\u5c31\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7c7b\uff0c\u7136\u540e\u521d\u59cb\u5316\u6784\u9020\u51fd\u6570\uff0c\u5e76\u83b7\u53d6\u8fd9\u4e2a\u4eba\u7684\u5e74\u9f84\uff0c\u8bbe\u7f6e\u540e\uff0c\u518d\u83b7\u53d6\uff01</p> <p>\u4e3a\u4e86\u9a8c\u8bc1this\u6307\u9488\u662f\u54ea\u4e00\u4e2a\uff0c\u73b0\u5728\u5728<code>add_age</code>\u5904\u6dfb\u52a0\u65ad\u70b9\uff0c\u8fd0\u884c\u540e\u5982\u4e0b\uff1a</p> <p></p> <p></p> <p>\u4f1a\u53d1\u73b0\u7f16\u8bd1\u5668\u81ea\u52a8\u4e3a\u6211\u4eec\u52a0\u4e0a<code>A* const</code>\uff0c\u800c\u4e0d\u662f<code>A const *this</code>\uff01</p> <p>\u7d27\u63a5\u7740\uff0c\u4e0a\u8ff0\u8fd8\u6709\u4e2a\u5e38\u51fd\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5728\u5bf9<code>get_age</code>\u6dfb\u52a0\u65ad\u70b9\uff0c\u5982\u4e0b\uff1a</p> <p></p> <p>\u4f1a\u53d1\u73b0\u7f16\u8bd1\u5668\u628a\u4e0a\u8ff0\u7684this\uff0c\u53d8\u4e3a<code>const A* const</code>\uff0c\u8fd9\u4e2a\u5927\u5bb6\u4e5f\u80fd\u60f3\u5230\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u51fd\u6570\u662fconst\u51fd\u6570\uff0c\u90a3\u4e48\u9488\u5bf9const\u51fd\u6570\uff0c\u5b83\u53ea\u80fd\u8bbf\u95eeconst\u53d8\u91cf\u4e0econst\u51fd\u6570\uff0c\u4e0d\u80fd\u4fee\u6539\u5176\u4ed6\u53d8\u91cf\u7684\u503c\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u4e2athis\u6307\u5411\u4e0d\u80fd\u4fee\u6539\u7684\u53d8\u91cf\uff0c\u90a3\u5c31\u662f<code>const A*</code>,\u53c8\u7531\u4e8e\u672c\u8eabthis\u662f<code>const</code>\u6307\u9488\uff0c\u6240\u4ee5\u5c31\u4e3a<code>const A* const</code>!</p> <p>\u603b\u7ed3\uff1athis\u5728\u6210\u5458\u51fd\u6570\u7684\u5f00\u59cb\u6267\u884c\u524d\u6784\u9020\uff0c\u5728\u6210\u5458\u7684\u6267\u884c\u7ed3\u675f\u540e\u6e05\u9664\u3002\u4e0a\u8ff0\u7684get_age\u51fd\u6570\u4f1a\u88ab\u89e3\u6790\u6210<code>get_age(const A * const this)</code>,<code>add_age</code>\u51fd\u6570\u4f1a\u88ab\u89e3\u6790\u6210<code>add_age(A* const this,int a)</code>\u3002\u5728C++\u4e2d\u7c7b\u548c\u7ed3\u6784\u662f\u53ea\u6709\u4e00\u4e2a\u533a\u522b\u7684\uff1a\u7c7b\u7684\u6210\u5458\u9ed8\u8ba4\u662fprivate\uff0c\u800c\u7ed3\u6784\u662fpublic\u3002this\u662f\u7c7b\u7684\u6307\u9488\uff0c\u5982\u679c\u6362\u6210\u7ed3\u6784\uff0c\u90a3this\u5c31\u662f\u7ed3\u6784\u7684\u6307\u9488\u4e86\u3002</p>"},{"location":"basic_content/union/","title":"UNION\u90a3\u4e9b\u4e8b","text":"<p>\u8054\u5408\uff08union\uff09\u662f\u4e00\u79cd\u8282\u7701\u7a7a\u95f4\u7684\u7279\u6b8a\u7684\u7c7b\uff0c\u4e00\u4e2a union \u53ef\u4ee5\u6709\u591a\u4e2a\u6570\u636e\u6210\u5458\uff0c\u4f46\u662f\u5728\u4efb\u610f\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u6570\u636e\u6210\u5458\u53ef\u4ee5\u6709\u503c\u3002\u5f53\u67d0\u4e2a\u6210\u5458\u88ab\u8d4b\u503c\u540e\u5176\u4ed6\u6210\u5458\u53d8\u4e3a\u672a\u5b9a\u4e49\u72b6\u6001\u3002\u8054\u5408\u6709\u5982\u4e0b\u7279\u70b9\uff1a</p> <ul> <li>\u9ed8\u8ba4\u8bbf\u95ee\u63a7\u5236\u7b26\u4e3a public</li> <li>\u53ef\u4ee5\u542b\u6709\u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570</li> <li>\u4e0d\u80fd\u542b\u6709\u5f15\u7528\u7c7b\u578b\u7684\u6210\u5458</li> <li>\u4e0d\u80fd\u7ee7\u627f\u81ea\u5176\u4ed6\u7c7b\uff0c\u4e0d\u80fd\u4f5c\u4e3a\u57fa\u7c7b</li> <li>\u4e0d\u80fd\u542b\u6709\u865a\u51fd\u6570</li> <li>\u533f\u540d union \u5728\u5b9a\u4e49\u6240\u5728\u4f5c\u7528\u57df\u53ef\u76f4\u63a5\u8bbf\u95ee union \u6210\u5458</li> <li>\u533f\u540d union \u4e0d\u80fd\u5305\u542b protected \u6210\u5458\u6216 private \u6210\u5458</li> <li>\u5168\u5c40\u533f\u540d\u8054\u5408\u5fc5\u987b\u662f\u9759\u6001\uff08static\uff09\u7684</li> </ul>"},{"location":"basic_content/using/","title":"using\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/using/#_1","title":"\u57fa\u672c\u4f7f\u7528","text":"<p>\u5c40\u90e8\u4e0e\u5168\u5c40using\uff0c\u5177\u4f53\u64cd\u4f5c\u4e0e\u4f7f\u7528\u89c1\u4e0b\u9762\u6848\u4f8b\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#define isNs1 1\n//#define isGlobal 2\nusing namespace std;\nvoid func() {\ncout&lt;&lt;\"::func\"&lt;&lt;endl;\n}\n\nnamespace ns1 {\nvoid func()\n{\ncout&lt;&lt;\"ns1::func\"&lt;&lt;endl; }\n}\n\nnamespace ns2 {\n#ifdef isNs1 \nusing ns1::func;    /// ns1\u4e2d\u7684\u51fd\u6570\n#elif isGlobal\nusing ::func; /// \u5168\u5c40\u4e2d\u7684\u51fd\u6570\n#else\nvoid func() {\ncout&lt;&lt;\"other::func\"&lt;&lt;endl; }\n#endif\n}\n\nint main() {\n/**\n     * \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728c++\u4e2d\u4f7f\u7528\u4e86cmath\u800c\u4e0d\u662fmath.h\u5934\u6587\u4ef6\n     */\nns2::func(); // \u4f1a\u6839\u636e\u5f53\u524d\u73af\u5883\u5b9a\u4e49\u5b8f\u7684\u4e0d\u540c\u6765\u8c03\u7528\u4e0d\u540c\u547d\u540d\u7a7a\u95f4\u4e0b\u7684func()\u51fd\u6570\nreturn 0;\n}\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u89c1\uff1ausing_global.cpp</p>"},{"location":"basic_content/using/#_2","title":"\u6539\u53d8\u8bbf\u95ee\u6027","text":"<pre><code>class Base{\npublic:\n std::size_t size() const { return n;  }\nprotected:\n std::size_t n;\n};\nclass Derived : private Base {\npublic:\n using Base::size;\nprotected:\n using Base::n;\n};\n</code></pre> <p>\u7c7bDerived\u79c1\u6709\u7ee7\u627f\u4e86Base\uff0c\u5bf9\u4e8e\u5b83\u6765\u8bf4\u6210\u5458\u53d8\u91cfn\u548c\u6210\u5458\u51fd\u6570size\u90fd\u662f\u79c1\u6709\u7684\uff0c\u5982\u679c\u4f7f\u7528\u4e86using\u8bed\u53e5\uff0c\u53ef\u4ee5\u6539\u53d8\u4ed6\u4eec\u7684\u53ef\u8bbf\u95ee\u6027\uff0c\u5982\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0csize\u53ef\u4ee5\u6309public\u7684\u6743\u9650\u8bbf\u95ee\uff0cn\u53ef\u4ee5\u6309protected\u7684\u6743\u9650\u8bbf\u95ee\u3002 \u5b8c\u6574\u4ee3\u7801\u89c1\uff1aderived_base.cpp</p>"},{"location":"basic_content/using/#_3","title":"\u51fd\u6570\u91cd\u8f7d","text":"<p>\u5728\u7ee7\u627f\u8fc7\u7a0b\u4e2d\uff0c\u6d3e\u751f\u7c7b\u53ef\u4ee5\u8986\u76d6\u91cd\u8f7d\u51fd\u6570\u76840\u4e2a\u6216\u591a\u4e2a\u5b9e\u4f8b\uff0c\u4e00\u65e6\u5b9a\u4e49\u4e86\u4e00\u4e2a\u91cd\u8f7d\u7248\u672c\uff0c\u90a3\u4e48\u5176\u4ed6\u7684\u91cd\u8f7d\u7248\u672c\u90fd\u4f1a\u53d8\u4e3a\u4e0d\u53ef\u89c1\u3002</p> <p>\u5982\u679c\u5bf9\u4e8e\u57fa\u7c7b\u7684\u91cd\u8f7d\u51fd\u6570\uff0c\u6211\u4eec\u9700\u8981\u5728\u6d3e\u751f\u7c7b\u4e2d\u4fee\u6539\u4e00\u4e2a\uff0c\u53c8\u8981\u8ba9\u5176\u4ed6\u7684\u4fdd\u6301\u53ef\u89c1\uff0c\u5fc5\u987b\u8981\u91cd\u8f7d\u6240\u6709\u7248\u672c\uff0c\u8fd9\u6837\u5341\u5206\u7684\u7e41\u7410\u3002</p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Base{\npublic:\nvoid f(){ cout&lt;&lt;\"f()\"&lt;&lt;endl;\n}\nvoid f(int n){\ncout&lt;&lt;\"Base::f(int)\"&lt;&lt;endl;\n}\n};\n\nclass Derived : private Base {\npublic:\nusing Base::f;\nvoid f(int n){\ncout&lt;&lt;\"Derived::f(int)\"&lt;&lt;endl;\n}\n};\n\nint main()\n{\nBase b;\nDerived d;\nd.f();\nd.f(1);\nreturn 0;\n}\n</code></pre> <p>\u5982\u4e0a\u4ee3\u7801\u4e2d\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u4f7f\u7528using\u58f0\u660e\u8bed\u53e5\u6307\u5b9a\u4e00\u4e2a\u540d\u5b57\u800c\u4e0d\u6307\u5b9a\u5f62\u53c2\u5217\u8868\uff0c\u6240\u4ee5\u4e00\u6761\u57fa\u7c7b\u6210\u5458\u51fd\u6570\u7684using\u58f0\u660e\u8bed\u53e5\u5c31\u53ef\u4ee5\u628a\u8be5\u51fd\u6570\u7684\u6240\u6709\u91cd\u8f7d\u5b9e\u4f8b\u6dfb\u52a0\u5230\u6d3e\u751f\u7c7b\u7684\u4f5c\u7528\u57df\u4e2d\u3002\u6b64\u65f6\uff0c\u6d3e\u751f\u7c7b\u53ea\u9700\u8981\u5b9a\u4e49\u5176\u7279\u6709\u7684\u51fd\u6570\u5c31\u884c\u4e86\uff0c\u800c\u65e0\u9700\u4e3a\u7ee7\u627f\u800c\u6765\u7684\u5176\u4ed6\u51fd\u6570\u91cd\u65b0\u5b9a\u4e49\u3002</p> <p>\u5b8c\u6574\u4ee3\u7801\u89c1\uff1ausing_derived.cpp</p>"},{"location":"basic_content/using/#typedef","title":"\u53d6\u4ee3typedef","text":"<p>C\u4e2d\u5e38\u7528typedef A B\u8fd9\u6837\u7684\u8bed\u6cd5\uff0c\u5c06B\u5b9a\u4e49\u4e3aA\u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u7ed9A\u7c7b\u578b\u4e00\u4e2a\u522b\u540dB</p> <p>\u5bf9\u5e94typedef A B\uff0c\u4f7f\u7528using B=A\u53ef\u4ee5\u8fdb\u884c\u540c\u6837\u7684\u64cd\u4f5c\u3002</p> <pre><code>typedef vector&lt;int&gt; V1; using V2 = vector&lt;int&gt;;\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u89c1\uff1ausing_typedef.cpp</p>"},{"location":"basic_content/virtual/","title":"virtual\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/virtual/#1","title":"1.\u865a\u51fd\u6570\u4e0e\u8fd0\u884c\u591a\u6001","text":"<p>\u5bf9\u5e94\u7684\u4ee3\u7801\uff1aemp.cpp</p> <p>\u865a\u51fd\u6570\u7684\u8c03\u7528\u53d6\u51b3\u4e8e\u6307\u5411\u6216\u8005\u5f15\u7528\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u6307\u9488\u6216\u8005\u5f15\u7528\u81ea\u8eab\u7684\u7c7b\u578b\u3002</p>"},{"location":"basic_content/virtual/#2vptrvtable","title":"2.vptr\u4e0evtable","text":"<p>\u89c1vptr_vtable\u90a3\u4e9b\u4e8b</p>"},{"location":"basic_content/virtual/#3","title":"3.\u865a\u51fd\u6570\u4e2d\u9ed8\u8ba4\u53c2\u6570","text":"<p>\u5bf9\u5e94\u7684\u4ee3\u7801\uff1adefault_arg.cpp</p> <p>\u9ed8\u8ba4\u53c2\u6570\u662f\u9759\u6001\u7ed1\u5b9a\u7684\uff0c\u865a\u51fd\u6570\u662f\u52a8\u6001\u7ed1\u5b9a\u7684\u3002 \u9ed8\u8ba4\u53c2\u6570\u7684\u4f7f\u7528\u9700\u8981\u770b\u6307\u9488\u6216\u8005\u5f15\u7528\u672c\u8eab\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u5bf9\u8c61\u7684\u7c7b\u578b\u3002</p>"},{"location":"basic_content/virtual/#4","title":"4.\u53ef\u4ee5\u4e0d\u53ef\u4ee5","text":"<p>\uff081\uff09 \u9759\u6001\u51fd\u6570\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u5417\uff1f</p> <p>\u539f\u56e0\u4e3b\u8981\u6709\u4e24\u65b9\u9762\uff1a</p> <p>\u9759\u6001\u51fd\u6570\u4e0d\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u540c\u65f6\u4e5f\u4e0d\u80fd\u88abconst \u548c volatile\u5173\u952e\u5b57\u4fee\u9970</p> <p>static\u6210\u5458\u51fd\u6570\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7c7b\u5bf9\u8c61\u6216\u7c7b\u5b9e\u4f8b\uff0c\u6240\u4ee5\u5373\u4f7f\u7ed9\u6b64\u51fd\u6570\u52a0\u4e0avirutal\u4e5f\u662f\u6ca1\u6709\u4efb\u4f55\u610f\u4e49</p> <p>\u865a\u51fd\u6570\u4f9d\u9760vptr\u548cvtable\u6765\u5904\u7406\u3002vptr\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u521b\u5efa\u751f\u6210\uff0c\u5e76\u4e14\u53ea\u80fd\u7528this\u6307\u9488\u6765\u8bbf\u95ee\u5b83\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709this\u6307\u9488\uff0c\u6240\u4ee5\u65e0\u6cd5\u8bbf\u95eevptr\u3002</p> <p>\u4ee3\u7801\u5b66\u4e60\uff1astatic_error.cpp  </p> <p>\uff082\uff09\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u4e3a\u865a\u51fd\u6570\u5417\uff1f</p> <p>\u6784\u9020\u51fd\u6570\u4e0d\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002\u540c\u65f6\u9664\u4e86inline|explicit\u4e4b\u5916\uff0c\u6784\u9020\u51fd\u6570\u4e0d\u5141\u8bb8\u4f7f\u7528\u5176\u5b83\u4efb\u4f55\u5173\u952e\u5b57\u3002</p> <p>\u4e3a\u4ec0\u4e48\u6784\u9020\u51fd\u6570\u4e0d\u53ef\u4ee5\u4e3a\u865a\u51fd\u6570\uff1f</p> <p>\u5c3d\u7ba1\u865a\u51fd\u6570\u8868vtable\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u5c31\u5df2\u7ecf\u5efa\u7acb\u7684\uff0c\u4f46\u6307\u5411\u865a\u51fd\u6570\u8868\u7684\u6307\u9488vptr\u662f\u5728\u8fd0\u884c\u9636\u6bb5\u5b9e\u4f8b\u5316\u5bf9\u8c61\u65f6\u624d\u4ea7\u751f\u7684\u3002 \u5982\u679c\u7c7b\u542b\u6709\u865a\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u5728\u6784\u9020\u51fd\u6570\u4e2d\u6dfb\u52a0\u4ee3\u7801\u6765\u521b\u5efavptr\u3002 \u95ee\u9898\u6765\u4e86\uff0c\u5982\u679c\u6784\u9020\u51fd\u6570\u662f\u865a\u7684\uff0c\u90a3\u4e48\u5b83\u9700\u8981vptr\u6765\u8bbf\u95eevtable\uff0c\u53ef\u8fd9\u4e2a\u65f6\u5019vptr\u8fd8\u6ca1\u4ea7\u751f\u3002 \u56e0\u6b64\uff0c\u6784\u9020\u51fd\u6570\u4e0d\u53ef\u4ee5\u4e3a\u865a\u51fd\u6570\u3002</p> <p>\u6211\u4eec\u4e4b\u6240\u4ee5\u4f7f\u7528\u865a\u51fd\u6570\uff0c\u662f\u56e0\u4e3a\u9700\u8981\u5728\u4fe1\u606f\u4e0d\u5168\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u591a\u6001\u8fd0\u884c\u3002\u800c\u6784\u9020\u51fd\u6570\u662f\u7528\u6765\u521d\u59cb\u5316\u5b9e\u4f8b\u7684\uff0c\u5b9e\u4f8b\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u660e\u786e\u7684\u3002 \u56e0\u6b64\uff0c\u6784\u9020\u51fd\u6570\u6ca1\u6709\u5fc5\u8981\u88ab\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002</p> <p>\u4ee3\u7801\u5b66\u4e60\uff1a</p> <ul> <li> <p>copy_consrtuct.cpp </p> </li> <li> <p>vir_con.cpp </p> </li> </ul> <p>\uff083\uff09\u6790\u6784\u51fd\u6570\u53ef\u4ee5\u4e3a\u865a\u51fd\u6570\u5417\uff1f</p> <p>\u6790\u6784\u51fd\u6570\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002\u5982\u679c\u6211\u4eec\u9700\u8981\u5220\u9664\u4e00\u4e2a\u6307\u5411\u6d3e\u751f\u7c7b\u7684\u57fa\u7c7b\u6307\u9488\u65f6\uff0c\u5e94\u8be5\u628a\u6790\u6784\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u53ea\u8981\u4e00\u4e2a\u7c7b\u6709\u53ef\u80fd\u4f1a\u88ab\u5176\u5b83\u7c7b\u6240\u7ee7\u627f\uff0c \u5c31\u5e94\u8be5\u58f0\u660e\u865a\u6790\u6784\u51fd\u6570(\u54ea\u6015\u8be5\u6790\u6784\u51fd\u6570\u4e0d\u6267\u884c\u4efb\u4f55\u64cd\u4f5c)\u3002</p> <p>\u4ee3\u7801\u5b66\u4e60\uff1a</p> <ul> <li> <p>full_virde.cpp</p> </li> <li> <p>vir_de.cpp  </p> </li> </ul> <p>\uff084\uff09\u865a\u51fd\u6570\u53ef\u4ee5\u4e3a\u79c1\u6709\u51fd\u6570\u5417\uff1f</p> <ul> <li>\u57fa\u7c7b\u6307\u9488\u6307\u5411\u7ee7\u627f\u7c7b\u5bf9\u8c61\uff0c\u5219\u8c03\u7528\u7ee7\u627f\u7c7b\u5bf9\u8c61\u7684\u51fd\u6570\uff1b</li> <li>int main()\u5fc5\u987b\u58f0\u660e\u4e3aBase\u7c7b\u7684\u53cb\u5143\uff0c\u5426\u5219\u7f16\u8bd1\u5931\u8d25\u3002 \u7f16\u8bd1\u5668\u62a5\u9519\uff1a ptr\u65e0\u6cd5\u8bbf\u95ee\u79c1\u6709\u51fd\u6570\u3002 \u5f53\u7136\uff0c\u628a\u57fa\u7c7b\u58f0\u660e\u4e3apublic\uff0c \u7ee7\u627f\u7c7b\u4e3aprivate\uff0c\u8be5\u95ee\u9898\u5c31\u4e0d\u5b58\u5728\u4e86\u3002</li> </ul> <p>\u4ee3\u7801\u5b66\u4e60\uff1a</p> <ul> <li>virtual_function.cpp</li> <li>virtual_function1.cpp</li> </ul> <p>\uff085\uff09\u865a\u51fd\u6570\u53ef\u4ee5\u88ab\u5185\u8054\u5417\uff1f</p> <p>\u901a\u5e38\u7c7b\u6210\u5458\u51fd\u6570\u90fd\u4f1a\u88ab\u7f16\u8bd1\u5668\u8003\u8651\u662f\u5426\u8fdb\u884c\u5185\u8054\u3002 \u4f46\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u6216\u8005\u5f15\u7528\u8c03\u7528\u7684\u865a\u51fd\u6570\u5fc5\u5b9a\u4e0d\u80fd\u88ab\u5185\u8054\u3002 \u5f53\u7136\uff0c\u5b9e\u4f53\u5bf9\u8c61\u8c03\u7528\u865a\u51fd\u6570\u6216\u8005\u9759\u6001\u8c03\u7528\u65f6\u53ef\u4ee5\u88ab\u5185\u8054\uff0c\u865a\u6790\u6784\u51fd\u6570\u7684\u9759\u6001\u8c03\u7528\u4e5f\u4e00\u5b9a\u4f1a\u88ab\u5185\u8054\u5c55\u5f00\u3002</p> <ul> <li>\u865a\u51fd\u6570\u53ef\u4ee5\u662f\u5185\u8054\u51fd\u6570\uff0c\u5185\u8054\u662f\u53ef\u4ee5\u4fee\u9970\u865a\u51fd\u6570\u7684\uff0c\u4f46\u662f\u5f53\u865a\u51fd\u6570\u8868\u73b0\u591a\u6001\u6027\u7684\u65f6\u5019\u4e0d\u80fd\u5185\u8054\u3002</li> <li>\u5185\u8054\u662f\u5728\u7f16\u8bd1\u5668\u5efa\u8bae\u7f16\u8bd1\u5668\u5185\u8054\uff0c\u800c\u865a\u51fd\u6570\u7684\u591a\u6001\u6027\u5728\u8fd0\u884c\u671f\uff0c\u7f16\u8bd1\u5668\u65e0\u6cd5\u77e5\u9053\u8fd0\u884c\u671f\u8c03\u7528\u54ea\u4e2a\u4ee3\u7801\uff0c\u56e0\u6b64\u865a\u51fd\u6570\u8868\u73b0\u4e3a\u591a\u6001\u6027\u65f6\uff08\u8fd0\u884c\u671f\uff09\u4e0d\u53ef\u4ee5\u5185\u8054\u3002</li> <li><code>inline virtual</code> \u552f\u4e00\u53ef\u4ee5\u5185\u8054\u7684\u65f6\u5019\u662f\uff1a\u7f16\u8bd1\u5668\u77e5\u9053\u6240\u8c03\u7528\u7684\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\uff08\u5982 <code>Base::who()</code>\uff09\uff0c\u8fd9\u53ea\u6709\u5728\u7f16\u8bd1\u5668\u5177\u6709\u5b9e\u9645\u5bf9\u8c61\u800c\u4e0d\u662f\u5bf9\u8c61\u7684\u6307\u9488\u6216\u5f15\u7528\u65f6\u624d\u4f1a\u53d1\u751f\u3002</li> </ul> <p>\u4ee3\u7801\u5b66\u4e60\uff1a</p> <ul> <li> <p>virtual_inline.cpp</p> </li> <li> <p>inline_virtual.cpp</p> </li> </ul>"},{"location":"basic_content/virtual/#5rttidynamic_cast","title":"5.RTTI\u4e0edynamic_cast","text":"<p>RTTI\uff08Run-Time Type Identification)\uff0c\u901a\u8fc7\u8fd0\u884c\u65f6\u7c7b\u578b\u4fe1\u606f\u7a0b\u5e8f\u80fd\u591f\u4f7f\u7528\u57fa\u7c7b\u7684\u6307\u9488\u6216\u5f15\u7528\u6765\u68c0\u67e5\u8fd9\u4e9b\u6307\u9488\u6216\u5f15\u7528\u6240\u6307\u7684\u5bf9\u8c61\u7684\u5b9e\u9645\u6d3e\u751f\u7c7b\u578b\u3002</p> <p>\u5728\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u4e2d\uff0c\u6709\u65f6\u6211\u4eec\u9700\u8981\u5728\u8fd0\u884c\u65f6\u67e5\u8be2\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u80fd\u4f5c\u4e3a\u67d0\u79cd\u591a\u6001\u7c7b\u578b\u4f7f\u7528\u3002\u4e0eJava\u7684instanceof\uff0c\u4ee5\u53caC#\u7684as\u3001is\u8fd0\u7b97\u7b26\u7c7b\u4f3c\uff0cC++\u63d0\u4f9b\u4e86dynamic_cast\u51fd\u6570\u7528\u4e8e\u52a8\u6001\u8f6c\u578b\u3002\u76f8\u6bd4C\u98ce\u683c\u7684\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u548cC++ reinterpret_cast\uff0cdynamic_cast\u63d0\u4f9b\u4e86\u7c7b\u578b\u5b89\u5168\u68c0\u67e5\uff0c\u662f\u4e00\u79cd\u57fa\u4e8e\u80fd\u529b\u67e5\u8be2(Capability Query)\u7684\u8f6c\u6362\uff0c\u6240\u4ee5\u5728\u591a\u6001\u7c7b\u578b\u95f4\u8fdb\u884c\u8f6c\u6362\u66f4\u63d0\u5021\u91c7\u7528dynamic_cast\u3002</p> <p>\u4ee3\u7801\u5b66\u4e60\uff1a</p> <ul> <li>rtti.cpp</li> <li>warn_rtti.cpp</li> </ul>"},{"location":"basic_content/virtual/#6","title":"6.\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b","text":"<p>\u89c1\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b\u90a3\u4e9b\u4e8b</p>"},{"location":"basic_content/volatile/","title":"volatile\u90a3\u4e9b\u4e8b","text":""},{"location":"basic_content/volatile/#1volatile","title":"1.volatile","text":"<p>\u88ab <code>volatile</code> \u4fee\u9970\u7684\u53d8\u91cf\uff0c\u5728\u5bf9\u5176\u8fdb\u884c\u8bfb\u5199\u64cd\u4f5c\u65f6\uff0c\u4f1a\u5f15\u53d1\u4e00\u4e9b\u53ef\u89c2\u6d4b\u7684\u526f\u4f5c\u7528\u3002\u800c\u8fd9\u4e9b\u53ef\u89c2\u6d4b\u7684\u526f\u4f5c\u7528\uff0c\u662f\u7531\u7a0b\u5e8f\u4e4b\u5916\u7684\u56e0\u7d20\u51b3\u5b9a\u7684\u3002</p>"},{"location":"basic_content/volatile/#2volatile","title":"2.volatile\u5e94\u7528","text":"<p>\uff081\uff09\u5e76\u884c\u8bbe\u5907\u7684\u786c\u4ef6\u5bc4\u5b58\u5668\uff08\u5982\u72b6\u6001\u5bc4\u5b58\u5668\uff09\u3002 \u5047\u8bbe\u8981\u5bf9\u4e00\u4e2a\u8bbe\u5907\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u6b64\u8bbe\u5907\u7684\u67d0\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e3a0xff800000\u3002</p> <pre><code>int  *output = (unsigned  int *)0xff800000; //\u5b9a\u4e49\u4e00\u4e2aIO\u7aef\u53e3\uff1b  \nint   init(void)  {  int i;  for(i=0;i&lt; 10;i++)\n{  *output = i;  }  }\n</code></pre> <p>\u7ecf\u8fc7\u7f16\u8bd1\u5668\u4f18\u5316\u540e\uff0c\u7f16\u8bd1\u5668\u8ba4\u4e3a\u524d\u9762\u5faa\u73af\u534a\u5929\u90fd\u662f\u5e9f\u8bdd\uff0c\u5bf9\u6700\u540e\u7684\u7ed3\u679c\u6beb\u65e0\u5f71\u54cd\uff0c\u56e0\u4e3a\u6700\u7ec8\u53ea\u662f\u5c06output\u8fd9\u4e2a\u6307\u9488\u8d4b\u503c\u4e3a 9\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u6700\u540e\u7ed9\u4f60\u7f16\u8bd1\u7f16\u8bd1\u7684\u4ee3\u7801\u7ed3\u679c\u76f8\u5f53\u4e8e\uff1a</p> <pre><code>int  init(void)  {  *output = 9;  }\n</code></pre> <p>\u5982\u679c\u4f60\u5bf9\u6b64\u5916\u90e8\u8bbe\u5907\u8fdb\u884c\u521d\u59cb\u5316\u7684\u8fc7\u7a0b\u662f\u5fc5\u987b\u662f\u50cf\u4e0a\u9762\u4ee3\u7801\u4e00\u6837\u987a\u5e8f\u7684\u5bf9\u5176\u8d4b\u503c\uff0c\u663e\u7136\u4f18\u5316\u8fc7\u7a0b\u5e76\u4e0d\u80fd\u8fbe\u5230\u76ee\u7684\u3002\u53cd\u4e4b\u5982\u679c\u4f60\u4e0d\u662f\u5bf9\u6b64\u7aef\u53e3\u53cd\u590d\u5199\u64cd\u4f5c\uff0c\u800c\u662f\u53cd\u590d\u8bfb\u64cd\u4f5c\uff0c\u5176\u7ed3\u679c\u662f\u4e00\u6837\u7684\uff0c\u7f16\u8bd1\u5668\u5728\u4f18\u5316\u540e\uff0c\u4e5f\u8bb8\u4f60\u7684\u4ee3\u7801\u5bf9\u6b64\u5730\u5740\u7684\u8bfb\u64cd\u4f5c\u53ea\u505a\u4e86\u4e00\u6b21\u3002\u7136\u800c\u4ece\u4ee3\u7801\u89d2\u5ea6\u770b\u662f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u7684\u3002\u8fd9\u65f6\u5019\u5c31\u8be5\u4f7f\u7528volatile\u901a\u77e5\u7f16\u8bd1\u5668\u8fd9\u4e2a\u53d8\u91cf\u662f\u4e00\u4e2a\u4e0d\u7a33\u5b9a\u7684\uff0c\u5728\u9047\u5230\u6b64\u53d8\u91cf\u65f6\u5019\u4e0d\u8981\u4f18\u5316\u3002</p> <p>\uff082\uff09\u4e00\u4e2a\u4e2d\u65ad\u670d\u52a1\u5b50\u7a0b\u5e8f\u4e2d\u8bbf\u95ee\u5230\u7684\u53d8\u91cf\uff1b</p> <pre><code>static int i=0;\n\nint main()\n{\nwhile(1)\n{\nif(i) dosomething();\n}\n}\n\n/* Interrupt service routine */\nvoid IRS()\n{\ni=1;\n}\n</code></pre> <p>\u4e0a\u9762\u793a\u4f8b\u7a0b\u5e8f\u7684\u672c\u610f\u662f\u4ea7\u751f\u4e2d\u65ad\u65f6\uff0c\u7531\u4e2d\u65ad\u670d\u52a1\u5b50\u7a0b\u5e8fIRS\u54cd\u5e94\u4e2d\u65ad\uff0c\u53d8\u66f4\u7a0b\u5e8f\u53d8\u91cfi\uff0c\u4f7f\u5728main\u51fd\u6570\u4e2d\u8c03\u7528dosomething\u51fd\u6570\uff0c\u4f46\u662f\uff0c\u7531\u4e8e\u7f16\u8bd1\u5668\u5224\u65ad\u5728main\u51fd\u6570\u91cc\u9762\u6ca1\u6709\u4fee\u6539\u8fc7i\uff0c\u56e0\u6b64\u53ef\u80fd\u53ea\u6267\u884c\u4e00\u6b21\u5bf9\u4ecei\u5230\u67d0\u5bc4\u5b58\u5668\u7684\u8bfb\u64cd\u4f5c\uff0c\u7136\u540e\u6bcf\u6b21if\u5224\u65ad\u90fd\u53ea\u4f7f\u7528\u8fd9\u4e2a\u5bc4\u5b58\u5668\u91cc\u9762\u7684\u201ci\u526f\u672c\u201d\uff0c\u5bfc\u81f4dosomething\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u8c03\u7528\u3002\u5982\u679c\u5c06\u53d8\u91cfi\u52a0\u4e0avolatile\u4fee\u9970\uff0c\u5219\u7f16\u8bd1\u5668\u4fdd\u8bc1\u5bf9\u53d8\u91cfi\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u4e0d\u4f1a\u88ab\u4f18\u5316\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u53d8\u91cfi\u88ab\u5916\u90e8\u7a0b\u5e8f\u66f4\u6539\u540e\u80fd\u53ca\u65f6\u5728\u539f\u7a0b\u5e8f\u4e2d\u5f97\u5230\u611f\u77e5\u3002</p> <p>\uff083\uff09\u591a\u7ebf\u7a0b\u5e94\u7528\u4e2d\u88ab\u591a\u4e2a\u4efb\u52a1\u5171\u4eab\u7684\u53d8\u91cf\u3002 \u5f53\u591a\u4e2a\u7ebf\u7a0b\u5171\u4eab\u67d0\u4e00\u4e2a\u53d8\u91cf\u65f6\uff0c\u8be5\u53d8\u91cf\u7684\u503c\u4f1a\u88ab\u67d0\u4e00\u4e2a\u7ebf\u7a0b\u66f4\u6539\uff0c\u5e94\u8be5\u7528 volatile \u58f0\u660e\u3002\u4f5c\u7528\u662f\u9632\u6b62\u7f16\u8bd1\u5668\u4f18\u5316\u628a\u53d8\u91cf\u4ece\u5185\u5b58\u88c5\u5165CPU\u5bc4\u5b58\u5668\u4e2d\uff0c\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u66f4\u6539\u53d8\u91cf\u540e\uff0c\u672a\u53ca\u65f6\u540c\u6b65\u5230\u5176\u5b83\u7ebf\u7a0b\u4e2d\u5bfc\u81f4\u7a0b\u5e8f\u51fa\u9519\u3002volatile\u7684\u610f\u601d\u662f\u8ba9\u7f16\u8bd1\u5668\u6bcf\u6b21\u64cd\u4f5c\u8be5\u53d8\u91cf\u65f6\u4e00\u5b9a\u8981\u4ece\u5185\u5b58\u4e2d\u771f\u6b63\u53d6\u51fa\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5df2\u7ecf\u5b58\u5728\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u3002\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>volatile  bool bStop=false;  //bStop \u4e3a\u5171\u4eab\u5168\u5c40\u53d8\u91cf  \n//\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\nvoid threadFunc1()\n{\n...\nwhile(!bStop){...}\n}\n//\u7b2c\u4e8c\u4e2a\u7ebf\u7a0b\u7ec8\u6b62\u4e0a\u9762\u7684\u7ebf\u7a0b\u5faa\u73af\nvoid threadFunc2()\n{\n...\nbStop = true;\n}\n</code></pre> <p>\u8981\u60f3\u901a\u8fc7\u7b2c\u4e8c\u4e2a\u7ebf\u7a0b\u7ec8\u6b62\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u5faa\u73af\uff0c\u5982\u679cbStop\u4e0d\u4f7f\u7528volatile\u5b9a\u4e49\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5faa\u73af\u5c06\u662f\u4e00\u4e2a\u6b7b\u5faa\u73af\uff0c\u56e0\u4e3abStop\u5df2\u7ecf\u8bfb\u53d6\u5230\u4e86\u5bc4\u5b58\u5668\u4e2d\uff0c\u5bc4\u5b58\u5668\u4e2dbStop\u7684\u503c\u6c38\u8fdc\u4e0d\u4f1a\u53d8\u6210FALSE\uff0c\u52a0\u4e0avolatile\uff0c\u7a0b\u5e8f\u5728\u6267\u884c\u65f6\uff0c\u6bcf\u6b21\u5747\u4ece\u5185\u5b58\u4e2d\u8bfb\u51fabStop\u7684\u503c\uff0c\u5c31\u4e0d\u4f1a\u6b7b\u5faa\u73af\u4e86\u3002</p> <p>\u662f\u5426\u4e86\u89e3volatile\u7684\u5e94\u7528\u573a\u666f\u662f\u533a\u5206C/C++\u7a0b\u5e8f\u5458\u548c\u5d4c\u5165\u5f0f\u5f00\u53d1\u7a0b\u5e8f\u5458\u7684\u6709\u6548\u529e\u6cd5\uff0c\u641e\u5d4c\u5165\u5f0f\u7684\u5bb6\u4f19\u4eec\u7ecf\u5e38\u540c\u786c\u4ef6\u3001\u4e2d\u65ad\u3001RTOS\u7b49\u7b49\u6253\u4ea4\u9053\uff0c\u8fd9\u4e9b\u90fd\u8981\u6c42\u7528\u5230volatile\u53d8\u91cf\uff0c\u4e0d\u61c2\u5f97volatile\u5c06\u4f1a\u5e26\u6765\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u707e\u96be\u3002</p>"},{"location":"basic_content/volatile/#3volatile","title":"3.volatile\u5e38\u89c1\u95ee\u9898","text":"<p>\u4e0b\u9762\u7684\u95ee\u9898\u53ef\u4ee5\u770b\u4e00\u4e0b\u9762\u8bd5\u8005\u662f\u4e0d\u662f\u76f4\u6b63\u4e86\u89e3volatile\u3002 \uff081\uff09\u4e00\u4e2a\u53c2\u6570\u65e2\u53ef\u4ee5\u662fconst\u8fd8\u53ef\u4ee5\u662fvolatile\u5417\uff1f\u4e3a\u4ec0\u4e48\uff1f \u53ef\u4ee5\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u53ea\u8bfb\u7684\u72b6\u6001\u5bc4\u5b58\u5668\u3002\u5b83\u662fvolatile\u56e0\u4e3a\u5b83\u53ef\u80fd\u88ab\u610f\u60f3\u4e0d\u5230\u5730\u6539\u53d8\u3002\u5b83\u662fconst\u56e0\u4e3a\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u8bd5\u56fe\u53bb\u4fee\u6539\u5b83\u3002</p> <p>\uff082\uff09\u4e00\u4e2a\u6307\u9488\u53ef\u4ee5\u662fvolatile\u5417\uff1f\u4e3a\u4ec0\u4e48\uff1f \u53ef\u4ee5\u3002\u5c3d\u7ba1\u8fd9\u5e76\u4e0d\u5e38\u89c1\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u5f53\u4e00\u4e2a\u4e2d\u65ad\u670d\u52a1\u5b50\u7a0b\u5e8f\u4fee\u8be5\u4e00\u4e2a\u6307\u5411\u4e00\u4e2abuffer\u7684\u6307\u9488\u65f6\u3002</p> <p>\uff083\uff09\u4e0b\u9762\u7684\u51fd\u6570\u6709\u4ec0\u4e48\u9519\u8bef\uff1f</p> <pre><code>int square(volatile int *ptr) { return *ptr * *ptr; } </code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u6709\u70b9\u53d8\u6001\uff0c\u5176\u76ee\u7684\u662f\u7528\u6765\u8fd4\u56de\u6307\u9488ptr\u6307\u5411\u503c\u7684\u5e73\u65b9\uff0c\u4f46\u662f\uff0c\u7531\u4e8eptr\u6307\u5411\u4e00\u4e2avolatile\u578b\u53c2\u6570\uff0c\u7f16\u8bd1\u5668\u5c06\u4ea7\u751f\u7c7b\u4f3c\u4e0b\u9762\u7684\u4ee3\u7801\uff1a</p> <pre><code>int square(volatile int *ptr) { int a,b; a = *ptr; b = *ptr; return a * b; } </code></pre> <p>\u7531\u4e8e*ptr\u7684\u503c\u53ef\u80fd\u88ab\u610f\u60f3\u4e0d\u5230\u5730\u6539\u53d8\uff0c\u56e0\u6b64a\u548cb\u53ef\u80fd\u662f\u4e0d\u540c\u7684\u3002\u7ed3\u679c\uff0c\u8fd9\u6bb5\u4ee3\u7801\u53ef\u80fd\u8fd4\u56de\u7684\u4e0d\u662f\u4f60\u6240\u671f\u671b\u7684\u5e73\u65b9\u503c\uff01\u6b63\u786e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>long square(volatile int *ptr) { int a=*ptr; return a * a; } </code></pre>"},{"location":"basic_content/volatile/#4volatile","title":"4.volatile\u4f7f\u7528","text":"<ul> <li> <p>volatile \u5173\u952e\u5b57\u662f\u4e00\u79cd\u7c7b\u578b\u4fee\u9970\u7b26\uff0c\u7528\u5b83\u58f0\u660e\u7684\u7c7b\u578b\u53d8\u91cf\u8868\u793a\u53ef\u4ee5\u88ab\u67d0\u4e9b\u7f16\u8bd1\u5668\u672a\u77e5\u7684\u56e0\u7d20\uff08\u64cd\u4f5c\u7cfb\u7edf\u3001\u786c\u4ef6\u3001\u5176\u5b83\u7ebf\u7a0b\u7b49\uff09\u66f4\u6539\u3002\u6240\u4ee5\u4f7f\u7528 volatile \u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u5e94\u5bf9\u8fd9\u6837\u7684\u5bf9\u8c61\u8fdb\u884c\u4f18\u5316\u3002</p> </li> <li> <p>volatile \u5173\u952e\u5b57\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u6bcf\u6b21\u8bbf\u95ee\u65f6\u90fd\u5fc5\u987b\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u503c\uff08\u6ca1\u6709\u88ab volatile \u4fee\u9970\u7684\u53d8\u91cf\uff0c\u53ef\u80fd\u7531\u4e8e\u7f16\u8bd1\u5668\u7684\u4f18\u5316\uff0c\u4ece CPU \u5bc4\u5b58\u5668\u4e2d\u53d6\u503c\uff09</p> </li> <li>const \u53ef\u4ee5\u662f volatile \uff08\u5982\u53ea\u8bfb\u7684\u72b6\u6001\u5bc4\u5b58\u5668\uff09</li> <li>\u6307\u9488\u53ef\u4ee5\u662f volatile</li> </ul> <p>\u4ee3\u7801\u5b66\u4e60\uff1a</p> <ul> <li>noopt_vola.cpp</li> <li>volatile.cpp</li> </ul>"},{"location":"basic_content/vptr_vtable/","title":"\u6df1\u5165\u6d45\u51faC++\u865a\u51fd\u6570\u7684vptr\u4e0evtable","text":""},{"location":"basic_content/vptr_vtable/#1","title":"1.\u57fa\u7840\u7406\u8bba","text":"<p>\u4e3a\u4e86\u5b9e\u73b0\u865a\u51fd\u6570\uff0cC ++\u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a\u865a\u62df\u8868\u7684\u7279\u6b8a\u5f62\u5f0f\u7684\u540e\u671f\u7ed1\u5b9a\u3002\u8be5\u865a\u62df\u8868\u662f\u7528\u4e8e\u89e3\u51b3\u5728\u52a8\u6001/\u540e\u671f\u7ed1\u5b9a\u65b9\u5f0f\u7684\u51fd\u6570\u8c03\u7528\u51fd\u6570\u7684\u67e5\u627e\u8868\u3002\u865a\u62df\u8868\u6709\u65f6\u4f1a\u4f7f\u7528\u5176\u4ed6\u540d\u79f0\uff0c\u4f8b\u5982\u201cvtable\u201d\uff0c\u201c\u865a\u51fd\u6570\u8868\u201d\uff0c\u201c\u865a\u65b9\u6cd5\u8868\u201d\u6216\u201c\u8c03\u5ea6\u8868\u201d\u3002</p> <p>\u865a\u62df\u8868\u5b9e\u9645\u4e0a\u975e\u5e38\u7b80\u5355\uff0c\u867d\u7136\u7528\u6587\u5b57\u63cf\u8ff0\u6709\u70b9\u590d\u6742\u3002\u9996\u5148\uff0c\u6bcf\u4e2a\u4f7f\u7528\u865a\u51fd\u6570\u7684\u7c7b\uff08\u6216\u8005\u4ece\u4f7f\u7528\u865a\u51fd\u6570\u7684\u7c7b\u6d3e\u751f\uff09\u90fd\u6709\u81ea\u5df1\u7684\u865a\u62df\u8868\u3002\u8be5\u8868\u53ea\u662f\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u8bbe\u7f6e\u7684\u9759\u6001\u6570\u7ec4\u3002\u865a\u62df\u8868\u5305\u542b\u53ef\u7531\u7c7b\u7684\u5bf9\u8c61\u8c03\u7528\u7684\u6bcf\u4e2a\u865a\u51fd\u6570\u7684\u4e00\u4e2a\u6761\u76ee\u3002\u6b64\u8868\u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\u53ea\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u6307\u5411\u8be5\u7c7b\u53ef\u8bbf\u95ee\u7684\u6d3e\u751f\u51fd\u6570\u3002</p> <p>\u5176\u6b21\uff0c\u7f16\u8bd1\u5668\u8fd8\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u9690\u85cf\u6307\u5411\u57fa\u7c7b\u7684\u6307\u9488\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3avptr\u3002vptr\u5728\u521b\u5efa\u7c7b\u5b9e\u4f8b\u65f6\u81ea\u52a8\u8bbe\u7f6e\uff0c\u4ee5\u4fbf\u6307\u5411\u8be5\u7c7b\u7684\u865a\u62df\u8868\u3002\u4e0ethis\u6307\u9488\u4e0d\u540c\uff0cthis\u6307\u9488\u5b9e\u9645\u4e0a\u662f\u7f16\u8bd1\u5668\u7528\u6765\u89e3\u6790\u81ea\u5f15\u7528\u7684\u51fd\u6570\u53c2\u6570\uff0cvptr\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u6307\u9488\u3002</p> <p>\u56e0\u6b64\uff0c\u5b83\u4f7f\u6bcf\u4e2a\u7c7b\u5bf9\u8c61\u7684\u5206\u914d\u5927\u4e00\u4e2a\u6307\u9488\u7684\u5927\u5c0f\u3002\u8fd9\u4e5f\u610f\u5473\u7740vptr\u7531\u6d3e\u751f\u7c7b\u7ee7\u627f\uff0c\u8fd9\u5f88\u91cd\u8981\u3002</p>"},{"location":"basic_content/vptr_vtable/#2","title":"2.\u5b9e\u73b0\u4e0e\u5185\u90e8\u7ed3\u6784","text":"<p>\u4e0b\u9762\u6211\u4eec\u6765\u770b\u81ea\u52a8\u4e0e\u624b\u52a8\u64cd\u7eb5vptr\u6765\u83b7\u53d6\u5730\u5740\u4e0e\u8c03\u7528\u865a\u51fd\u6570\uff01</p> <p>\u5f00\u59cb\u770b\u4ee3\u7801\u4e4b\u524d\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u7406\u89e3\uff0c\u8fd9\u91cc\u7ed9\u51fa\u8c03\u7528\u56fe\uff1a</p> <p></p> <p>\u4ee3\u7801\u5168\u90e8\u9075\u5faa\u6807\u51c6\u7684\u6ce8\u91ca\u98ce\u683c\uff0c\u76f8\u4fe1\u5927\u5bb6\u770b\u4e86\u5c31\u4f1a\u660e\u767d\uff0c\u4e0d\u660e\u767d\u7684\u8bdd\uff0c\u53ef\u4ee5\u7559\u8a00\uff01</p> <pre><code>/**\n * @file vptr1.cpp\n * @brief C++\u865a\u51fd\u6570vptr\u548cvtable\n * \u7f16\u8bd1\uff1ag++ -g -o vptr vptr1.cpp -std=c++11\n * @author \u5149\u57ce\n * @version v1\n * @date 2019-07-20\n */\n\n#include &lt;iostream&gt;\n#include &lt;stdio.h&gt;\nusing namespace std;\n\n/**\n * @brief \u51fd\u6570\u6307\u9488\n */\ntypedef void (*Fun)();\n\n/**\n * @brief \u57fa\u7c7b\n */\nclass Base\n{\npublic:\nBase(){};\nvirtual void fun1()\n{\ncout &lt;&lt; \"Base::fun1()\" &lt;&lt; endl;\n}\nvirtual void fun2()\n{\ncout &lt;&lt; \"Base::fun2()\" &lt;&lt; endl;\n}\nvirtual void fun3(){}\n~Base(){};\n};\n\n/**\n * @brief \u6d3e\u751f\u7c7b\n */\nclass Derived: public Base\n{\npublic:\nDerived(){};\nvoid fun1()\n{\ncout &lt;&lt; \"Derived::fun1()\" &lt;&lt; endl;\n}\nvoid fun2()\n{\ncout &lt;&lt; \"DerivedClass::fun2()\" &lt;&lt; endl;\n}\n~Derived(){};\n};\n/**\n * @brief \u83b7\u53d6vptr\u5730\u5740\u4e0efunc\u5730\u5740,vptr\u6307\u5411\u7684\u662f\u4e00\u5757\u5185\u5b58\uff0c\u8fd9\u5757\u5185\u5b58\u5b58\u653e\u7684\u662f\u865a\u51fd\u6570\u5730\u5740\uff0c\u8fd9\u5757\u5185\u5b58\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u865a\u8868\n *\n * @param obj\n * @param offset\n *\n * @return \n */\nFun getAddr(void* obj,unsigned int offset)\n{\ncout&lt;&lt;\"=======================\"&lt;&lt;endl;\nvoid* vptr_addr = (void *)*(unsigned long *)obj;  //64\u4f4d\u64cd\u4f5c\u7cfb\u7edf\uff0c\u53608\u5b57\u8282\uff0c\u901a\u8fc7*(unsigned long *)obj\u53d6\u51fa\u524d8\u5b57\u8282\uff0c\u5373vptr\u6307\u9488\nprintf(\"vptr_addr:%p\\n\",vptr_addr);\n\n/**\n     * @brief \u901a\u8fc7vptr\u6307\u9488\u8bbf\u95eevirtual table\uff0c\u56e0\u4e3a\u865a\u8868\u4e2d\u6bcf\u4e2a\u5143\u7d20(\u865a\u51fd\u6570\u6307\u9488)\u572864\u4f4d\u7f16\u8bd1\u5668\u4e0b\u662f8\u4e2a\u5b57\u8282\uff0c\u56e0\u6b64\u901a\u8fc7*(unsigned long *)vptr_addr\u53d6\u51fa\u524d8\u5b57\u8282\uff0c\n     * \u540e\u9762\u52a0\u4e0a\u504f\u79fb\u91cf\u5c31\u662f\u6bcf\u4e2a\u51fd\u6570\u7684\u5730\u5740\uff01\n     */\nvoid* func_addr = (void *)*((unsigned long *)vptr_addr+offset);\nprintf(\"func_addr:%p\\n\",func_addr);\nreturn (Fun)func_addr;\n}\nint main(void)\n{\nBase ptr;\nDerived d;\nBase *pt = new Derived(); // \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\nBase &amp;pp = ptr; // \u57fa\u7c7b\u5f15\u7528\u6307\u5411\u57fa\u7c7b\u5b9e\u4f8b\nBase &amp;p = d; // \u57fa\u7c7b\u5f15\u7528\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\ncout&lt;&lt;\"\u57fa\u7c7b\u5bf9\u8c61\u76f4\u63a5\u8c03\u7528\"&lt;&lt;endl;\nptr.fun1();\ncout&lt;&lt;\"\u57fa\u7c7b\u5bf9\u8c61\u8c03\u7528\u57fa\u7c7b\u5b9e\u4f8b\"&lt;&lt;endl;\npp.fun1(); cout&lt;&lt;\"\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570\"&lt;&lt;endl;\npt-&gt;fun1();\ncout&lt;&lt;\"\u57fa\u7c7b\u5f15\u7528\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570\"&lt;&lt;endl;\np.fun1();\n\n// \u624b\u52a8\u67e5\u627evptr \u548c vtable\nFun f1 = getAddr(pt, 0);\n(*f1)();\nFun f2 = getAddr(pt, 1);\n(*f2)();\ndelete pt;\nreturn 0;\n}\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\uff1a</p> <pre><code>\u57fa\u7c7b\u5bf9\u8c61\u76f4\u63a5\u8c03\u7528\nBase::fun1()\n\u57fa\u7c7b\u5f15\u7528\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\nBase::fun1()\n\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570\nDerived::fun1()\n\u57fa\u7c7b\u5f15\u7528\u6307\u5411\u57fa\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570\nDerived::fun1()\n=======================\nvptr_addr:0x401130\nfunc_addr:0x400ea8\nDerived::fun1()\n=======================\nvptr_addr:0x401130\nfunc_addr:0x400ed4\nDerivedClass::fun2()\n</code></pre> <p>\u6211\u4eec\u53d1\u73b0C++\u7684\u52a8\u6001\u591a\u6001\u6027\u662f\u901a\u8fc7\u865a\u51fd\u6570\u6765\u5b9e\u73b0\u7684\u3002\u7b80\u5355\u7684\u8bf4\uff0c\u901a\u8fc7virtual\u51fd\u6570\uff0c\u6307\u5411\u5b50\u7c7b\u7684\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u8c03\u7528\u5b50\u7c7b\u7684\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u4e0a\u8ff0\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\uff0c\u5e76\u8c03\u7528\u865a\u51fd\u6570\uff0c\u5c06\u4e0a\u8ff0\u4ee3\u7801\u7b80\u5316\u4e3a\uff1a</p> <pre><code>Base *pt = new Derived(); // \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\ncout&lt;&lt;\"\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570\"&lt;&lt;endl;\npt-&gt;fun1();\n</code></pre> <p>\u5176\u8fc7\u7a0b\u4e3a\uff1a\u9996\u5148\u7a0b\u5e8f\u8bc6\u522b\u51fafun1()\u662f\u4e2a\u865a\u51fd\u6570\uff0c\u5176\u6b21\u7a0b\u5e8f\u4f7f\u7528pt-&gt;vptr\u6765\u83b7\u53d6Derived\u7684\u865a\u62df\u8868\u3002\u7b2c\u4e09\uff0c\u5b83\u67e5\u627eDerived\u865a\u62df\u8868\u4e2d\u8c03\u7528\u54ea\u4e2a\u7248\u672c\u7684fun1()\u3002\u8fd9\u91cc\u5c31\u53ef\u4ee5\u53d1\u73b0\u8c03\u7528\u7684\u662fDerived::fun1()\u3002\u56e0\u6b64pt-&gt;fun1()\u88ab\u89e3\u6790\u4e3aDerived::fun1()!</p> <p>\u9664\u6b64\u4e4b\u5916\uff0c\u4e0a\u8ff0\u4ee3\u7801\u5927\u5bb6\u4f1a\u770b\u5230\uff0c\u4e5f\u5305\u542b\u4e86\u624b\u52a8\u83b7\u53d6vptr\u5730\u5740\uff0c\u5e76\u8c03\u7528vtable\u4e2d\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u8d77\u6765\u9a8c\u8bc1\u4e00\u4e0b\u4e0a\u8ff0\u7684\u5730\u5740\u4e0e\u771f\u6b63\u5728\u81ea\u52a8\u8c03\u7528vtable\u4e2d\u7684\u865a\u51fd\u6570\uff0c\u6bd4\u5982\u4e0a\u8ff0<code>pt-&gt;fun1()</code>\u7684\u65f6\u5019\uff0c\u662f\u5426\u4e00\u81f4\uff01</p> <p>\u8fd9\u91cc\u91c7\u7528gdb\u8c03\u8bd5\uff0c\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u8bb0\u5f97\u52a0\u4e0a<code>-g</code>\u3002</p> <p>\u901a\u8fc7<code>gdb vptr</code>\u8fdb\u5165gdb\u8c03\u8bd5\u9875\u9762\uff0c\u7136\u540e\u8f93\u5165<code>b Derived::fun1</code>\u5bf9fun1\u6253\u65ad\u70b9\uff0c\u7136\u540e\u901a\u8fc7\u8f93\u5165r\u8fd0\u884c\u7a0b\u5e8f\u5230\u65ad\u70b9\u5904\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u67e5\u770b\u8c03\u7528\u6808\u4e2d\u7684\u5185\u5b58\u5730\u5740\uff0c\u901a\u8fc7<code>disassemable fun1</code>\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u6709\u5173fun1\u4e2d\u7684\u76f8\u5173\u6c47\u7f16\u4ee3\u7801\uff0c\u6211\u4eec\u770b\u5230\u4e86<code>0x0000000000400ea8</code>\uff0c\u7136\u540e\u518d\u5bf9\u6bd4\u4e0a\u8ff0\u7684\u7ed3\u679c\u4f1a\u53d1\u73b0\u4e0e\u624b\u52a8\u8c03\u7528\u7684fun1\u4e00\u81f4\uff0cfun2\u7c7b\u4f3c\uff0c\u4ee5\u6b64\u8bc1\u660e\u4ee3\u7801\u6b63\u786e!</p> <p>gdb\u8c03\u8bd5\u4fe1\u606f\u5982\u4e0b\uff1a</p> <pre><code>(gdb) b Derived::fun1\nBreakpoint 1 at 0x400eb4: file vptr1.cpp, line 23.\n(gdb) r\nStarting program: /home/light/Program/CPlusPlusThings/virtual/pure_virtualAndabstract_class/vptr \u57fa\u7c7b\u5bf9\u8c61\u76f4\u63a5\u8c03\u7528\nBase::fun1()\n\u57fa\u7c7b\u5f15\u7528\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\nBase::fun1()\n\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u7c7b\u5b9e\u4f8b\u5e76\u8c03\u7528\u865a\u51fd\u6570\n\nBreakpoint 1, Derived::fun1 (this=0x614c20) at vptr1.cpp:23\n23              cout &lt;&lt; \"Derived::fun1()\" &lt;&lt; endl;\n(gdb) disassemble fun1\nDump of assembler code for function Derived::fun1():\n0x0000000000400ea8 &lt;+0&gt;: push   %rbp\n0x0000000000400ea9 &lt;+1&gt;: mov    %rsp,%rbp\n0x0000000000400eac &lt;+4&gt;: sub    $0x10,%rsp\n0x0000000000400eb0 &lt;+8&gt;: mov    %rdi,-0x8(%rbp)\n=&gt; 0x0000000000400eb4 &lt;+12&gt;:    mov    $0x401013,%esi\n0x0000000000400eb9 &lt;+17&gt;:    mov    $0x602100,%edi\n0x0000000000400ebe &lt;+22&gt;:    callq  0x4009d0 &lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&gt;\n0x0000000000400ec3 &lt;+27&gt;:    mov    $0x400a00,%esi\n0x0000000000400ec8 &lt;+32&gt;:    mov    %rax,%rdi\n0x0000000000400ecb &lt;+35&gt;:    callq  0x4009f0 &lt;_ZNSolsEPFRSoS_E@plt&gt;\n0x0000000000400ed0 &lt;+40&gt;:    nop\n0x0000000000400ed1 &lt;+41&gt;:    leaveq 0x0000000000400ed2 &lt;+42&gt;:    retq   End of assembler dump.\n(gdb) disassemble fun2\nDump of assembler code for function Derived::fun2():\n0x0000000000400ed4 &lt;+0&gt;: push   %rbp\n0x0000000000400ed5 &lt;+1&gt;: mov    %rsp,%rbp\n0x0000000000400ed8 &lt;+4&gt;: sub    $0x10,%rsp\n0x0000000000400edc &lt;+8&gt;: mov    %rdi,-0x8(%rbp)\n0x0000000000400ee0 &lt;+12&gt;:    mov    $0x401023,%esi\n0x0000000000400ee5 &lt;+17&gt;:    mov    $0x602100,%edi\n0x0000000000400eea &lt;+22&gt;:    callq  0x4009d0 &lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&gt;\n0x0000000000400eef &lt;+27&gt;:    mov    $0x400a00,%esi\n0x0000000000400ef4 &lt;+32&gt;:    mov    %rax,%rdi\n0x0000000000400ef7 &lt;+35&gt;:    callq  0x4009f0 &lt;_ZNSolsEPFRSoS_E@plt&gt;\n0x0000000000400efc &lt;+40&gt;:    nop\n0x0000000000400efd &lt;+41&gt;:    leaveq 0x0000000000400efe &lt;+42&gt;:    retq   End of assembler dump.\n</code></pre>"},{"location":"c%2B%2B2.0/c%2B%2B11/c%2B%2B11/","title":"C++11\u65b0\u7279\u6027","text":"<ul> <li> <p>Variadic Templates</p> </li> <li> <p>Spaces in Template Expressions</p> </li> </ul> <pre><code>vector&lt;list&lt;int&gt; &gt; //ok in each C++ version\nvector&lt;list&lt;int&gt;&gt; // before c++ 11 error error: \u2018&gt;&gt;\u2019 should be \u2018&gt; &gt;\u2019 within a nested template argument list,c++11\u540e\u53ef\u4ee5\u6b63\u5e38\u901a\u8fc7\n</code></pre> <ul> <li>nullptr and nullptr_t</li> <li>Automatic Type Deduction with auto</li> <li>Uniform Initialization </li> <li>initializer_list</li> <li>explicit for ctors taking more than one argument</li> <li>range-based for statement</li> </ul> <pre><code>for(decl:col) {\nstatement\n}\n</code></pre> <ul> <li>=default,=delete</li> </ul> <p>\u5982\u679c\u4f60\u81ea\u884c\u5b9a\u4e49\u4e86\u4e00\u4e2actor,\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u4e0d\u4f1a\u7ed9\u4f60\u4e00\u4e2adefault ctor   \u5982\u679c\u5f3a\u5236\u52a0\u4e0a=default,\u5c31\u53ef\u4ee5\u91cd\u65b0\u83b7\u5f97\u5e76\u4f7f\u7528default ctor.</p> <ul> <li> <p>Alias(\u5316\u540d)Template(template typedef)</p> </li> <li> <p>alias.cpp </p> </li> <li> <p>template_template.cpp</p> </li> <li> <p>template template parameter</p> </li> <li> <p>type alias</p> </li> <li> <p>noexcept</p> </li> <li> <p>override</p> </li> <li> <p>final</p> </li> <li> <p>decltype</p> </li> <li> <p>lambda</p> </li> <li> <p>Rvalue reference</p> </li> <li> <p>move aware class</p> </li> <li> <p>\u5bb9\u5668-\u7ed3\u6784\u4e0e\u5206\u7c7b</p> </li> <li> <p>(1) \u5e8f\u5217\u5f0f\u5bb9\u5668\u5305\u62ec\uff1aarray(C++2.0\u65b0\u5f15\u5165),vector,deque,list,forward_list(C++2.0\u65b0\u5f15\u5165)</p> </li> <li>(2) \u5173\u8054\u5f0f\u5bb9\u5668\u5305\u62ec\uff1aset/multiset,map/multimap</li> <li> <p>(3) \u65e0\u5e8f\u5bb9\u5668(C++2.0\u65b0\u5f15\u5165,\u66f4\u6362\u539f\u5148hash_xxx\u4e3aunordered_xxx)\u5305\u62ec\uff1aunordered_map/unordered_multimap,unordered_set/unordered_multiset</p> </li> <li> <p>Hash Function</p> </li> <li> <p>tuple</p> </li> </ul> <p>\u5b66\u4e60\u8d44\u6599\uff1ahttps://www.bilibili.com/video/av51863195?from=search&amp;seid=3610634846288253061</p>"},{"location":"codingStyleIdioms/RAII/","title":"C++\u60ef\u7528\u6cd5\u4e4b\u6d88\u9664\u5783\u573e\u6536\u96c6\u5668-\u8d44\u6e90\u83b7\u53d6\u5373\u521d\u59cb\u5316\u65b9\u6cd5(RAII)","text":""},{"location":"codingStyleIdioms/RAII/#0","title":"0.\u5bfc\u8bed","text":"<p>\u5728C\u8bed\u8a00\u4e2d\uff0c\u6709\u4e09\u79cd\u7c7b\u578b\u7684\u5185\u5b58\u5206\u914d:\u9759\u6001\u3001\u81ea\u52a8\u548c\u52a8\u6001\u3002\u9759\u6001\u53d8\u91cf\u662f\u5d4c\u5165\u5728\u6e90\u6587\u4ef6\u4e2d\u7684\u5e38\u6570\uff0c\u56e0\u4e3a\u5b83\u4eec\u6709\u5df2\u77e5\u7684\u5927\u5c0f\u5e76\u4e14\u4ece\u4e0d\u6539\u53d8\uff0c\u6240\u4ee5\u5b83\u4eec\u5e76\u4e0d\u90a3\u4e48\u6709\u8da3\u3002\u81ea\u52a8\u5206\u914d\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u5806\u6808\u5206\u914d\u2014\u2014\u5f53\u4e00\u4e2a\u8bcd\u6cd5\u5757\u8fdb\u5165\u65f6\u5206\u914d\u7a7a\u95f4\uff0c\u5f53\u8be5\u5757\u9000\u51fa\u65f6\u91ca\u653e\u7a7a\u95f4\u3002\u5b83\u6700\u91cd\u8981\u7684\u7279\u5f81\u4e0e\u6b64\u76f4\u63a5\u76f8\u5173\u3002\u5728C99\u4e4b\u524d\uff0c\u81ea\u52a8\u5206\u914d\u7684\u53d8\u91cf\u9700\u8981\u5728\u7f16\u8bd1\u65f6\u77e5\u9053\u5b83\u4eec\u7684\u5927\u5c0f\u3002\u8fd9\u610f\u5473\u7740\u4efb\u4f55\u5b57\u7b26\u4e32\u3001\u5217\u8868\u3001\u6620\u5c04\u4ee5\u53ca\u4ece\u8fd9\u4e9b\u6d3e\u751f\u7684\u4efb\u4f55\u7ed3\u6784\u90fd\u5fc5\u987b\u5b58\u5728\u4e8e\u5806\u4e2d\u7684\u52a8\u6001\u5185\u5b58\u4e2d\u3002</p> <p>\u7a0b\u5e8f\u5458\u4f7f\u7528\u56db\u4e2a\u57fa\u672c\u64cd\u4f5c\u660e\u786e\u5730\u5206\u914d\u548c\u91ca\u653e\u52a8\u6001\u5185\u5b58:malloc\u3001realloc\u3001calloc\u548cfree\u3002\u524d\u4e24\u4e2a\u4e0d\u6267\u884c\u4efb\u4f55\u521d\u59cb\u5316\uff0c\u5185\u5b58\u53ef\u80fd\u5305\u542b\u788e\u7247\u3002\u9664\u4e86\u81ea\u7531\uff0c\u4ed6\u4eec\u90fd\u53ef\u80fd\u5931\u8d25\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6307\u9488\uff0c\u5176\u8bbf\u95ee\u662f\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\uff1b\u5728\u6700\u597d\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u7684\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u7684\u7a0b\u5e8f\u770b\u8d77\u6765\u4f1a\u5de5\u4f5c\u4e00\u6bb5\u65f6\u95f4\uff0c\u5728\u5d29\u6e83\u524d\u5904\u7406\u5783\u573e\u6570\u636e\u3002</p> <p>\u4f8b\u5982\uff1a </p> <pre><code>int main() {\nchar *str = (char *) malloc(7); strcpy(str, \"toptal\");\nprintf(\"char array = \\\"%s\\\" @ %u\\n\", str, str);\n\nstr = (char *) realloc(str, 11);\nstrcat(str, \".com\");\nprintf(\"char array = \\\"%s\\\" @ %u\\n\", str, str);\n\nfree(str);\n\nreturn(0);\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>char array = \"toptal\" @ 2762894960\nchar array = \"toptal.com\" @ 2762894960\n</code></pre> <p>\u5c3d\u7ba1\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u4f46\u5b83\u5df2\u7ecf\u5305\u542b\u4e86\u4e00\u4e2a\u53cd\u6a21\u5f0f\u548c\u4e00\u4e2a\u6709\u95ee\u9898\u7684\u51b3\u5b9a\u3002\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u4f60\u4e0d\u5e94\u8be5\u76f4\u63a5\u5199\u5b57\u8282\u6570\uff0c\u800c\u5e94\u8be5\u4f7f\u7528sizeof\u51fd\u6570\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u5c06char *\u6570\u7ec4\u7cbe\u786e\u5730\u5206\u914d\u7ed9\u6211\u4eec\u9700\u8981\u7684\u5b57\u7b26\u4e32\u5927\u5c0f\u7684\u4e24\u500d(\u6bd4\u5b57\u7b26\u4e32\u957f\u5ea6\u591a\u4e00\u500d\uff0c\u4ee5\u8bf4\u660e\u7a7a\u7ec8\u6b62)\uff0c\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u6602\u8d35\u7684\u64cd\u4f5c\u3002\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u6784\u5efa\u4e00\u4e2a\u66f4\u5927\u7684\u5b57\u7b26\u4e32\u7f13\u51b2\u533a\uff0c\u5141\u8bb8\u5b57\u7b26\u4e32\u5927\u5c0f\u589e\u957f\u3002</p>"},{"location":"codingStyleIdioms/RAII/#1raii","title":"1.RAII\u7684\u53d1\u660e\uff1a\u65b0\u5e0c\u671b","text":"<p>\u81f3\u5c11\u53ef\u4ee5\u8bf4\uff0c\u6240\u6709\u624b\u52a8\u7ba1\u7406\u90fd\u662f\u4ee4\u4eba\u4e0d\u5feb\u7684\u3002 \u572880\u5e74\u4ee3\u4e2d\u671f\uff0cBjarne Stroustrup\u4e3a\u4ed6\u7684\u5168\u65b0\u8bed\u8a00C ++\u53d1\u660e\u4e86\u4e00\u79cd\u65b0\u7684\u8303\u4f8b\u3002 \u4ed6\u5c06\u5176\u79f0\u4e3a\u201c\u8d44\u6e90\u83b7\u53d6\u5c31\u662f\u521d\u59cb\u5316\u201d\uff0c\u5176\u57fa\u672c\u89c1\u89e3\u5982\u4e0b\uff1a\u53ef\u4ee5\u6307\u5b9a\u5bf9\u8c61\u5177\u6709\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\uff0c\u8fd9\u4e9b\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u5728\u9002\u5f53\u7684\u65f6\u5019\u7531\u7f16\u8bd1\u5668\u81ea\u52a8\u8c03\u7528\uff0c\u8fd9\u4e3a\u7ba1\u7406\u7ed9\u5b9a\u5bf9\u8c61\u7684\u5185\u5b58\u63d0\u4f9b\u4e86\u66f4\u4e3a\u65b9\u4fbf\u7684\u65b9\u6cd5\u3002 \u9700\u8981\uff0c\u5e76\u4e14\u8be5\u6280\u672f\u5bf9\u4e8e\u4e0d\u662f\u5185\u5b58\u7684\u8d44\u6e90\u4e5f\u5f88\u6709\u7528\u3002</p> <p>\u610f\u5473\u7740\u4e0a\u9762\u7684\u4f8b\u5b50\u5728c++\u4e2d\u66f4\u7b80\u6d01\uff1a</p> <pre><code>int main() {\nstd::string str = std::string (\"toptal\");\nstd::cout &lt;&lt; \"string object: \" &lt;&lt; str &lt;&lt; \" @ \" &lt;&lt; &amp;str &lt;&lt; \"\\n\";\n\nstr += \".com\";\nstd::cout &lt;&lt; \"string object: \" &lt;&lt; str &lt;&lt; \" @ \" &lt;&lt; &amp;str &lt;&lt; \"\\n\";\n\nreturn(0);\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>string object: toptal @ 0x7fffa67b9400\nstring object: toptal.com @ 0x7fffa67b9400\n</code></pre> <p>\u5728\u4e0a\u8ff0\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6ca1\u6709\u624b\u52a8\u5185\u5b58\u7ba1\u7406\uff01\u6784\u9020string\u5bf9\u8c61\uff0c\u8c03\u7528\u91cd\u8f7d\u65b9\u6cd5\uff0c\u5e76\u5728\u51fd\u6570\u9000\u51fa\u65f6\u81ea\u52a8\u9500\u6bc1\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u540c\u6837\u7684\u7b80\u5355\u4e5f\u4f1a\u5bfc\u81f4\u5176\u4ed6\u95ee\u9898\u3002\u8ba9\u6211\u4eec\u8be6\u7ec6\u5730\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>vector&lt;string&gt; read_lines_from_file(string &amp;file_name) {\nvector&lt;string&gt; lines;\nstring line;\n\nifstream file_handle (file_name.c_str());\nwhile (file_handle.good() &amp;&amp; !file_handle.eof()) {\ngetline(file_handle, line);\nlines.push_back(line);\n}\n\nfile_handle.close();\n\nreturn lines;\n}\n\nint main(int argc, char* argv[]) {\n// get file name from the first argument\nstring file_name (argv[1]);\nint count = read_lines_from_file(file_name).size();\ncout &lt;&lt; \"File \" &lt;&lt; file_name &lt;&lt; \" contains \" &lt;&lt; count &lt;&lt; \" lines.\";\n\nreturn 0;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>File makefile contains 38 lines.\n</code></pre> <p>\u8fd9\u770b\u8d77\u6765\u5f88\u7b80\u5355\u3002<code>vector</code>\u88ab\u586b\u6ee1\u3001\u8fd4\u56de\u548c\u8c03\u7528\u3002\u7136\u800c\uff0c\u4f5c\u4e3a\u5173\u5fc3\u6027\u80fd\u7684\u9ad8\u6548\u7a0b\u5e8f\u5458\uff0c\u8fd9\u65b9\u9762\u7684\u4e00\u4e9b\u95ee\u9898\u56f0\u6270\u7740\u6211\u4eec:\u5728return\u8bed\u53e5\u4e2d\uff0c\u7531\u4e8e\u4f7f\u7528\u4e86\u503c\u8bed\u4e49\uff0c<code>vector</code>\u5728\u9500\u6bc1\u4e4b\u524d\u4e0d\u4e45\u5c31\u88ab\u590d\u5236\u5230\u4e00\u4e2a\u65b0<code>vector</code>\u4e2d\u3002</p> <p>\u5728\u73b0\u4ee3C ++\u4e2d\uff0c\u8fd9\u4e0d\u518d\u662f\u4e25\u683c\u7684\u8981\u6c42\u4e86\u3002 C ++ 11\u5f15\u5165\u4e86\u79fb\u52a8\u8bed\u4e49\u7684\u6982\u5ff5\uff0c\u5176\u4e2d\u5c06\u539f\u70b9\u4fdd\u7559\u5728\u6709\u6548\u72b6\u6001\uff08\u4ee5\u4fbf\u4ecd\u7136\u53ef\u4ee5\u6b63\u786e\u9500\u6bc1\uff09\u4f46\u672a\u6307\u5b9a\u72b6\u6001\u3002 \u5bf9\u4e8e\u7f16\u8bd1\u5668\u800c\u8a00\uff0c\u8fd4\u56de\u8c03\u7528\u662f\u6700\u5bb9\u6613\u4f18\u5316\u4ee5\u4f18\u5316\u8bed\u4e49\u79fb\u52a8\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u5b83\u77e5\u9053\u5728\u8fdb\u884c\u4efb\u4f55\u8fdb\u4e00\u6b65\u8bbf\u95ee\u4e4b\u524d\u4e0d\u4e45\u5c06\u9500\u6bc1\u6e90\u3002 \u4f46\u662f\uff0c\u8be5\u793a\u4f8b\u7684\u76ee\u7684\u662f\u8bf4\u660e\u4e3a\u4ec0\u4e48\u4eba\u4eec\u572880\u5e74\u4ee3\u672b\u548c90\u5e74\u4ee3\u521d\u53d1\u660e\u4e86\u4e00\u5927\u5806\u5783\u573e\u6536\u96c6\u7684\u8bed\u8a00\uff0c\u800c\u5728\u90a3\u4e2a\u65f6\u5019C ++ move\u8bed\u4e49\u4e0d\u53ef\u7528\u3002</p> <p>\u5bf9\u4e8e\u6570\u636e\u91cf\u6bd4\u8f83\u5927\u7684\u6587\u4ef6\uff0c\u8fd9\u53ef\u80fd\u4f1a\u53d8\u5f97\u6602\u8d35\u3002 \u8ba9\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\uff0c\u53ea\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\u3002 \u8bed\u6cd5\u8fdb\u884c\u4e86\u4e00\u4e9b\u66f4\u6539\uff0c\u4f46\u5176\u4ed6\u4ee3\u7801\u76f8\u540c\uff1a</p> <pre><code>vector&lt;string&gt; * read_lines_from_file(string &amp;file_name) {\nvector&lt;string&gt; * lines;\nstring line;\n\nifstream file_handle (file_name.c_str());\nwhile (file_handle.good() &amp;&amp; !file_handle.eof()) {\ngetline(file_handle, line);\nlines-&gt;push_back(line);\n}\n\nfile_handle.close();\n\nreturn lines;\n}\nint main(int argc, char* argv[]) {\n// get file name from the first argument\nstring file_name (argv[1]);\nint count = read_lines_from_file(file_name).size();\ncout &lt;&lt; \"File \" &lt;&lt; file_name &lt;&lt; \" contains \" &lt;&lt; count &lt;&lt; \" lines.\";\n\nreturn 0;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>Segmentation fault (core dumped)\n</code></pre> <p>\u7a0b\u5e8f\u5d29\u6e83\uff01\u6211\u4eec\u53ea\u9700\u8981\u5c06\u4e0a\u8ff0\u7684<code>lines</code>\u8fdb\u884c\u5185\u5b58\u5206\u914d\uff1a</p> <pre><code>vector&lt;string&gt; * lines = new vector&lt;string&gt;;\n</code></pre> <p>\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fd0\u884c\u4e86\uff01</p> <p>\u4e0d\u5e78\u7684\u662f\uff0c\u5c3d\u7ba1\u8fd9\u770b\u8d77\u6765\u5f88\u5b8c\u7f8e\uff0c\u4f46\u5b83\u4ecd\u7136\u6709\u4e00\u4e2a\u7f3a\u9677:\u5b83\u4f1a\u6cc4\u9732\u5185\u5b58\u3002\u5728C++\u4e2d\uff0c\u6307\u5411\u5806\u7684\u6307\u9488\u5728\u4e0d\u518d\u9700\u8981\u540e\u5fc5\u987b\u624b\u52a8\u5220\u9664\uff1b\u5426\u5219\uff0c\u4e00\u65e6\u6700\u540e\u4e00\u4e2a\u6307\u9488\u8d85\u51fa\u8303\u56f4\uff0c\u8be5\u5185\u5b58\u5c06\u53d8\u5f97\u4e0d\u53ef\u7528\uff0c\u5e76\u4e14\u76f4\u5230\u8fdb\u7a0b\u7ed3\u675f\u65f6\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u5176\u8fdb\u884c\u7ba1\u7406\u540e\u624d\u4f1a\u6062\u590d\u3002\u60ef\u7528\u7684\u73b0\u4ee3C++\u5c06\u5728\u8fd9\u91cc\u4f7f\u7528<code>unique_ptr</code>\uff0c\u5b83\u5b9e\u73b0\u4e86\u671f\u671b\u7684\u884c\u4e3a\u3002\u5b83\u5220\u9664\u6307\u9488\u8d85\u51fa\u8303\u56f4\u65f6\u6307\u5411\u7684\u5bf9\u8c61\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u884c\u4e3a\u76f4\u5230C++11\u624d\u6210\u4e3a\u8bed\u8a00\u7684\u4e00\u90e8\u5206\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528C++11\u4e4b\u524d\u7684\u8bed\u6cd5\uff0c\u53ea\u662f\u628amain\u4e2d\u6539\u4e00\u4e0b\u5373\u53ef\uff1a</p> <pre><code>vector&lt;string&gt; * read_lines_from_file(string &amp;file_name) {\nvector&lt;string&gt; * lines = new vector&lt;string&gt;;\nstring line;\n\nifstream file_handle (file_name.c_str());\nwhile (file_handle.good() &amp;&amp; !file_handle.eof()) {\ngetline(file_handle, line);\nlines-&gt;push_back(line);\n}\n\nfile_handle.close();\n\nreturn lines;\n}\n\nint main(int argc, char* argv[]) {\n// get file name from the first argument\nstring file_name (argv[1]);\nvector&lt;string&gt; * file_lines = read_lines_from_file(file_name);\nint count = file_lines-&gt;size();\ndelete file_lines;\ncout &lt;&lt; \"File \" &lt;&lt; file_name &lt;&lt; \" contains \" &lt;&lt; count &lt;&lt; \" lines.\";\n\nreturn 0;\n}\n</code></pre> <p>\u624b\u52a8\u53bb\u5206\u914d\u5185\u5b58\u4e0e\u91ca\u653e\u5185\u5b58\u3002</p> <p>\u4e0d\u5e78\u7684\u662f\uff0c\u968f\u7740\u7a0b\u5e8f\u6269\u5c55\u5230\u4e0a\u8ff0\u8303\u56f4\u4e4b\u5916\uff0c\u5f88\u5feb\u5c31\u53d8\u5f97\u66f4\u52a0\u96be\u4ee5\u63a8\u7406\u6307\u9488\u5e94\u8be5\u5728\u4f55\u65f6\u4f55\u5730\u88ab\u5220\u9664\u3002\u5f53\u4e00\u4e2a\u51fd\u6570\u8fd4\u56de\u6307\u9488\u65f6\uff0c\u4f60\u73b0\u5728\u62e5\u6709\u5b83\u5417\uff1f\u60a8\u5e94\u8be5\u5728\u5b8c\u6210\u540e\u81ea\u5df1\u5220\u9664\u5b83\uff0c\u8fd8\u662f\u5b83\u5c5e\u4e8e\u67d0\u4e2a\u7a0d\u540e\u5c06\u88ab\u4e00\u6b21\u6027\u91ca\u653e\u7684\u6570\u636e\u7ed3\u6784\uff1f\u4e00\u65b9\u9762\u51fa\u9519\uff0c\u5185\u5b58\u6cc4\u6f0f\uff0c\u53e6\u4e00\u65b9\u9762\u51fa\u9519\uff0c\u4f60\u5df2\u7ecf\u7834\u574f\u4e86\u6b63\u5728\u8ba8\u8bba\u7684\u6570\u636e\u7ed3\u6784\u548c\u5176\u4ed6\u53ef\u80fd\u7684\u6570\u636e\u7ed3\u6784\uff0c\u56e0\u4e3a\u5b83\u4eec\u8bd5\u56fe\u53d6\u6d88\u5f15\u7528\u73b0\u5728\u4e0d\u518d\u6709\u6548\u7684\u6307\u9488\u3002</p>"},{"location":"codingStyleIdioms/RAII/#2flyboy","title":"2.\u201c\u4f7f\u7528\u5783\u573e\u6536\u96c6\u5668\uff0cflyboy\uff01\u201d","text":"<p>\u5783\u573e\u6536\u96c6\u5668\u4e0d\u662f\u4e00\u9879\u65b0\u6280\u672f\u3002 \u5b83\u4eec\u7531John McCarthy\u57281959\u5e74\u4e3aLisp\u53d1\u660e\u3002 1980\u5e74\uff0c\u968f\u7740Smalltalk-80\u7684\u51fa\u73b0\uff0c\u5783\u573e\u6536\u96c6\u5f00\u59cb\u6210\u4e3a\u4e3b\u6d41\u3002 \u4f46\u662f\uff0c1990\u5e74\u4ee3\u4ee3\u8868\u4e86\u8be5\u6280\u672f\u7684\u771f\u6b63\u53d1\u82bd\uff1a\u57281990\u5e74\u81f32000\u5e74\u4e4b\u95f4\uff0c\u53d1\u5e03\u4e86\u591a\u79cd\u8bed\u8a00\uff0c\u6240\u6709\u8bed\u8a00\u90fd\u4f7f\u7528\u4e00\u79cd\u6216\u53e6\u4e00\u79cd\u5783\u573e\u56de\u6536\uff1aHaskell\uff0cPython\uff0cLua\uff0cJava\uff0cJavaScript\uff0cRuby\uff0cOCaml \u548cC\uff03\u662f\u6700\u8457\u540d\u7684\u3002</p> <p>\u4ec0\u4e48\u662f\u5783\u573e\u6536\u96c6\uff1f \u7b80\u800c\u8a00\u4e4b\uff0c\u8fd9\u662f\u4e00\u7ec4\u7528\u4e8e\u81ea\u52a8\u6267\u884c\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u7684\u6280\u672f\u3002 \u5b83\u901a\u5e38\u4f5c\u4e3a\u5177\u6709\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u7684\u8bed\u8a00\uff08\u4f8b\u5982C\u548cC ++\uff09\u7684\u5e93\u63d0\u4f9b\uff0c\u4f46\u5728\u9700\u8981\u5b83\u7684\u8bed\u8a00\u4e2d\u66f4\u5e38\u7528\u3002 \u6700\u5927\u7684\u4f18\u70b9\u662f\u7a0b\u5e8f\u5458\u6839\u672c\u4e0d\u9700\u8981\u8003\u8651\u5185\u5b58\u3002 \u90fd\u88ab\u62bd\u8c61\u4e86\u3002 \u4f8b\u5982\uff0c\u76f8\u5f53\u4e8e\u6211\u4eec\u4e0a\u9762\u7684\u6587\u4ef6\u8bfb\u53d6\u4ee3\u7801\u7684Python\u5c31\u662f\u8fd9\u6837\uff1a</p> <pre><code>def read_lines_from_file(file_name):\n    lines = []\n    with open(file_name) as fp: \n        for line in fp:\n            lines.append(line)\n    return lines\n\nif __name__ == '__main__':\n    import sys\n    file_name = sys.argv[1]\n    count = len(read_lines_from_file(file_name))\n    print(\"File {} contains {} lines.\".format(file_name, count))\n</code></pre> <p>\u884c\u6570\u7ec4\u662f\u5728\u7b2c\u4e00\u6b21\u5206\u914d\u7ed9\u5b83\u65f6\u51fa\u73b0\u7684\uff0c\u5e76\u4e14\u4e0d\u590d\u5236\u5230\u8c03\u7528\u8303\u56f4\u5c31\u8fd4\u56de\u3002 \u7531\u4e8e\u65f6\u95f4\u4e0d\u786e\u5b9a\uff0c\u5b83\u4f1a\u5728\u8d85\u51fa\u8be5\u8303\u56f4\u540e\u7684\u67d0\u4e2a\u65f6\u95f4\u88ab\u5783\u573e\u6536\u96c6\u5668\u6e05\u7406\u3002 \u6709\u8da3\u7684\u662f\uff0c\u5728Python\u4e2d\uff0c\u7528\u4e8e\u975e\u5185\u5b58\u8d44\u6e90\u7684RAII\u4e0d\u662f\u60ef\u7528\u8bed\u8a00\u3002 \u5141\u8bb8-\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u7f16\u5199<code>fp = open\uff08file_name\uff09</code>\u800c\u4e0d\u662f\u4f7f\u7528with\u5757\uff0c\u7136\u540e\u8ba9GC\u6e05\u7406\u3002 \u4f46\u662f\u5efa\u8bae\u7684\u6a21\u5f0f\u662f\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u5728\u786e\u5b9a\u7684\u65f6\u95f4\u91ca\u653e\u5b83\u4eec\u3002</p> <p>\u5c3d\u7ba1\u7b80\u5316\u4e86\u5185\u5b58\u7ba1\u7406\uff0c\u4f46\u8981\u4ed8\u51fa\u5f88\u5927\u7684\u4ee3\u4ef7\u3002 \u5728\u5f15\u7528\u8ba1\u6570\u5783\u573e\u56de\u6536\u4e2d\uff0c\u6240\u6709\u53d8\u91cf\u8d4b\u503c\u548c\u4f5c\u7528\u57df\u51fa\u53e3\u90fd\u4f1a\u83b7\u5f97\u5c11\u91cf\u6210\u672c\u6765\u66f4\u65b0\u5f15\u7528\u3002 \u5728\u6807\u8bb0\u6e05\u9664\u7cfb\u7edf\u4e2d\uff0c\u5728GC\u6e05\u9664\u5185\u5b58\u7684\u540c\u65f6\uff0c\u6240\u6709\u7a0b\u5e8f\u7684\u6267\u884c\u90fd\u4ee5\u4e0d\u53ef\u9884\u6d4b\u7684\u65f6\u95f4\u95f4\u9694\u6682\u505c\u3002 \u8fd9\u901a\u5e38\u79f0\u4e3a\u4e16\u754c\u505c\u6b62\u4e8b\u4ef6\u3002 \u540c\u65f6\u4f7f\u7528\u8fd9\u4e24\u79cd\u7cfb\u7edf\u7684Python\u4e4b\u7c7b\u7684\u5b9e\u73b0\u90fd\u4f1a\u53d7\u5230\u4e24\u79cd\u60e9\u7f5a\u3002 \u8fd9\u4e9b\u95ee\u9898\u964d\u4f4e\u4e86\u5783\u573e\u6536\u96c6\u8bed\u8a00\u5728\u6027\u80fd\u81f3\u5173\u91cd\u8981\u6216\u9700\u8981\u5b9e\u65f6\u5e94\u7528\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u7684\u9002\u7528\u6027\u3002 \u5373\u4f7f\u5728\u4ee5\u4e0b\u73a9\u5177\u7a0b\u5e8f\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u770b\u5230\u5b9e\u9645\u7684\u6027\u80fd\u4e0b\u964d\uff1a</p> <pre><code>$ make cpp &amp;&amp; time ./c++ makefile\ng++ -o c++ c++.cpp\nFile makefile contains 38 lines.\nreal    0m0.016s\nuser    0m0.000s\nsys     0m0.015s\n\n$ time python3 python3.py makefile\nFile makefile contains 38 lines.\n\nreal    0m0.041s\nuser    0m0.015s\nsys     0m0.015s\n</code></pre> <p>Python\u7248\u672c\u7684\u5b9e\u65f6\u65f6\u95f4\u51e0\u4e4e\u662fC ++\u7248\u672c\u7684\u4e09\u500d\u3002 \u5c3d\u7ba1\u5e76\u975e\u6240\u6709\u8fd9\u4e9b\u5dee\u5f02\u90fd\u53ef\u4ee5\u5f52\u56e0\u4e8e\u5783\u573e\u6536\u96c6\uff0c\u4f46\u5b83\u4ecd\u7136\u662f\u53ef\u89c2\u7684\u3002</p>"},{"location":"codingStyleIdioms/RAII/#3raii","title":"3.\u6240\u6709\u6743\uff1aRAII\u89c9\u9192","text":"<p>\u6211\u4eec\u77e5\u9053\u5bf9\u8c61\u7684\u751f\u5b58\u671f\u7531\u5176\u8303\u56f4\u51b3\u5b9a\u3002 \u4f46\u662f\uff0c\u6709\u65f6\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4e0e\u521b\u5efa\u5bf9\u8c61\u7684\u4f5c\u7528\u57df\u65e0\u5173\uff0c\u8fd9\u662f\u6709\u7528\u7684\uff0c\u6216\u8005\u5f88\u6709\u7528\u3002 \u5728C ++\u4e2d\uff0c\u8fd0\u7b97\u7b26new\u7528\u4e8e\u521b\u5efa\u8fd9\u6837\u7684\u5bf9\u8c61\u3002 \u4e3a\u4e86\u9500\u6bc1\u5bf9\u8c61\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd0\u7b97\u7b26delete\u3002 \u7531new\u64cd\u4f5c\u5458\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u52a8\u6001\u5206\u914d\u7684\uff0c\u5373\u5728\u52a8\u6001\u5185\u5b58\uff08\u4e5f\u79f0\u4e3a\u5806\u6216\u7a7a\u95f2\u5b58\u50a8\uff09\u4e2d\u5206\u914d\u3002 \u56e0\u6b64\uff0c\u7531new\u521b\u5efa\u7684\u5bf9\u8c61\u5c06\u7ee7\u7eed\u5b58\u5728\uff0c\u76f4\u5230\u4f7f\u7528delete\u5c06\u5176\u660e\u786e\u9500\u6bc1\u4e3a\u6b62\u3002</p> <p>\u4f7f\u7528new\u548cdelete\u65f6\u53ef\u80fd\u53d1\u751f\u7684\u4e00\u4e9b\u9519\u8bef\u662f\uff1a</p> <ul> <li> <p>\u5bf9\u8c61\uff08\u6216\u5185\u5b58\uff09\u6cc4\u6f0f\uff1a\u4f7f\u7528new\u5206\u914d\u5bf9\u8c61\uff0c\u800c\u5fd8\u8bb0\u5220\u9664\u8be5\u5bf9\u8c61\u3002</p> </li> <li> <p>\u8fc7\u65e9\u5220\u9664\uff08\u6216\u60ac\u6302\u5f15\u7528\uff09\uff1a\u6301\u6709\u6307\u5411\u5bf9\u8c61\u7684\u53e6\u4e00\u4e2a\u6307\u9488\uff0c\u5220\u9664\u8be5\u5bf9\u8c61\uff0c\u7136\u800c\u8fd8\u6709\u5176\u4ed6\u6307\u9488\u5728\u5f15\u7528\u5b83\u3002</p> </li> <li> <p>\u53cc\u91cd\u5220\u9664\uff1a\u5c1d\u8bd5\u4e24\u6b21\u5220\u9664\u4e00\u4e2a\u5bf9\u8c61\u3002</p> </li> </ul> <p>\u901a\u5e38\uff0c\u8303\u56f4\u53d8\u91cf\u662f\u9996\u9009\u3002 \u4f46\u662f\uff0cRAII\u53ef\u4ee5\u7528\u4f5cnew\u548cdelete\u7684\u66ff\u4ee3\u65b9\u6cd5\uff0c\u4ee5\u4f7f\u5bf9\u8c61\u72ec\u7acb\u4e8e\u5176\u8303\u56f4\u800c\u5b58\u5728\u3002 \u8fd9\u79cd\u6280\u672f\u5305\u62ec\u5c06\u6307\u9488\u5206\u914d\u5230\u5728\u5806\u4e0a\u5206\u914d\u7684\u5bf9\u8c61\uff0c\u5e76\u5c06\u5176\u653e\u5728\u53e5\u67c4/\u7ba1\u7406\u5668\u5bf9\u8c61\u4e2d\u3002 \u540e\u8005\u5177\u6709\u4e00\u4e2a\u6790\u6784\u51fd\u6570\uff0c\u5c06\u8d1f\u8d23\u9500\u6bc1\u8be5\u5bf9\u8c61\u3002 \u8fd9\u5c06\u786e\u4fdd\u8be5\u5bf9\u8c61\u53ef\u7528\u4e8e\u4efb\u4f55\u60f3\u8981\u8bbf\u95ee\u5b83\u7684\u51fd\u6570\uff0c\u5e76\u4e14\u8be5\u5bf9\u8c61\u5728\u53e5\u67c4\u5bf9\u8c61\u7684\u751f\u5b58\u671f\u7ed3\u675f\u65f6\u5c06\u88ab\u9500\u6bc1\uff0c\u800c\u65e0\u9700\u8fdb\u884c\u663e\u5f0f\u6e05\u7406\u3002</p> <p>\u6765\u81eaC ++\u6807\u51c6\u5e93\u7684\u4f7f\u7528RAII\u7684\u793a\u4f8b\u4e3astd :: string\u548cstd :: vector\u3002</p> <p>\u8003\u8651\u8fd9\u6bb5\u4ee3\u7801\uff1a</p> <pre><code>void fn(const std::string&amp; str)\n{\nstd::vector&lt;char&gt; vec;\nfor (auto c : str)\nvec.push_back(c);\n// do something\n}\n</code></pre> <p>\u5f53\u521b\u5efa<code>vector</code>,\u5e76\u5c06\u5143\u7d20\u63a8\u5165<code>vector</code>\u65f6\uff0c\u60a8\u4e0d\u5fc5\u62c5\u5fc3\u5206\u914d\u548c\u53d6\u6d88\u5206\u914d\u6b64\u7c7b\u5143\u7d20\u5185\u5b58\u3002 <code>vector</code>\u4f7f\u7528new\u4e3a\u5176\u5806\u4e0a\u7684\u5143\u7d20\u5206\u914d\u7a7a\u95f4\uff0c\u5e76\u4f7f\u7528delete\u91ca\u653e\u8be5\u7a7a\u95f4\u3002 \u4f5c\u4e3avector\u7684\u7528\u6237\uff0c\u60a8\u65e0\u9700\u5173\u5fc3\u5b9e\u73b0\u7ec6\u8282\uff0c\u5e76\u4e14\u4f1a\u76f8\u4fe1vector\u4e0d\u4f1a\u6cc4\u6f0f\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5411\u91cf\u662f\u5176\u5143\u7d20\u7684\u53e5\u67c4\u5bf9\u8c61\u3002</p> <p>\u6807\u51c6\u5e93\u4e2d\u4f7f\u7528RAII\u7684\u5176\u4ed6\u793a\u4f8b\u662fstd :: shared_ptr\uff0cstd :: unique_ptr\u548cstd :: lock_guard\u3002</p> <p>\u8be5\u6280\u672f\u7684\u53e6\u4e00\u4e2a\u540d\u79f0\u662fSBRM\uff0c\u662f\u8303\u56f4\u7ed1\u5b9a\u8d44\u6e90\u7ba1\u7406\u7684\u7f29\u5199\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u5c06\u4e0a\u8ff0\u8bfb\u53d6\u6587\u4ef6\u4f8b\u5b50\uff0c\u8fdb\u884c\u4fee\u6539\uff1a</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;cstring&gt;\n#include &lt;fstream&gt;\n#include &lt;bits/unique_ptr.h&gt;\n\nusing namespace std;\nunique_ptr&lt;vector&lt;string&gt;&gt; read_lines_from_file(string &amp;file_name) {\nunique_ptr&lt;vector&lt;string&gt;&gt; lines(new vector&lt;string&gt;);\nstring line;\n\nifstream file_handle (file_name.c_str());\nwhile (file_handle.good() &amp;&amp; !file_handle.eof()) {\ngetline(file_handle, line);\nlines-&gt;push_back(line);\n}\n\nfile_handle.close();\n\nreturn lines;\n}\nint main(int argc, char* argv[]) {\n// get file name from the first argument\nstring file_name (argv[1]);\nint count = read_lines_from_file(file_name).get()-&gt;size();\ncout &lt;&lt; \"File \" &lt;&lt; file_name &lt;&lt; \" contains \" &lt;&lt; count &lt;&lt; \" lines.\";\n\nreturn 0;\n}\n</code></pre>"},{"location":"codingStyleIdioms/RAII/#4raii","title":"4.\u53ea\u6709\u5728\u6700\u540e\uff0c\u4f60\u624d\u610f\u8bc6\u5230RAII\u7684\u771f\u6b63\u529b\u91cf\u3002","text":"<p>\u81ea\u4ece\u7f16\u8bd1\u5668\u53d1\u660e\u4ee5\u6765\uff0c\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u662f\u7a0b\u5e8f\u5458\u4e00\u76f4\u5728\u60f3\u529e\u6cd5\u907f\u514d\u7684\u5669\u68a6\u3002 RAII\u662f\u4e00\u79cd\u5f88\u6709\u524d\u9014\u7684\u6a21\u5f0f\uff0c\u4f46\u7531\u4e8e\u6ca1\u6709\u4e00\u4e9b\u5947\u602a\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u5b83\u6839\u672c\u65e0\u6cd5\u7528\u4e8e\u5806\u5206\u914d\u7684\u5bf9\u8c61\uff0c\u56e0\u6b64\u5728C ++\u4e2d\u4f1a\u53d7\u5230\u5f71\u54cd\u3002 \u56e0\u6b64\uff0c\u572890\u5e74\u4ee3\u51fa\u73b0\u4e86\u5783\u573e\u6536\u96c6\u8bed\u8a00\u7684\u7206\u70b8\u5f0f\u589e\u957f\uff0c\u65e8\u5728\u4f7f\u7a0b\u5e8f\u5458\u751f\u6d3b\u66f4\u52a0\u6109\u5feb\uff0c\u5373\u4f7f\u4ee5\u6027\u80fd\u4e3a\u4ee3\u4ef7\u3002</p> <p>\u6700\u540e\uff0cRAII\u603b\u7ed3\u5982\u4e0b\uff1a</p> <ul> <li> <p>\u8d44\u6e90\u5728\u6790\u6784\u51fd\u6570\u4e2d\u88ab\u91ca\u653e</p> </li> <li> <p>\u8be5\u7c7b\u7684\u5b9e\u4f8b\u662f\u5806\u6808\u5206\u914d\u7684</p> </li> <li>\u8d44\u6e90\u662f\u5728\u6784\u9020\u51fd\u6570\u4e2d\u83b7\u53d6\u7684\u3002 </li> </ul> <p>RAII\u4ee3\u8868\u201c\u8d44\u6e90\u83b7\u53d6\u662f\u521d\u59cb\u5316\u201d\u3002</p> <p>\u5e38\u89c1\u7684\u4f8b\u5b50\u6709\uff1a</p> <ul> <li> <p>\u6587\u4ef6\u64cd\u4f5c</p> </li> <li> <p>\u667a\u80fd\u6307\u9488</p> </li> <li> <p>\u4e92\u65a5\u91cf</p> </li> </ul>"},{"location":"codingStyleIdioms/RAII/#5","title":"5.\u53c2\u8003\u6587\u7ae0","text":"<p>1.https://www.toptal.com/software/eliminating-garbage-collector#remote-developer-job</p> <p>2.https://stackoverflow.com/questions/2321511/what-is-meant-by-resource-acquisition-is-initialization-raii</p>"},{"location":"codingStyleIdioms/classInitializers/","title":"\u521d\u59cb\u5316\u5217\u8868\u4e0e\u8d4b\u503c","text":"<ul> <li>const\u6210\u5458\u7684\u521d\u59cb\u5316\u53ea\u80fd\u5728\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u4e2d\u8fdb\u884c</li> <li>\u5f15\u7528\u6210\u5458\u7684\u521d\u59cb\u5316\u4e5f\u53ea\u80fd\u5728\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u4e2d\u8fdb\u884c</li> <li>\u5bf9\u8c61\u6210\u5458\uff08\u5bf9\u8c61\u6210\u5458\u6240\u5bf9\u5e94\u7684\u7c7b\u6ca1\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff09\u7684\u521d\u59cb\u5316\uff0c\u4e5f\u53ea\u80fd\u5728\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u4e2d\u8fdb\u884c</li> </ul>"},{"location":"codingStyleIdioms/classInitializers/#_2","title":"\u7c7b\u4e4b\u95f4\u5d4c\u5957","text":"<p>\u7b2c\u4e00\u79cd\uff1a \u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u3002</p> <pre><code>class Animal {\npublic:\nAnimal() {\nstd::cout &lt;&lt; \"Animal() is called\" &lt;&lt; std::endl;\n}\n\nAnimal(const Animal &amp;) {\nstd::cout &lt;&lt; \"Animal (const Animal &amp;) is called\" &lt;&lt; std::endl;\n}\n\nAnimal &amp;operator=(const Animal &amp;) {\nstd::cout &lt;&lt; \"Animal &amp; operator=(const Animal &amp;) is called\" &lt;&lt; std::endl;\nreturn *this;\n}\n\n~Animal() {\nstd::cout &lt;&lt; \"~Animal() is called\" &lt;&lt; std::endl;\n}\n};\n\nclass Dog {\npublic:\nDog(const Animal &amp;animal) : __animal(animal) {\nstd::cout &lt;&lt; \"Dog(const Animal &amp;animal) is called\" &lt;&lt; std::endl;\n}\n\n~Dog() {\nstd::cout &lt;&lt; \"~Dog() is called\" &lt;&lt; std::endl;\n}\n\nprivate:\nAnimal __animal;\n};\n\nint main() {\nAnimal animal;\nstd::cout &lt;&lt; std::endl;\nDog d(animal);\nstd::cout &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\uff1a</p> <pre><code>Animal() is called\n\nAnimal (const Animal &amp;) is called\nDog(const Animal &amp;animal) is called\n\n~Dog() is called\n~Animal() is called\n~Animal() is called\n</code></pre> <p>\u4f9d\u6b21\u5206\u6790\u4ece\u4e0a\u5230\u4e0b\uff1a</p> <p>main\u51fd\u6570\u4e2d<code>Animal animal;</code>\u8c03\u7528\u9ed8\u8ba4\u6784\u9020\u3002</p> <p><code>Dog d(animal);</code>\u7b49\u4ef7\u4e8e\uff1a</p> <pre><code>Animal __animal = animal;\n</code></pre> <p>\u5b9e\u9645\u4e0a\u5c31\u662f\u8c03\u7528\u4e86\u62f7\u8d1d\u6784\u9020\uff0c\u56e0\u6b64\u8f93\u51fa\u4e86\uff1a</p> <pre><code>Animal (const Animal &amp;) is called\n</code></pre> <p>\u518d\u7136\u540e\u6253\u5370Dog\u7684\u6784\u9020\u51fd\u6570\u91cc\u9762\u7684\u8f93\u51fa\u3002</p> <p>\u6700\u540e\u8c03\u7528\u6790\u6784\uff0c\u7a0b\u5e8f\u7ed3\u675f\u3002</p> <p>\u7b2c\u4e8c\u79cd\uff1a\u6784\u9020\u51fd\u6570\u8d4b\u503c\u6765\u521d\u59cb\u5316\u5bf9\u8c61\u3002</p> <p>\u6784\u9020\u51fd\u6570\u4fee\u6539\u5982\u4e0b\uff1a</p> <pre><code>Dog(const Animal &amp;animal) {\n__animal = animal;\nstd::cout &lt;&lt; \"Dog(const Animal &amp;animal) is called\" &lt;&lt; std::endl;\n}\n</code></pre> <p>\u6b64\u65f6\u8f93\u51fa\u7ed3\u679c\uff1a</p> <pre><code>Animal() is called\n\nAnimal() is called\nAnimal &amp; operator=(const Animal &amp;) is called\nDog(const Animal &amp;animal) is called\n\n~Dog() is called\n~Animal() is called\n~Animal() is called\n</code></pre> <p>\u4e8e\u662f\u5f97\u51fa\uff1a</p> <p>\u5f53\u8c03\u7528<code>Dog d(animal);</code>\u65f6\uff0c\u7b49\u4ef7\u4e8e\uff1a</p> <p>\u5148\u5b9a\u4e49\u5bf9\u8c61\uff0c\u518d\u8fdb\u884c\u8d4b\u503c\uff0c\u56e0\u6b64\u5148\u8c03\u7528\u4e86\u9ed8\u8ba4\u6784\u9020\uff0c\u518d\u8c03\u7528=\u64cd\u4f5c\u7b26\u91cd\u8f7d\u51fd\u6570\u3002</p> <pre><code>// \u5047\u8bbe\u4e4b\u524d\u5df2\u7ecf\u6709\u4e86animal\u5bf9\u8c61\nAnimal __animal;\n__animal = animal;\n</code></pre> <p>\u5c0f\u7ed3</p> <p>\u901a\u8fc7\u4e0a\u8ff0\u6211\u4eec\u5f97\u51fa\u5982\u4e0b\u7ed3\u8bba\uff1a</p> <ul> <li>\u7c7b\u4e2d\u5305\u542b\u5176\u4ed6\u81ea\u5b9a\u4e49\u7684class\u6216\u8005struct\uff0c\u91c7\u7528\u521d\u59cb\u5316\u5217\u8868\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u521b\u5efa\u5bf9\u8c61\u540c\u65f6\u5e76\u521d\u59cb\u5316</li> <li>\u800c\u91c7\u7528\u7c7b\u4e2d\u8d4b\u503c\u65b9\u5f0f\uff0c\u7b49\u4ef7\u4e8e\u5148\u5b9a\u4e49\u5bf9\u8c61\uff0c\u518d\u8fdb\u884c\u8d4b\u503c\uff0c\u4e00\u822c\u4f1a\u5148\u8c03\u7528\u9ed8\u8ba4\u6784\u9020\uff0c\u5728\u8c03\u7528=\u64cd\u4f5c\u7b26\u91cd\u8f7d\u51fd\u6570\u3002</li> </ul>"},{"location":"codingStyleIdioms/classInitializers/#_3","title":"\u65e0\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u7684\u7ee7\u627f\u5173\u7cfb\u4e2d","text":"<p>\u73b0\u8003\u8651\u628a\u4e0a\u8ff0\u7684\u5173\u7cfb\u6539\u4e3a\u7ee7\u627f\uff0c\u5e76\u4fee\u6539Animal\u4e0eDog\u7684\u6784\u9020\u51fd\u6570\uff0c\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>class Animal {\npublic:\nAnimal(int age) {\nstd::cout &lt;&lt; \"Animal(int age) is called\" &lt;&lt; std::endl;\n}\n\nAnimal(const Animal &amp; animal) {\nstd::cout &lt;&lt; \"Animal (const Animal &amp;) is called\" &lt;&lt; std::endl;\n}\n\nAnimal &amp;operator=(const Animal &amp; amimal) {\nstd::cout &lt;&lt; \"Animal &amp; operator=(const Animal &amp;) is called\" &lt;&lt; std::endl;\nreturn *this;\n}\n\n~Animal() {\nstd::cout &lt;&lt; \"~Animal() is called\" &lt;&lt; std::endl;\n}\n};\n\nclass Dog : Animal {\npublic:\nDog(int age) : Animal(age) {\nstd::cout &lt;&lt; \"Dog(int age) is called\" &lt;&lt; std::endl;\n}\n\n~Dog() {\nstd::cout &lt;&lt; \"~Dog() is called\" &lt;&lt; std::endl;\n}\n\n};\n</code></pre> <p>\u4e0a\u8ff0\u662f\u901a\u8fc7\u521d\u59cb\u5316\u5217\u8868\u7ed9\u57fa\u7c7b\u5e26\u53c2\u6784\u9020\u4f20\u9012\u53c2\u6570\uff0c\u5982\u679c\u4e0d\u901a\u8fc7\u521d\u59cb\u5316\u5217\u8868\u4f20\u9012\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u5f71\u54cd\uff1f</p> <p>\u53bb\u6389\u521d\u59cb\u5316\u5217\u8868</p> <pre><code>Dog(int age)  {\n    std::cout &lt;&lt; \"Dog(int age) is called\" &lt;&lt; std::endl;\n}\n</code></pre> <p>\u8fd0\u884c\u7a0b\u5e8f\uff1a</p> <pre><code>error: no matching function for call to \u2018Animal::Animal()\u2019\n</code></pre> <p>\u7531\u4e8e\u5728Animal\u4e2d\u6ca1\u6709\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u62a5\u9519\uff0c\u9047\u5230\u8fd9\u79cd\u95ee\u9898\u5c5e\u4e8e\u707e\u96be\u6027\u7684\uff0c\u6211\u4eec\u5e94\u8be5\u5c3d\u91cf\u907f\u514d\uff0c\u53ef\u4ee5\u901a\u8fc7\u521d\u59cb\u5316\u5217\u8868\u7ed9\u57fa\u7c7b\u7684\u6784\u9020\u521d\u59cb\u5316\u3002</p>"},{"location":"codingStyleIdioms/classInitializers/#const","title":"\u7c7b\u4e2dconst\u6570\u636e\u6210\u5458\u3001\u5f15\u7528\u6570\u636e\u6210\u5458","text":"<p>\u7279\u522b\u662f\u5f15\u7528\u6570\u636e\u6210\u5458\uff0c\u5fc5\u987b\u7528\u521d\u59cb\u5316\u5217\u8868\u521d\u59cb\u5316\uff0c\u800c\u4e0d\u80fd\u901a\u8fc7\u8d4b\u503c\u521d\u59cb\u5316\uff01</p> <p>\u4f8b\u5982\uff1a\u5728\u4e0a\u8ff0\u7684Animal\u4e2d\u6dfb\u52a0\u79c1\u6709\u6210\u5458\uff0c\u5e76\u4fee\u6539\u6784\u9020\u51fd\u6570\uff1a</p> <pre><code>class Animal {\npublic:\nAnimal(int age,std::string name) {\nstd::cout &lt;&lt; \"Animal(int age) is called\" &lt;&lt; std::endl;\n}\nprivate:\nint &amp;age_;\nconst std::string name_;\n};\n</code></pre> <p>\u62a5\u4e0b\u9762\u9519\u8bef\uff1a</p> <pre><code>error: uninitialized reference member in \u2018int&amp;\u2019\n</code></pre> <p>\u5e94\u8be5\u6539\u4e3a\u4e0b\u9762\uff1a</p> <pre><code>Animal(int age, std::string name) : age_(age), name_(name) {\nstd::cout &lt;&lt; \"Animal(int age) is called\" &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"codingStyleIdioms/copy-swap/","title":"copy and swap","text":"<p>\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u590d\u5236\u548c\u4ea4\u6362\u4e60\u60ef\uff1f</p> <p>\u4efb\u4f55\u7ba1\u7406\u8d44\u6e90\u7684\u7c7b\uff08\u5305\u88c5\u7a0b\u5e8f\uff0c\u5982\u667a\u80fd\u6307\u9488\uff09\u90fd\u9700\u8981\u5b9e\u73b0big three\u3002\u5c3d\u7ba1\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u7684\u76ee\u6807\u548c\u5b9e\u73b0\u5f88\u7b80\u5355\u3002</p> <p>\u4f46\u662f\u590d\u5236\u5206\u914d\u8fd0\u7b97\u7b26\u65e0\u7591\u662f\u6700\u7ec6\u5fae\u548c\u6700\u56f0\u96be\u7684\u3002</p> <p>\u5e94\u8be5\u600e\u4e48\u505a\uff1f\u9700\u8981\u907f\u514d\u4ec0\u4e48\u9677\u9631\uff1f</p> <p>copy-swap\u662f\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u534f\u52a9\u8d4b\u503c\u8fd0\u7b97\u7b26\u5b9e\u73b0\u4e24\u4ef6\u4e8b\uff1a\u907f\u514d\u4ee3\u7801\u91cd\u590d\uff0c\u5e76\u63d0\u4f9b\u5f3a\u5927\u7684\u5f02\u5e38\u4fdd\u8bc1\u3002</p> <p>\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f</p> <p>\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u5b83\u901a\u8fc7\u4f7f\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u7684\u529f\u80fd\u6765\u521b\u5efa\u6570\u636e\u7684\u672c\u5730\u526f\u672c\uff0c\u7136\u540e\u4f7f\u7528\u4ea4\u6362\u529f\u80fd\u83b7\u53d6\u590d\u5236\u7684\u6570\u636e\uff0c\u5c06\u65e7\u6570\u636e\u4e0e\u65b0\u6570\u636e\u4ea4\u6362\u6765\u5de5\u4f5c\u3002\u7136\u540e\uff0c\u4e34\u65f6\u526f\u672c\u5c06\u9500\u6bc1\uff0c\u5e76\u968f\u8eab\u643a\u5e26\u65e7\u6570\u636e\u3002\u6211\u4eec\u5269\u4e0b\u7684\u662f\u65b0\u6570\u636e\u7684\u526f\u672c\u3002</p> <p>\u4e3a\u4e86\u4f7f\u7528copy-swap\uff0c\u6211\u4eec\u9700\u8981\u4e09\u4ef6\u4e8b\uff1a</p> <ul> <li>\u4e00\u4e2a\u6709\u6548\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570</li> <li>\u4e00\u4e2a\u6709\u6548\u7684\u6790\u6784\u51fd\u6570\uff08\u4e24\u8005\u90fd\u662f\u4efb\u4f55\u5305\u88c5\u7a0b\u5e8f\u7684\u57fa\u7840\uff0c\u56e0\u6b64\u65e0\u8bba\u5982\u4f55\u90fd\u5e94\u5b8c\u6574\uff09\u4ee5\u53ca\u4ea4\u6362\u529f\u80fd\u3002</li> </ul> <p>\u4ea4\u6362\u51fd\u6570\u662f\u4e00\u79cd\u4e0d\u629b\u5f02\u5e38\u51fd\u6570\uff0c\u5b83\u4ea4\u6362\u4e00\u4e2a\u7c7b\u7684\u4e24\u4e2a\u5bf9\u8c61\u6216\u8005\u6210\u5458\u3002\u6211\u4eec\u53ef\u80fd\u5f88\u60f3\u4f7f\u7528std :: swap\u800c\u4e0d\u662f\u63d0\u4f9b\u6211\u4eec\u81ea\u5df1\u7684\u65b9\u6cd5\uff0c\u4f46\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002 std :: swap\u5728\u5b9e\u73b0\u4e2d\u4f7f\u7528\u4e86copy-constructor\u548ccopy-assignment\u8fd0\u7b97\u7b26\uff0c\u6211\u4eec\u6700\u7ec8\u5c06\u5c1d\u8bd5\u6839\u636e\u81ea\u8eab\u5b9a\u4e49\u8d4b\u503c\u8fd0\u7b97\u7b26\uff01</p> <p>\uff08\u4e0d\u4ec5\u5982\u6b64\uff0c\u5bf9swap\u7684\u65e0\u6761\u4ef6\u8c03\u7528\u5c06\u4f7f\u7528\u6211\u4eec\u7684\u81ea\u5b9a\u4e49swap\u8fd0\u7b97\u7b26\uff0c\u4ece\u800c\u8df3\u8fc7\u4e86std :: swap\u4f1a\u5bfc\u81f4\u7684\u4e0d\u5fc5\u8981\u7684\u7c7b\u6784\u9020\u548c\u7834\u574f\u3002\uff09</p> <p>\u5177\u4f53\u4f8b\u5b50\u5982\u4e0b\uff1a</p> <pre><code>namespace A {\ntemplate&lt;typename T&gt;\nclass smart_ptr {\npublic:\nsmart_ptr() noexcept : ptr_(new T()) {\n\n}\n\nsmart_ptr(const T &amp;ptr) noexcept : ptr_(new T(ptr)) {\n\n}\n\nsmart_ptr(smart_ptr &amp;rhs) noexcept {\nptr_ = rhs.release();       // \u91ca\u653e\u6240\u6709\u6743,\u6b64\u65f6rhs\u7684ptr_\u6307\u9488\u4e3anullptr\n}\n\nvoid swap(smart_ptr &amp;rhs) noexcept { // noexcept == throw() \u4fdd\u8bc1\u4e0d\u629b\u51fa\u5f02\u5e38\nusing std::swap;\nswap(ptr_, rhs.ptr_);\n}\n\nT *release() noexcept {\nT *ptr = ptr_;\nptr_ = nullptr;\nreturn ptr;\n}\n\nT *get() const noexcept {\nreturn ptr_;\n}\n\nprivate:\nT *ptr_;\n};\n\n// \u63d0\u4f9b\u4e00\u4e2a\u975e\u6210\u5458swap\u51fd\u6570for ADL(Argument Dependent Lookup)\ntemplate&lt;typename T&gt;\nvoid swap(A::smart_ptr&lt;T&gt; &amp;lhs, A::smart_ptr&lt;T&gt; &amp;rhs) noexcept {\nlhs.swap(rhs);\n}\n}\n// \u6ce8\u91ca\u5f00\u542f,\u4f1a\u5f15\u53d1ADL\u51b2\u7a81\n//namespace std {\n//    // \u63d0\u4f9b\u4e00\u4e2a\u975e\u6210\u5458swap\u51fd\u6570for ADL(Argument Dependent Lookup)\n//    template&lt;typename T&gt;\n//    void swap(A::smart_ptr&lt;T&gt; &amp;lhs, A::smart_ptr&lt;T&gt; &amp;rhs) noexcept {\n//        lhs.swap(rhs);\n//    }\n//\n//}\n\nint main() {\n\nusing std::swap;\nA::smart_ptr&lt;std::string&gt; s1(\"hello\"), s2(\"world\");\n// \u4ea4\u6362\u524d\nstd::cout &lt;&lt; *s1.get() &lt;&lt; \" \" &lt;&lt; *s2.get() &lt;&lt; std::endl;\nswap(s1, s2);      // \u8fd9\u91ccswap \u80fd\u591f\u901a\u8fc7Koenig\u641c\u7d22\u6216\u8005\u8bf4ADL\u6839\u636es1\u4e0es2\u7684\u547d\u540d\u7a7a\u95f4\u6765\u67e5\u627eswap\u51fd\u6570\n// \u4ea4\u6362\u540e\nstd::cout &lt;&lt; *s1.get() &lt;&lt; \" \" &lt;&lt; *s2.get() &lt;&lt; std::endl;\ns1=s2;\n}\n</code></pre> <p>\u73b0\u5728\u4e3a\u4e86\u8ba9\u4e0a\u8ff0\u7684<code>s1=s2</code>\u5b8c\u6210\u5de5\u4f5c\uff0c\u5fc5\u987b\u5b9e\u73b0\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002</p> <p>\u65b9\u6cd51</p> <p>\u4e3a\u4e86\u907f\u514d\u81ea\u8d4b\u503c,\u901a\u5e38\u91c7\u7528\u4e0b\u9762\u5199\u6cd5 \u3002</p> <p>\u4e0d\u597d!  </p> <p>\u4e0d\u5177\u5907\u5f02\u5e38\u5b89\u5168,\u53ea\u5177\u5907\u81ea\u6211\u8d4b\u503c\u5b89\u5168\u6027</p> <pre><code>smart_ptr &amp;operator=(const smart_ptr &amp;rhs) {\nif (*this != rhs) {\ndelete ptr_;\nptr_ = new T(rhs.ptr_);  // \u5f53new \u53d1\u751f\u5f02\u5e38,\u6b64\u65f6ptr_\u6307\u5411\u7684\u800c\u662f\u4e00\u5757\u88ab\u5220\u9664\u533a\u57df,\u800c\u4e0d\u662f\u88ab\u8d4b\u503c\u5bf9\u8c61\u7684\u533a\u57df\nreturn *this;\n}\nreturn *this;\n}\n</code></pre> <p>\u65b9\u6cd52</p> <p>\u5982\u679cnew\u51fa\u73b0\u5f02\u5e38,ptr_\u4f1a\u4fdd\u6301\u539f\u88c5!  \u4e5f\u53ef\u4ee5\u5904\u7406\u81ea\u6211\u8d4b\u503c! \u8fd8\u662f\u4e0d\u591f\u597d!</p> <p>\u8fd9\u6837\u5c31\u4f1a\u5bfc\u81f4\u4ee3\u7801\u81a8\u80c0\uff0c\u4e8e\u662f\u5bfc\u81f4\u4e86\u53e6\u4e00\u4e2a\u95ee\u9898\uff1a\u4ee3\u7801\u5197\u4f59</p> <pre><code>// \u65b9\u6cd52\uff1a\u5982\u679cnew\u51fa\u73b0\u5f02\u5e38,ptr_\u4f1a\u4fdd\u6301\u539f\u88c5!  \u4e5f\u53ef\u4ee5\u5904\u7406\u81ea\u6211\u8d4b\u503c! \u8fd8\u662f\u4e0d\u591f\u597d!\nsmart_ptr &amp;operator=(const smart_ptr &amp;rhs) {\nT *origin = ptr_;\nptr_ = new T(rhs.ptr_);\ndelete origin;\nreturn *this;\n}\n</code></pre> <p>\u65b9\u6cd53</p> <p>copy and swap \u5f88\u597d!</p> <pre><code>smart_ptr &amp;operator=(smart_ptr &amp;rhs) noexcept {\nsmart_ptr tmp(rhs);\nswap(tmp);\nreturn *this;\n}\n</code></pre> <p>\u65b9\u6cd54</p> <p>\u6539\u4e3a\u4f20\u503c\uff0c\u540c\u65b9\u6cd53\uff01</p> <pre><code>smart_ptr &amp;operator=(smart_ptr rhs) noexcept {\nswap(rhs);\nreturn *this;\n}\n</code></pre> <p>C++11 move</p> <p>\u6211\u4eec\u5728big three\u4e0a\u52a0\u4e0amove ctor\u4e0emove assignment\u5c31\u6784\u6210\u4e86big five\u3002</p> <p>\u6b64\u65f6\u518d\u6b21\u62d3\u5c55\u4e0a\u8ff0\u7684\u4ee3\u7801\uff1a</p> <pre><code>// move ctor\nsmart_ptr(smart_ptr &amp;&amp;rhs) noexcept {\nstd::cout &lt;&lt; \"move ctor\" &lt;&lt; std::endl;\nptr_ = rhs.ptr_;\nif (ptr_)\nrhs.ptr_ = nullptr;\n}\n\n// move assignment\nsmart_ptr &amp;operator=(smart_ptr &amp;&amp;rhs) noexcept {\nstd::cout &lt;&lt; \"move assignment\" &lt;&lt; std::endl;\nsmart_ptr tmp(rhs);\nswap(rhs);\nreturn *this;\n}\n</code></pre> <p>\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u6bd4\u90a3\u4e2a\u4e0d\u9700\u8981\u591a\u5199\u4ee3\u7801move assignment\uff0ccopy-and-swap \u6280\u5de7 \u548c move-and-swap \u6280\u5de7\u662f\u5171\u4eab\u540c\u4e00\u4e2a\u51fd\u6570\u7684\u3002\u5f53copy\u6784\u9020\u4e3a\u4e0a\u8ff0\u7684\u65b9\u6cd54\u65f6\uff0c\u5bf9\u4e8eC++ 11\uff0c\u7f16\u8bd1\u5668\u4f1a\u4f9d\u636e\u53c2\u6570\u662f\u5de6\u503c\u8fd8\u662f\u53f3\u503c\u5728\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u79fb\u52a8\u6784\u9020\u51fd\u6570\u95f4\u8fdb\u884c\u9009\u62e9\uff1a</p> <pre><code>smart_ptr &amp;operator=(smart_ptr rhs) noexcept {\nswap(rhs);\nreturn *this;\n}\n</code></pre> <p>\u6240\u4ee5\u5f53\u8fd9\u4e2a\u540c\u4e0a\u8ff0\u5199\u7684</p> <pre><code>smart_ptr &amp;operator=(smart_ptr &amp;&amp;rhs) noexcept{}\n</code></pre> <p>\u540c\u65f6\u5b58\u5728\uff0c\u5c31\u4f1a\u51fa\u73b0error: ambiguous overload for \u2018operator=\u2019 \u3002</p> <p>\u8c03\u7528\u5904\u5982\u4e0b\uff1a</p> <pre><code>A::smart_ptr&lt;std::string&gt; s1(\"hello\"), s2(\"world\");\nA::smart_ptr&lt;std::string&gt; s3 = s1;\nA::smart_ptr&lt;std::string&gt; s4 = std::move(s1);\n</code></pre> <ul> <li>\u5982\u679c\u662f s3 = s1\uff0c\u8fd9\u6837\u5c31\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u521d\u59cb\u5316other\uff08\u56e0\u4e3as1\u662f\u5de6\u503c\uff09\uff0c\u8d4b\u503c\u64cd\u4f5c\u7b26\u4f1a\u4e0e\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u4ea4\u6362\u6570\u636e\uff0c\u6df1\u5ea6\u62f7\u8d1d\u3002\u8fd9\u5c31\u662fcopy and swap \u60ef\u7528\u6cd5\u7684\u5b9a\u4e49\uff1a\u6784\u9020\u4e00\u4e2a\u526f\u672c\uff0c\u4e0e\u526f\u672c\u4ea4\u6362\u6570\u636e\uff0c\u5e76\u8ba9\u526f\u672c\u5728\u4f5c\u7528\u57df\u5185\u81ea\u52a8\u9500\u6bc1\u3002</li> <li>\u5982\u679c\u662fs4 = std::move(s1)\uff0c\u8fd9\u6837\u5c31\u4f1a\u8c03\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570\u6765\u521d\u59cb\u5316rhs\uff08\u56e0\u4e3astd::move(s1)\u662f\u53f3\u503c\uff09\uff0c\u6240\u4ee5\u8fd9\u91cc\u6ca1\u6709\u6df1\u5ea6\u62f7\u8d1d\uff0c\u53ea\u6709\u9ad8\u6548\u7684\u6570\u636e\u8f6c\u79fb\u3002</li> </ul> <p>\u56e0\u6b64\u4e5f\u53ef\u4ee5\u79f0\u547c\u5b83\u4e3a\u201c\u7edf\u4e00\u8d4b\u503c\u64cd\u4f5c\u7b26\u201d\uff0c\u56e0\u4e3a\u5b83\u5408\u5e76\u4e86\"\u62f7\u8d1d\u8d4b\u503c\"\u4e0e\"\u79fb\u52a8\u8d4b\u503c\"\u3002</p>"},{"location":"codingStyleIdioms/enumclass/","title":"C++\u60ef\u7528\u6cd5\u4e4benum class","text":"<p>\u5728Effective modern C++\u4e2dItem 10: Prefer scoped enums to unscoped enum\uff0c\u8c03\u5230\u8981\u7528\u6709\u8303\u56f4\u7684enum class\u4ee3\u66ff\u65e0\u8303\u56f4\u7684enum\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>enum Shape {circle,retangle};\nauto circle = 10;  // error\n</code></pre> <p>\u4e0a\u8ff0\u9519\u8bef\u662f\u56e0\u4e3a\u4e24\u4e2acircle\u5728\u540c\u4e00\u8303\u56f4\u3002 \u5bf9\u4e8eenum\u7b49\u4ef7\u4e8e\uff1a</p> <pre><code>#define circle 0\n#define retangle 1\n</code></pre> <p>\u56e0\u6b64\u540e\u9762\u518d\u53bb\u5b9a\u4e49circle\u5c31\u4f1a\u51fa\u9519\u3002</p> <p>\u6240\u4ee5\u4e0d\u7ba1\u679a\u4e3e\u540d\u662f\u5426\u4e00\u6837,\u91cc\u9762\u7684\u6210\u5458\u53ea\u8981\u6709\u4e00\u81f4\u7684,\u5c31\u4f1a\u51fa\u95ee\u9898\u3002 \u4f8b\u5982\uff1a</p> <pre><code>enum A {a,b};\nenum B {c,a};\n</code></pre> <p>a\u51fa\u73b0\u4e24\u6b21,\u5728enum B\u7684a\u5904\u62a5\u9519\u3002</p> <p>\u6839\u636e\u524d\u9762\u6211\u4eec\u77e5\u9053,enum\u540d\u5728\u8303\u56f4\u65b9\u9762\u6ca1\u6709\u4ec0\u4e48\u4f5c\u7528,\u56e0\u6b64\u6211\u4eec\u60f3\u5230\u4e86namespace,\u5982\u4e0b\u4f8b\u5b50:</p> <pre><code>// \u5728\u521b\u5efa\u679a\u4e3e\u65f6\uff0c\u5c06\u5b83\u4eec\u653e\u5728\u540d\u79f0\u7a7a\u95f4\u4e2d\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u4f7f\u7528\u6709\u610f\u4e49\u7684\u540d\u79f0\u8bbf\u95ee\u5b83\u4eec:\nnamespace EntityType {\nenum Enum {\nGround = 0,\nHuman,\nAerial,\nTotal\n};\n}\n\nvoid foo(EntityType::Enum entityType)\n{\nif (entityType == EntityType::Ground) {\n/*code*/\n}\n}\n</code></pre> <p>\u5c06\u547d\u540d\u7a7a\u95f4\u8d77\u7684\u6709\u610f\u601d\u70b9,\u5c31\u53ef\u4ee5\u8fbe\u5230\u60f3\u8981\u7684\u6548\u679c\u3002</p> <p>\u4f46\u662f\u4e0d\u65ad\u7684\u4f7f\u7528\u547d\u540d\u7a7a\u95f4,\u52bf\u5fc5\u592a\u7e41\u7410,\u800c\u4e14\u5982\u679c\u6211\u4e0d\u60f3\u4f7f\u7528namespace,\u8981\u8fbe\u5230\u8fd9\u6837\u7684\u6548\u679c,\u4fbf\u4f1a\u53d8\u5f97\u4e0d\u5b89\u5168,\u4e5f\u6ca1\u6709\u7ea6\u675f\u3002</p> <p>\u56e0\u6b64\u5728c++11\u540e,\u5f15\u5165enum class\u3002</p> <p>enum class \u89e3\u51b3\u4e86\u4e3aenum\u6210\u5458\u5b9a\u4e49\u7c7b\u578b\u3001\u7c7b\u578b\u5b89\u5168\u3001\u7ea6\u675f\u7b49\u95ee\u9898\u3002 \u56de\u5230\u4e0a\u8ff0\u4f8b\u5b50\uff1a</p> <pre><code>// enum class\nenum class EntityType {\nGround = 0,\nHuman,\nAerial,\nTotal\n};\n\nvoid foo(EntityType entityType)\n{\nif (entityType == EntityType::Ground) {\n/*code*/\n}\n}\n</code></pre> <p>\u8fd9\u4fbf\u662f\u8fd9\u4e00\u8282\u8981\u9610\u8ff0\u7684\u60ef\u7528\u6cd5:enum class\u3002</p>"},{"location":"codingStyleIdioms/pImpl/","title":"C++\u60ef\u7528\u6cd5\u4e4bpImpl","text":"<p>\u201c\u6307\u5411\u5b9e\u73b0\u7684\u6307\u9488\u201d\u6216\u201cpImpl\u201d\u662f\u4e00\u79cd C++ \u7f16\u7a0b\u6280\u5de7,\u5b83\u5c06\u7c7b\u7684\u5b9e\u73b0\u7ec6\u8282\u4ece\u5bf9\u8c61\u8868\u793a\u4e2d\u79fb\u9664\uff0c\u653e\u5230\u4e00\u4e2a\u5206\u79bb\u7684\u7c7b\u4e2d\uff0c\u5e76\u4ee5\u4e00\u4e2a\u4e0d\u900f\u660e\u7684\u6307\u9488\u8fdb\u884c\u8bbf\u95ee\u3002</p> <p>\u4f7f\u7528pImpl\u60ef\u7528\u6cd5\u7684\u539f\u56e0\u5982\u4e0b\uff1a</p> <p>\u8003\u8651\u5982\u4e0b\u4f8b\u5b50\uff1a</p> <pre><code>class X\n{\nprivate:\nC c;\nD d;  } ;\n</code></pre> <p>\u53d8\u6210pImpl\u5c31\u662f\u4e0b\u9762\u8fd9\u6837\u5b50</p> <pre><code>class X\n{\nprivate:\nstruct XImpl;\nXImpl* pImpl;       };\n</code></pre> <p>CPP\u5b9a\u4e49\uff1a</p> <pre><code>struct X::XImpl\n{\nC c;\nD d;\n};\n</code></pre> <ul> <li>\u4e8c\u8fdb\u5236\u517c\u5bb9\u6027</li> </ul> <p>\u5f00\u53d1\u5e93\u65f6\uff0c\u53ef\u4ee5\u5728\u4e0d\u7834\u574f\u4e0e\u5ba2\u6237\u7aef\u7684\u4e8c\u8fdb\u5236\u517c\u5bb9\u6027\u7684\u60c5\u51b5\u4e0b\u5411XImpl\u6dfb\u52a0/\u4fee\u6539\u5b57\u6bb5\uff08\u8fd9\u5c06\u5bfc\u81f4\u5d29\u6e83\uff01\uff09\u3002 \u7531\u4e8e\u5728\u5411Ximpl\u7c7b\u6dfb\u52a0\u65b0\u5b57\u6bb5\u65f6X\u7c7b\u7684\u4e8c\u8fdb\u5236\u5e03\u5c40\u4e0d\u4f1a\u66f4\u6539\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b89\u5168\u5730\u5728\u6b21\u8981\u7248\u672c\u66f4\u65b0\u4e2d\u5411\u5e93\u6dfb\u52a0\u65b0\u529f\u80fd\u3002</p> <p>\u5f53\u7136\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5728\u4e0d\u7834\u574f\u4e8c\u8fdb\u5236\u517c\u5bb9\u6027\u7684\u60c5\u51b5\u4e0b\u5411X / XImpl\u6dfb\u52a0\u65b0\u7684\u516c\u5171/\u79c1\u6709\u975e\u865a\u62df\u65b9\u6cd5\uff0c\u4f46\u8fd9\u4e0e\u6807\u51c6\u7684\u6807\u5934/\u5b9e\u73b0\u6280\u672f\u76f8\u5f53\u3002</p> <ul> <li>\u6570\u636e\u9690\u85cf</li> </ul> <p>\u5982\u679c\u60a8\u6b63\u5728\u5f00\u53d1\u4e00\u4e2a\u5e93\uff0c\u5c24\u5176\u662f\u4e13\u6709\u5e93\uff0c\u5219\u53ef\u80fd\u4e0d\u5e0c\u671b\u516c\u5f00\u7528\u4e8e\u5b9e\u73b0\u5e93\u516c\u5171\u63a5\u53e3\u7684\u5176\u4ed6\u5e93/\u5b9e\u73b0\u6280\u672f\u3002 \u8981\u4e48\u662f\u7531\u4e8e\u77e5\u8bc6\u4ea7\u6743\u95ee\u9898\uff0c\u8981\u4e48\u662f\u56e0\u4e3a\u60a8\u8ba4\u4e3a\u7528\u6237\u53ef\u80fd\u4f1a\u88ab\u8bf1\u4f7f\u5bf9\u5b9e\u73b0\u8fdb\u884c\u5371\u9669\u7684\u5047\u8bbe\uff0c\u6216\u8005\u53ea\u662f\u901a\u8fc7\u4f7f\u7528\u53ef\u6015\u7684\u8f6c\u6362\u6280\u5de7\u6765\u7834\u574f\u5c01\u88c5\u3002 PIMPL\u89e3\u51b3/\u7f13\u89e3\u4e86\u8fd9\u4e00\u96be\u9898\u3002</p> <ul> <li>\u7f16\u8bd1\u65f6\u95f4</li> </ul> <p>\u7f16\u8bd1\u65f6\u95f4\u51cf\u5c11\u4e86\uff0c\u56e0\u4e3a\u5f53\u60a8\u5411XImpl\u7c7b\u6dfb\u52a0/\u5220\u9664\u5b57\u6bb5\u548c/\u6216\u65b9\u6cd5\u65f6\uff08\u4ec5\u6620\u5c04\u5230\u6807\u51c6\u6280\u672f\u4e2d\u6dfb\u52a0\u79c1\u6709\u5b57\u6bb5/\u65b9\u6cd5\u7684\u60c5\u51b5\uff09\uff0c\u4ec5\u9700\u8981\u91cd\u5efaX\u7684\u6e90\uff08\u5b9e\u73b0\uff09\u6587\u4ef6\u3002 \u5b9e\u9645\u4e0a\uff0c\u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u64cd\u4f5c\u3002</p> <p>\u4f7f\u7528\u6807\u51c6\u7684\u6807\u5934/\u5b9e\u73b0\u6280\u672f\uff08\u6ca1\u6709PIMPL\uff09\uff0c\u5f53\u60a8\u5411X\u6dfb\u52a0\u65b0\u5b57\u6bb5\u65f6\uff0c\u66fe\u7ecf\u91cd\u65b0\u5206\u914dX\uff08\u5728\u5806\u6808\u6216\u5806\u4e0a\uff09\u7684\u6bcf\u4e2a\u5ba2\u6237\u7aef\u90fd\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\uff0c\u56e0\u4e3a\u5b83\u5fc5\u987b\u8c03\u6574\u5206\u914d\u7684\u5927\u5c0f \u3002 \u597d\u5427\uff0c\u6bcf\u4e2a\u4ece\u672a\u5206\u914dX\u7684\u5ba2\u6237\u7aef\u4e5f\u90fd\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\uff0c\u4f46\u8fd9\u53ea\u662f\u5f00\u9500\uff08\u5ba2\u6237\u7aef\u4e0a\u7684\u7ed3\u679c\u4ee3\u7801\u662f\u76f8\u540c\u7684\uff09\u3002</p> <p>https://stackoverflow.com/questions/8972588/is-the-pimpl-idiom-really-used-in-practices</p>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/","title":"C++\u591a\u7ebf\u7a0b\u5f00\u53d1\u4e4b\u4e92\u65a5\u9501","text":"<ul> <li>C++\u591a\u7ebf\u7a0b\u5f00\u53d1\u4e4b\u4e92\u65a5\u9501<ul> <li>1.\u7406\u89e3\u7ebf\u7a0b\u4e0e\u8fdb\u7a0b</li> <li>2.\u4e94\u79cd\u521b\u5efa\u7ebf\u7a0b\u7684\u65b9\u5f0f<ul> <li>2.1 \u51fd\u6570\u6307\u9488</li> <li>2.2 Lambda\u51fd\u6570</li> <li>2.3 \u4eff\u51fd\u6570</li> <li>2.4 \u975e\u9759\u6001\u6210\u5458\u51fd\u6570</li> <li>2.5 \u9759\u6001\u6210\u5458\u51fd\u6570</li> </ul> </li> <li>3.join\u4e0edetach<ul> <li>3.1 join</li> <li>3.2 detach</li> </ul> </li> <li>4.\u4e34\u754c\u533a\u4e0e\u4e92\u65a5\u91cf<ul> <li>4.1 \u4ec0\u4e48\u662f\u4e34\u754c\u533a(Critical Sections)\uff1f</li> <li>4.2 \u53ea\u662f\u589e\u52a0\u4e00\u4e2a\u53d8\u91cf\u662f\u4e34\u754c\u533a\u5417?</li> <li>4.3 \u5982\u4f55\u786e\u4fdd\u4e00\u6b21\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u5168\u5c40\u53d8\u91cf?</li> </ul> </li> <li>\u53c2\u8003\u8d44\u6599</li> </ul> </li> </ul> <p>\u672c\u6587\u4e2d\u7684\u6240\u6709\u4ee3\u7801\u89c1\u300aC++\u90a3\u4e9b\u4e8b\u300b\u4ed3\u5e93\u3002</p> <p>https://github.com/Light-City/CPlusPlusThings</p>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/#1","title":"1.\u7406\u89e3\u7ebf\u7a0b\u4e0e\u8fdb\u7a0b","text":"<p>\u7ebf\u7a0b\u662f\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d \u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\u3002\u53ef\u4ee5\u628a\u4e00\u4e2a\u7a0b\u5e8f\u7406\u89e3\u4e3a\u8fdb\u7a0b\uff0c\u8fdb\u7a0b\u53c8\u5305\u542b\u591a\u4e2a\u7ebf\u7a0b\u3002</p> <p>\u4f8b\u5982\uff1a\u6d4f\u89c8\u5668\u662f\u4e2a\u8fdb\u7a0b\uff0c\u800c\u6bcf\u5f00\u4e00\u4e2atab\u5c31\u662f\u4e00\u4e2a\u7ebf\u7a0b\u3002</p> <p>\u4e24\u8005\u7b80\u5355\u533a\u522b\uff1a</p> <ul> <li>\u5730\u5740\u7a7a\u95f4\u548c\u5176\u5b83\u8d44\u6e90\uff1a\u8fdb\u7a0b\u95f4\u76f8\u4e92\u72ec\u7acb\uff0c\u540c\u4e00\u8fdb\u7a0b\u7684\u5404\u7ebf\u7a0b\u95f4\u5171\u4eab\u3002\u67d0\u8fdb\u7a0b\u5185\u7684\u7ebf\u7a0b\u5728\u5176\u5b83\u8fdb\u7a0b\u4e0d\u53ef\u89c1\u3002  </li> <li>\u901a\u4fe1\uff1a \u8fdb\u7a0b\u95f4\u901a\u4fe1IPC\uff0c\u7ebf\u7a0b\u95f4\u53ef\u4ee5\u76f4\u63a5\u8bfb\u5199\u8fdb\u7a0b\u6570\u636e\u6bb5\uff08\u5982\u5168\u5c40\u53d8\u91cf\uff09\u6765\u8fdb\u884c\u901a\u4fe1\u2014\u2014\u9700\u8981\u8fdb\u7a0b\u540c\u6b65\u548c\u4e92\u65a5\u624b\u6bb5\u7684\u8f85\u52a9\uff0c\u4ee5\u4fdd\u8bc1\u6570\u636e\u7684\u4e00\u81f4\u6027\u3002  </li> <li>\u8c03\u5ea6\u548c\u5207\u6362\uff1a\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\u6bd4\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u5207\u6362\u8981\u5feb\u5f97\u591a\u3002  </li> <li>\u5728\u591a\u7ebf\u7a0bOS\u4e2d\uff0c\u8fdb\u7a0b\u4e0d\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u7684\u5b9e\u4f53\u3002</li> </ul> <p>\u81f3\u4e8eIPC\u901a\u4fe1\u4e0e\u7ebf\u7a0b\u901a\u4fe1\u540e\u9762\u4f1a\u65b0\u5f00\u4e00\u7bc7\u6587\u7ae0\u3002</p>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/#2","title":"2.\u4e94\u79cd\u521b\u5efa\u7ebf\u7a0b\u7684\u65b9\u5f0f","text":"<ul> <li>\u51fd\u6570\u6307\u9488</li> <li>Lambda\u51fd\u6570\u5427</li> <li>Functor(\u4eff\u51fd\u6570)</li> <li>\u975e\u9759\u6001\u6210\u5458\u51fd\u6570</li> <li>\u9759\u6001\u6210\u5458\u51fd\u6570</li> </ul>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/#21","title":"2.1 \u51fd\u6570\u6307\u9488","text":"<pre><code>// 1.\u51fd\u6570\u6307\u9488\nvoid fun(int x) {\nwhile (x-- &gt; 0) {\ncout &lt;&lt; x &lt;&lt; endl;\n}\n}\n// \u8c03\u7528\nstd::thread t1(fun, 10);\nt1.join();\n</code></pre>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/#22-lambda","title":"2.2 Lambda\u51fd\u6570","text":"<pre><code>// \u6ce8\u610f\uff1a\u5982\u679c\u6211\u4eec\u521b\u5efa\u591a\u7ebf\u7a0b \u5e76\u4e0d\u4f1a\u4fdd\u8bc1\u54ea\u4e00\u4e2a\u5148\u5f00\u59cb\nint main() {\n// 2.Lambda\u51fd\u6570\nauto fun = [](int x) {\nwhile (x-- &gt; 0) {\ncout &lt;&lt; x &lt;&lt; endl;\n}\n};\n//    std::1.thread t1(fun, 10);\n// \u4e5f\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\uff1a\nstd::thread t1_1([](int x) {\nwhile (x-- &gt; 0) {\ncout &lt;&lt; x &lt;&lt; endl;\n}\n}, 11);\n//    std::1.thread t2(fun, 10);\n//    t1.join();\nt1_1.join();\n//    t2.join();\nreturn 0;\n}\n</code></pre>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/#23","title":"2.3 \u4eff\u51fd\u6570","text":"<pre><code>// 3.functor (Funciton Object)\nclass Base {\npublic:\nvoid operator()(int x) {\nwhile (x-- &gt; 0) {\ncout &lt;&lt; x &lt;&lt; endl;\n}\n}\n};\n// \u8c03\u7528\nthread t(Base(), 10);\nt.join();\n</code></pre>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/#24","title":"2.4 \u975e\u9759\u6001\u6210\u5458\u51fd\u6570","text":"<pre><code>// 4.Non-static member function\nclass Base {\npublic:\nvoid fun(int x) {\nwhile (x-- &gt; 0) {\ncout &lt;&lt; x &lt;&lt; endl;\n}\n}\n};\n// \u8c03\u7528\nthread t(&amp;Base::fun,&amp;b, 10);\nt.join();\n</code></pre>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/#25","title":"2.5 \u9759\u6001\u6210\u5458\u51fd\u6570","text":"<pre><code>// 4.Non-static member function\nclass Base {\npublic:\nstatic void fun(int x) {\nwhile (x-- &gt; 0) {\ncout &lt;&lt; x &lt;&lt; endl;\n}\n}\n};\n// \u8c03\u7528\nthread t(&amp;Base::fun, 10);\nt.join();\n</code></pre>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/#3joindetach","title":"3.join\u4e0edetach","text":""},{"location":"concurrency/Threading_In_CPlusPlus/thread/#31-join","title":"3.1 join","text":"<ul> <li>\u4e00\u65e6\u7ebf\u7a0b\u5f00\u59cb\uff0c\u6211\u4eec\u8981\u60f3\u7b49\u5f85\u7ebf\u7a0b\u5b8c\u6210\uff0c\u9700\u8981\u5728\u8be5\u5bf9\u8c61\u4e0a\u8c03\u7528join()</li> <li>\u53cc\u91cdjoin\u5c06\u5bfc\u81f4\u7a0b\u5e8f\u7ec8\u6b62</li> <li>\u5728join\u4e4b\u524d\u6211\u4eec\u5e94\u8be5\u68c0\u67e5\u663e\u793a\u662f\u5426\u53ef\u4ee5\u88abjoin,\u901a\u8fc7\u4f7f\u7528joinable()</li> </ul> <pre><code>void run(int count) {\nwhile (count-- &gt; 0) {\ncout &lt;&lt; count &lt;&lt; endl;\n}\nstd::this_thread::sleep_for(chrono::seconds(3));\n}\n\nint main() {\nthread t1(run, 10);\ncout &lt;&lt; \"main()\" &lt;&lt; endl;\nt1.join();\nif (t1.joinable()) {\nt1.join();\n}\ncout &lt;&lt; \"main() after\" &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/#32-detach","title":"3.2 detach","text":"<ul> <li>\u8fd9\u7528\u4e8e\u4ece\u7236\u7ebf\u7a0b\u5206\u79bb\u65b0\u521b\u5efa\u7684\u7ebf\u7a0b</li> <li>\u5728\u5206\u79bb\u7ebf\u7a0b\u4e4b\u524d\uff0c\u8bf7\u52a1\u5fc5\u68c0\u67e5\u5b83\u662f\u5426\u53ef\u4ee5joinable\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e24\u6b21\u5206\u79bb\uff0c\u5e76\u4e14\u53cc\u91cddetach()\u5c06\u5bfc\u81f4\u7a0b\u5e8f\u7ec8\u6b62 </li> <li>\u5982\u679c\u6211\u4eec\u6709\u5206\u79bb\u7684\u7ebf\u7a0b\u5e76\u4e14main\u51fd\u6570\u6b63\u5728\u8fd4\u56de\uff0c\u90a3\u4e48\u5206\u79bb\u7684\u7ebf\u7a0b\u6267\u884c\u5c06\u88ab\u6302\u8d77</li> </ul> <pre><code>void run(int count) {\nwhile (count-- &gt; 0) {\ncout &lt;&lt; count &lt;&lt; endl;\n}\nstd::this_thread::sleep_for(chrono::seconds(3));\n}\n\nint main() {\nthread t1(run, 10);\ncout &lt;&lt; \"main()\" &lt;&lt; endl;\nt1.detach();\nif(t1.joinable())\nt1.detach();\ncout &lt;&lt; \"main() after\" &lt;&lt; endl;\nreturn 0;\n</code></pre>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/#4","title":"4.\u4e34\u754c\u533a\u4e0e\u4e92\u65a5\u91cf","text":""},{"location":"concurrency/Threading_In_CPlusPlus/thread/#41-critical-sections","title":"4.1 \u4ec0\u4e48\u662f\u4e34\u754c\u533a(Critical Sections)\uff1f","text":"<p>\u4e34\u754c\u6bb5\u662f\u4e00\u6bb5\u4ee3\u7801\uff0c\u5982\u679c\u8981\u4f7f\u7a0b\u5e8f\u6b63\u786e\u8fd0\u884c\uff0c\u4e00\u6b21\u53ea\u80fd\u7531\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u3002\u5982\u679c\u4e24\u4e2a\u7ebf\u7a0b(\u6216\u8fdb\u7a0b)\u540c\u65f6\u6267\u884c\u4e34\u754c\u533a\u5185\u7684\u4ee3\u7801\uff0c\u5219\u7a0b\u5e8f\u53ef\u80fd\u4e0d\u518d\u5177\u6709\u6b63\u786e\u7684\u884c\u4e3a\u3002</p>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/#42","title":"4.2 \u53ea\u662f\u589e\u52a0\u4e00\u4e2a\u53d8\u91cf\u662f\u4e34\u754c\u533a\u5417?","text":"<p>\u53ef\u80fd\u662f\u5427\u3002 </p> <p>\u589e\u52a0\u53d8\u91cf\uff08i ++\uff09\u7684\u8fc7\u7a0b\u5206\u4e09\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li>\u5c06\u5185\u5b58\u5185\u5bb9\u590d\u5236\u5230CPU\u5bc4\u5b58\u5668\u3002 load</li> <li>\u5728CPU\u4e2d\u589e\u52a0\u8be5\u503c\u3002  increment</li> <li>\u5c06\u65b0\u503c\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u3002 store</li> </ul> <p>\u5982\u679c\u53ea\u80fd\u901a\u8fc7\u4e00\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u8be5\u5185\u5b58\u4f4d\u7f6e\uff08\u4f8b\u5982\u4e0b\u9762\u7684\u53d8\u91cfi\uff09\uff0c\u5219\u4e0d\u4f1a\u51fa\u73b0\u4e89\u7528\u60c5\u51b5\uff0c\u4e5f\u6ca1\u6709\u4e0ei\u5173\u8054\u7684\u4e34\u754c\u533a\u3002 \u4f46\u662fsum\u53d8\u91cf\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e24\u4e2a\u7ebf\u7a0b\u8fdb\u884c\u8bbf\u95ee\u3002 \u4e24\u4e2a\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u540c\u65f6\u589e\u52a0\u53d8\u91cf\u3002</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;mutex&gt;\n#include &lt;thread&gt;\n\nusing namespace std;\n\nint sum = 0; //shared\n\nmutex m;\n\nvoid *countgold() {\nint i; //local to each thread\nfor (i = 0; i &lt; 10000000; i++) {\nsum += 1;\n}\nreturn NULL;\n}\n\nint main() {\nthread t1(countgold);\nthread t2(countgold);\n\n//Wait for both threads to finish\nt1.join();\nt2.join();\n\ncout &lt;&lt; \"sum = \" &lt;&lt; sum &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>\u4e0a\u9762\u4ee3\u7801\u7684\u5178\u578b\u8f93\u51fa\u662fsum\u603b\u548c\u4e3a20000000\u3002\u7531\u4e8e\u5b58\u5728\u7ade\u4e89\u6761\u4ef6\uff0c\u6bcf\u6b21\u8fd0\u884c\u7a0b\u5e8f\u90fd\u4f1a\u6253\u5370\u4e0d\u540c\u7684\u603b\u548c\u3002 \u8be5\u4ee3\u7801\u4e0d\u4f1a\u963b\u6b62\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bfb\u5199\u603b\u548c\u3002 \u4f8b\u5982\uff0c\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u5c06sum\u7684\u5f53\u524d\u503c\u590d\u5236\u5230\u8fd0\u884c\u6bcf\u4e2a\u7ebf\u7a0b\u7684CPU\u4e2d\uff08\u8ba9\u6211\u4eec\u9009\u62e9123\uff09\u3002 \u4e24\u4e2a\u7ebf\u7a0b\u90fd\u5c06\u4e00\u4e2a\u9012\u589e\u5230\u81ea\u5df1\u7684\u526f\u672c\u3002 \u4e24\u4e2a\u7ebf\u7a0b\u90fd\u5199\u56de\u8be5\u503c\uff08124\uff09\u3002 \u5982\u679c\u7ebf\u7a0b\u5728\u4e0d\u540c\u65f6\u95f4\u8bbf\u95ee\u4e86\u603b\u548c\uff0c\u5219\u8ba1\u6570\u5c06\u4e3a125\u3002</p>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/#43","title":"4.3 \u5982\u4f55\u786e\u4fdd\u4e00\u6b21\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u5168\u5c40\u53d8\u91cf?","text":"<p>\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u5f53\u524d\u5904\u4e8e\u4e34\u754c\u533a\uff0c\u6211\u4eec\u5e0c\u671b\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7b49\u5f85\uff0c\u76f4\u5230\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u5b8c\u6210\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e92\u65a5\u9501(\u4e92\u65a5\u7684\u7f29\u5199)\u3002</p> <p>\u4e92\u65a5\u9501\u5f62\u8c61\u6bd4\u55bb\uff1a</p> <p></p> <p>\u4e00\u4e2a\u9632\u6b62\u4ed6\u4eba\u8fdb\u5165\u7684\u7b80\u5355\u65b9\u6cd5\uff0c\u5c31\u662f\u95e8\u53e3\u52a0\u4e00\u628a\u9501\u3002\u5148\u5230\u7684\u4eba\u9501\u4e0a\u95e8\uff0c\u540e\u5230\u7684\u4eba\u770b\u5230\u4e0a\u9501\uff0c\u5c31\u5728\u95e8\u53e3\u6392\u961f\uff0c\u7b49\u9501\u6253\u5f00\u518d\u8fdb\u53bb\u3002\u8fd9\u5c31\u53eb\"\u4e92\u65a5\u9501\"\uff08Mutual exclusion\uff0c\u7f29\u5199 Mutex\uff09\uff0c\u9632\u6b62\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bfb\u5199\u67d0\u4e00\u5757\u5185\u5b58\u533a\u57df\u3002</p> <pre><code>m.lock();\nsum += 1;\nm.unlock();\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u5c31\u53ef\u4ee5\u6b63\u5e38\u8f93\u51fa\uff1a<code>sum = 20000000</code>\u3002</p>"},{"location":"concurrency/Threading_In_CPlusPlus/thread/#_1","title":"\u53c2\u8003\u8d44\u6599","text":"<p>http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html?utm_source=com.ideashower.readitlater.pro&amp;utm_medium=social&amp;utm_oi=35626384621568</p> <p>https://www.youtube.com/watch?v=eZ8yKZo-PGw&amp;list=PLk6CEY9XxSIAeK-EAh3hB4fgNvYkYmghp&amp;index=4</p>"},{"location":"concurrency/concurrency_v1/concurrency/","title":"C++ Concurrency in Action","text":"<ul> <li>\u7b2c\u4e00\u7ae0</li> <li>\u7b2c\u4e8c\u7ae0</li> </ul> <p>\u5b66\u4e60\u8d44\u6599\uff1ahttps://chenxiaowei.gitbook.io/cpp_concurrency_in_action/</p>"},{"location":"design_pattern/singleton/singleton/","title":"\u5355\u4f8b\u6a21\u5f0f","text":""},{"location":"design_pattern/singleton/singleton/#c","title":"C++\u8bbe\u8ba1\u6a21\u5f0f\u4e4b\u5355\u4f8b\u6a21\u5f0f","text":""},{"location":"design_pattern/singleton/singleton/#0","title":"0.\u5bfc\u8bed","text":"<p>\u76f8\u4fe1\u5927\u5bb6\u9762\u8bd5\u90fd\u9003\u4e0d\u5f00\u8bbe\u8ba1\u6a21\u5f0f\u8bdd\u9898\uff0c\u672c\u8282\u5c06\u9610\u8ff0\u9762\u8bd5\u4e2d\u7684\u6700\u5e38\u7528\u7684\u8bbe\u8ba1\u6a21\u5f0f(\u5355\u4f8b\u6a21\u5f0f)\uff0c\u4ece\u5206\u7c7b\uff0c\u7ebf\u7a0b\u5b89\u5168\uff0c\u4e0d\u57fa\u4e8eC++11\u6807\u51c6\u7684\u89d2\u5ea6\u4e0e\u57fa\u4e8eC++11\u6807\u51c6\u7684\u89d2\u5ea6\uff0c\u6709\u54ea\u4e9b\u89e3\u51b3\u7ebf\u7a0b\u5b89\u5168\u7684\u5355\u4f8b\u6a21\u5f0f\u65b9\u6848\uff0c\u76f8\u4fe1\u8ba4\u771f\u770b\u5b8c\u672c\u7bc7\u6587\u7ae0\uff0c\u5728\u4ee5\u540e\u9762\u8bd5\u4e2d\u5c31\u4e0d\u7528\u62c5\u5fe7\u4e86\u3002</p>"},{"location":"design_pattern/singleton/singleton/#1","title":"1.\u4f17\u6240\u5468\u77e5\u7684\u5355\u4f8b","text":"<p>\u5728\u4e00\u822c\u4e66\u7c4d\u4e2d\u6216\u8005\u5927\u5bb6\u6bd4\u8f83\u662f\u719f\u77e5\u7684\u5355\u4f8b\u6a21\u5f0f\u662f\u4e0b\u9762\u8fd9\u6837\uff1a</p> <pre><code>class singleton {\nprivate:\nsingleton() {}\nstatic singleton *p;\npublic:\nstatic singleton *instance();\n};\n\nsingleton *singleton::p = nullptr;\n\nsingleton* singleton::instance() {\nif (p == nullptr)\np = new singleton();\nreturn p;\n}\n</code></pre> <p>\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u5b9e\u73b0\uff0c\u5c06\u6784\u9020\u51fd\u6570\u58f0\u660e\u4e3aprivate\u6216protect\u9632\u6b62\u88ab\u5916\u90e8\u51fd\u6570\u5b9e\u4f8b\u5316\uff0c\u5185\u90e8\u6709\u4e00\u4e2a\u9759\u6001\u7684\u7c7b\u6307\u9488\u4fdd\u5b58\u552f\u4e00\u7684\u5b9e\u4f8b\uff0c\u5b9e\u4f8b\u7684\u5b9e\u73b0\u7531\u4e00\u4e2apublic\u65b9\u6cd5\u6765\u5b9e\u73b0\uff0c\u8be5\u65b9\u6cd5\u8fd4\u56de\u8be5\u7c7b\u7684\u552f\u4e00\u5b9e\u4f8b\u3002</p> <p>\u5f53\u7136\u8fd9\u4e2a\u4ee3\u7801\u53ea\u9002\u5408\u5728\u5355\u7ebf\u7a0b\u4e0b\uff0c\u5f53\u591a\u7ebf\u7a0b\u65f6\uff0c\u662f\u4e0d\u5b89\u5168\u7684\u3002\u8003\u8651\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u9996\u6b21\u8c03\u7528instance\u65b9\u6cd5\u4e14\u540c\u65f6\u68c0\u6d4b\u5230p\u662fnullptr\uff0c\u5219\u4e24\u4e2a\u7ebf\u7a0b\u4f1a\u540c\u65f6\u6784\u9020\u4e00\u4e2a\u5b9e\u4f8b\u7ed9p\uff0c\u8fd9\u5c06\u8fdd\u53cd\u4e86\u5355\u4f8b\u7684\u51c6\u5219\u3002</p>"},{"location":"design_pattern/singleton/singleton/#2","title":"2.\u61d2\u6c49\u4e0e\u997f\u6c49","text":"<p>\u5355\u4f8b\u5206\u4e3a\u4e24\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff1a</p> <ul> <li>\u61d2\u6c49</li> <li>\u7b2c\u4e00\u6b21\u7528\u5230\u7c7b\u5b9e\u4f8b\u7684\u65f6\u5019\u624d\u4f1a\u53bb\u5b9e\u4f8b\u5316\uff0c\u4e0a\u8ff0\u5c31\u662f\u61d2\u6c49\u5b9e\u73b0\u3002</li> <li>\u997f\u6c49</li> <li>\u5355\u4f8b\u7c7b\u5b9a\u4e49\u7684\u65f6\u5019\u5c31\u8fdb\u884c\u4e86\u5b9e\u4f8b\u5316\u3002</li> </ul> <p>\u8fd9\u91cc\u4e5f\u7ed9\u51fa\u997f\u6c49\u7684\u5b9e\u73b0\uff1a</p> <pre><code>class singleton {\nprivate:\nsingleton() {}\nstatic singleton *p;\npublic:\nstatic singleton *instance();\n};\n\nsingleton *singleton::p = new singleton();\nsingleton* singleton::instance() {\nreturn p;\n}\n</code></pre> <p>\u5f53\u7136\u8fd9\u4e2a\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u5bf9\u4e8e\u6211\u4eec\u901a\u5e38\u9610\u8ff0\u7684\u7ebf\u7a0b\u4e0d\u5b89\u5168\uff0c\u4e3a\u61d2\u6c49\u6a21\u5f0f\uff0c\u4e0b\u9762\u4f1a\u9610\u8ff0\u61d2\u6c49\u6a21\u5f0f\u7684\u7ebf\u7a0b\u5b89\u5168\u4ee3\u7801\u4f18\u5316\u3002</p>"},{"location":"design_pattern/singleton/singleton/#3","title":"3.\u591a\u7ebf\u7a0b\u52a0\u9501","text":"<p>\u5728C++\u4e2d\u52a0\u9501\u6709\u4e2a\u7c7b\u5b9e\u73b0\u539f\u7406\u91c7\u7528RAII\uff0c\u4e0d\u7528\u624b\u52a8\u7ba1\u7406unlock\uff0c\u90a3\u5c31\u662flock_guard\uff0c\u8fd9\u91cc\u91c7\u7528\u5176\u8fdb\u884c\u52a0\u9501\u3002</p> <pre><code>class singleton {\nprivate:\nsingleton() {}\nstatic singleton *p;\nstatic mutex lock_;\npublic:\nstatic singleton *instance();\n};\n\nsingleton *singleton::p = nullptr;\n\nsingleton* singleton::instance() {\nlock_guard&lt;mutex&gt; guard(lock_);\nif (p == nullptr)\np = new singleton();\nreturn p;\n}\n</code></pre> <p>\u8fd9\u79cd\u5199\u6cd5\u4e0d\u4f1a\u51fa\u73b0\u4e0a\u9762\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u6267\u884c\u5230p=nullptr\u91cc\u9762\u7684\u60c5\u51b5\uff0c\u5f53\u7ebf\u7a0bA\u5728\u6267\u884c<code>p = new Singleton()</code>\u7684\u65f6\u5019\uff0c\u7ebf\u7a0bB\u5982\u679c\u8c03\u7528\u4e86<code>instance()</code>\uff0c\u4e00\u5b9a\u4f1a\u88ab\u963b\u585e\u5728\u52a0\u9501\u5904\uff0c\u7b49\u5f85\u7ebf\u7a0bA\u6267\u884c\u7ed3\u675f\u540e\u91ca\u653e\u8fd9\u4e2a\u9501\u3002\u4ece\u800c\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002</p> <p>\u4f46\u662f\u8fd9\u79cd\u5199\u6cd5\u6027\u80fd\u975e\u5e38\u4f4e\u4e0b\uff0c\u56e0\u4e3a\u6bcf\u6b21\u8c03\u7528<code>instance()</code>\u90fd\u4f1a\u52a0\u9501\u91ca\u653e\u9501\uff0c\u800c\u8fd9\u4e2a\u6b65\u9aa4\u53ea\u6709\u5728\u7b2c\u4e00\u6b21<code>new Singleton()</code>\u624d\u662f\u6709\u5fc5\u8981\u7684\uff0c\u53ea\u8981<code>p</code>\u88ab\u521b\u5efa\u51fa\u6765\u4e86\uff0c\u4e0d\u7ba1\u591a\u5c11\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\uff0c\u4f7f\u7528<code>if (p == nullptr)</code>\u8fdb\u884c\u5224\u65ad\u90fd\u662f\u8db3\u591f\u7684\uff08\u53ea\u662f\u8bfb\u64cd\u4f5c\uff0c\u4e0d\u9700\u8981\u52a0\u9501\uff09\uff0c\u6ca1\u6709\u7ebf\u7a0b\u5b89\u5168\u95ee\u9898\uff0c\u52a0\u4e86\u9501\u4e4b\u540e\u53cd\u800c\u5b58\u5728\u6027\u80fd\u95ee\u9898\u3002</p> <p>\u56e0\u6b64\u5f15\u51faDCL\u3002</p>"},{"location":"design_pattern/singleton/singleton/#4","title":"4.\u53cc\u91cd\u68c0\u67e5\u9501\u6a21\u5f0f","text":"<p>\u4e0a\u9762\u5199\u6cd5\u662f\u4e0d\u7ba1\u4efb\u4f55\u60c5\u51b5\u90fd\u4f1a\u53bb\u52a0\u9501\uff0c\u7136\u540e\u91ca\u653e\u9501\uff0c\u800c\u5bf9\u4e8e\u8bfb\u64cd\u4f5c\u662f\u4e0d\u5b58\u5728\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u6545\u53ea\u9700\u8981\u5728\u7b2c\u4e00\u6b21\u5b9e\u4f8b\u521b\u5efa\u7684\u65f6\u5019\u52a0\u9501\uff0c\u4ee5\u540e\u4e0d\u9700\u8981\u3002\u4e0b\u9762\u5148\u770b\u4e00\u4e0bDCLP\u7684\u5b9e\u73b0\uff1a</p> <pre><code>singleton* singleton::instance() {\nif(p == nullptr) {  // \u7b2c\u4e00\u6b21\u68c0\u67e5\nLock lock;\nif(p == nullptr){ // \u7b2c\u4e8c\u6b21\u68c0\u67e5\np = new singleton;\n}\n}\nreturn p;\n}\n</code></pre> <p>\u57fa\u4e8e\u4e0a\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u53cc\u91cd\u68c0\u67e5\u9501+\u81ea\u52a8\u56de\u6536</p> <pre><code>class singleton {\nprivate:\nsingleton() {}\n\nstatic singleton *p;\nstatic mutex lock_;\npublic:\nsingleton *instance();\n\n// \u5b9e\u73b0\u4e00\u4e2a\u5185\u5d4c\u5783\u573e\u56de\u6536\u7c7b\nclass CGarbo\n{\npublic:\n~CGarbo()\n{\nif(singleton::p)\ndelete singleton::p;\n}\n};\nstatic CGarbo Garbo; // \u5b9a\u4e49\u4e00\u4e2a\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u7a0b\u5e8f\u7ed3\u675f\u65f6\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u8c03\u7528\u5b83\u7684\u6790\u6784\u51fd\u6570\u4ece\u800c\u91ca\u653e\u5355\u4f8b\u5bf9\u8c61\n};\n\nsingleton *singleton::p = nullptr;\nsingleton::CGarbo Garbo;\n\nsingleton* singleton::instance() {\nif (p == nullptr) {\nlock_guard&lt;mutex&gt; guard(lock_);\nif (p == nullptr)\np = new singleton();\n}\nreturn p;\n}\n</code></pre> <p>DCLP\u7684\u5173\u952e\u5728\u4e8e\uff0c\u5927\u591a\u6570\u5bf9instance\u7684\u8c03\u7528\u4f1a\u770b\u5230p\u662f\u975e\u7a7a\u7684\uff0c\u56e0\u6b64\u751a\u81f3\u4e0d\u7528\u5c1d\u8bd5\u53bb\u521d\u59cb\u5316\u5b83\u3002\u56e0\u6b64\uff0cDCLP\u5728\u5c1d\u8bd5\u83b7\u53d6\u9501\u4e4b\u524d\u68c0\u67e5p\u662f\u5426\u4e3a\u7a7a\u3002\u53ea\u6709\u5f53\u68c0\u67e5\u6210\u529f\uff08\u4e5f\u5c31\u662fp\u8fd8\u6ca1\u6709\u88ab\u521d\u59cb\u5316\uff09\u65f6\u624d\u4f1a\u53bb\u83b7\u5f97\u9501\uff0c\u7136\u540e\u518d\u6b21\u68c0\u67e5p\u662f\u5426\u4ecd\u7136\u4e3a\u7a7a\uff08\u56e0\u6b64\u547d\u540d\u4e3a\u53cc\u91cd\u68c0\u67e5\u9501\uff09\u3002\u7b2c\u4e8c\u6b21\u68c0\u67e5\u662f\u5fc5\u8981\uff0c\u56e0\u4e3a\u5c31\u50cf\u6211\u4eec\u521a\u521a\u770b\u5230\u7684\uff0c\u5f88\u6709\u53ef\u80fd\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5076\u7136\u5728\u7b2c\u4e00\u6b21\u68c0\u67e5\u4e4b\u540e\uff0c\u83b7\u5f97\u9501\u6210\u529f\u4e4b\u524d\u521d\u59cb\u5316p\u3002</p> <p>\u770b\u8d77\u6765\u4e0a\u8ff0\u4ee3\u7801\u975e\u5e38\u7f8e\u597d\uff0c\u53ef\u662f\u8fc7\u4e86\u76f8\u5f53\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u624d\u53d1\u73b0\u8fd9\u4e2a\u6f0f\u6d1e\uff0c\u539f\u56e0\u662f\uff1a\u5185\u5b58\u8bfb\u5199\u7684\u4e71\u5e8f\u6267\u884c(\u7f16\u8bd1\u5668\u95ee\u9898)\u3002</p> <p>\u518d\u6b21\u8003\u8651\u521d\u59cb\u5316<code>p</code>\u7684\u90a3\u4e00\u884c\uff1a</p> <pre><code>p = new singleton;\n</code></pre> <p>\u8fd9\u6761\u8bed\u53e5\u4f1a\u5bfc\u81f4\u4e09\u4e2a\u4e8b\u60c5\u7684\u53d1\u751f\uff1a</p> <ol> <li>\u5206\u914d\u80fd\u591f\u5b58\u50a8<code>singleton</code>\u5bf9\u8c61\u7684\u5185\u5b58\uff1b</li> <li>\u5728\u88ab\u5206\u914d\u7684\u5185\u5b58\u4e2d\u6784\u9020\u4e00\u4e2a<code>singleton</code>\u5bf9\u8c61\uff1b</li> <li>\u8ba9<code>p</code>\u6307\u5411\u8fd9\u5757\u88ab\u5206\u914d\u7684\u5185\u5b58\u3002</li> </ol> <p>\u53ef\u80fd\u4f1a\u8ba4\u4e3a\u8fd9\u4e09\u4e2a\u6b65\u9aa4\u662f\u6309\u987a\u5e8f\u6267\u884c\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ea\u80fd\u786e\u5b9a\u6b65\u9aa4<code>1</code>\u662f\u6700\u5148\u6267\u884c\u7684\uff0c\u6b65\u9aa4<code>2</code>\uff0c<code>3</code>\u5374\u4e0d\u4e00\u5b9a\u3002\u95ee\u9898\u5c31\u51fa\u73b0\u5728\u8fd9\u3002</p> <ul> <li>\u7ebf\u7a0bA\u8c03\u7528instance\uff0c\u6267\u884c\u7b2c\u4e00\u6b21p\u7684\u6d4b\u8bd5\uff0c\u83b7\u5f97\u9501\uff0c\u6309\u71671,3,\u6267\u884c\uff0c\u7136\u540e\u88ab\u6302\u8d77\u3002\u6b64\u65f6p\u662f\u975e\u7a7a\u7684\uff0c\u4f46\u662fp\u6307\u5411\u7684\u5185\u5b58\u4e2d\u8fd8\u6ca1\u6709Singleton\u5bf9\u8c61\u88ab\u6784\u9020\u3002</li> <li>\u7ebf\u7a0bB\u8c03\u7528instance\uff0c\u5224\u5b9ap\u975e\u7a7a\uff0c \u5c06\u5176\u8fd4\u56de\u7ed9instance\u7684\u8c03\u7528\u8005\u3002\u8c03\u7528\u8005\u5bf9\u6307\u9488\u89e3\u5f15\u7528\u4ee5\u83b7\u5f97singleton\uff0c\u5662\uff0c\u4e00\u4e2a\u8fd8\u6ca1\u6709\u88ab\u6784\u9020\u51fa\u7684\u5bf9\u8c61\u3002bug\u5c31\u51fa\u73b0\u4e86\u3002</li> </ul> <p>DCLP\u80fd\u591f\u826f\u597d\u7684\u5de5\u4f5c\u4ec5\u5f53\u6b65\u9aa4\u4e00\u548c\u4e8c\u5728\u6b65\u9aa4\u4e09\u4e4b\u524d\u88ab\u6267\u884c\uff0c\u4f46\u662f\u5e76\u6ca1\u6709\u5e76\u6ca1\u6709\u65b9\u6cd5\u5728C\u6216C++\u4e2d\u8868\u8fbe\u8fd9\u79cd\u9650\u5236\u3002\u8fd9\u5c31\u50cf\u662f\u63d2\u5728DCLP\u5fc3\u810f\u4e0a\u7684\u4e00\u628a\u5315\u9996\uff1a\u6211\u4eec\u9700\u8981\u5728\u76f8\u5bf9\u6307\u4ee4\u987a\u5e8f\u4e0a\u5b9a\u4e49\u9650\u5236\uff0c\u4f46\u662f\u6211\u4eec\u7684\u8bed\u8a00\u6ca1\u6709\u7ed9\u51fa\u8868\u8fbe\u8fd9\u79cd\u9650\u5236\u7684\u65b9\u6cd5\u3002</p>"},{"location":"design_pattern/singleton/singleton/#5memory-barrier","title":"5.memory barrier\u6307\u4ee4","text":"<p>DCLP\u95ee\u9898\u5728C++11\u4e2d\uff0c\u8fd9\u4e2a\u95ee\u9898\u5f97\u5230\u4e86\u89e3\u51b3\u3002</p> <p>\u56e0\u4e3a\u65b0\u7684C++11\u89c4\u5b9a\u4e86\u65b0\u7684\u5185\u5b58\u6a21\u578b\uff0c\u4fdd\u8bc1\u4e86\u6267\u884c\u4e0a\u8ff03\u4e2a\u6b65\u9aa4\u7684\u65f6\u5019\u4e0d\u4f1a\u53d1\u751f\u7ebf\u7a0b\u5207\u6362\uff0c\u76f8\u5f53\u8fd9\u4e2a\u521d\u59cb\u5316\u8fc7\u7a0b\u662f\u201c\u539f\u5b50\u6027\u201d\u7684\u7684\u64cd\u4f5c\uff0cDCL\u53c8\u53ef\u4ee5\u6b63\u786e\u4f7f\u7528\u4e86\uff0c\u4e0d\u8fc7\u5728C++11\u4e0b\u5374\u6709\u66f4\u7b80\u6d01\u7684\u591a\u7ebf\u7a0bsingleton\u5199\u6cd5\u4e86\uff0c\u8fd9\u4e2a\u7559\u5728\u540e\u9762\u518d\u4ecb\u7ecd\u3002</p> <p>C++11\u4e4b\u524d\u89e3\u51b3\u65b9\u6cd5\u662fbarrier\u6307\u4ee4\u3002\u8981\u4f7f\u5176\u6b63\u786e\u6267\u884c\u7684\u8bdd\uff0c\u5c31\u5f97\u5728\u6b65\u9aa42\u30013\u76f4\u63a5\u52a0\u4e0a\u4e00\u9053memory barrier\u3002\u5f3a\u8febCPU\u6267\u884c\u7684\u65f6\u5019\u6309\u71671\u30012\u30013\u7684\u6b65\u9aa4\u6765\u8fd0\u884c\u3002</p> <p>\u7b2c\u4e00\u79cd\u5b9e\u73b0\uff1a</p> <p>\u57fa\u4e8eoperator new+placement new\uff0c\u9075\u5faa1,2,3\u6267\u884c\u987a\u5e8f\u4f9d\u6b21\u7f16\u5199\u4ee3\u7801\u3002</p> <pre><code>// method 1 operator new + placement new\nsingleton *instance() {\n    if (p == nullptr) {\n        lock_guard&lt;mutex&gt; guard(lock_);\n        if (p == nullptr) {\n            singleton *tmp = static_cast&lt;singleton *&gt;(operator new(sizeof(singleton)));\n            new(p)singleton();\n            p = tmp;\n        }\n    }\n    return p;\n}\n</code></pre> <p>\u7b2c\u4e8c\u79cd\u5b9e\u73b0\uff1a</p> <p>\u57fa\u4e8e\u76f4\u63a5\u5d4c\u5165ASM\u6c47\u7f16\u6307\u4ee4mfence\uff0cuninx\u7684barrier\u5b8f\u4e5f\u662f\u901a\u8fc7\u8be5\u6307\u4ee4\u5b9e\u73b0\u7684\u3002</p> <pre><code>#define barrier() __asm__ volatile (\"lwsync\")\nsingleton *singleton::instance() {\nif (p == nullptr) {\nlock_guard&lt;mutex&gt; guard(lock_);\nbarrier();\nif (p == nullptr) {\np = new singleton();\n}\n}\nreturn p;\n}\n</code></pre> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\u662f\u8c03\u7528cpu\u63d0\u4f9b\u7684\u4e00\u6761\u6307\u4ee4\uff0c\u8fd9\u6761\u6307\u4ee4\u7684\u4f5c\u7528\u662f\u4f1a\u963b\u6b62cpu\u5c06\u8be5\u6307\u4ee4\u4e4b\u524d\u7684\u6307\u4ee4\u4ea4\u6362\u5230\u8be5\u6307\u4ee4\u4e4b\u540e\uff0c\u8fd9\u6761\u6307\u4ee4\u4e5f\u901a\u5e38\u88ab\u53eb\u505abarrier\u3002 \u4e0a\u9762\u4ee3\u7801\u4e2d\u7684asm\u8868\u793a\u8fd9\u4e2a\u662f\u4e00\u6761\u6c47\u7f16\u6307\u4ee4\uff0cvolatile\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u7528\u4e86\u5b83\uff0c\u5219\u8868\u793a\u5411\u7f16\u8bd1\u5668\u58f0\u660e\u4e0d\u5141\u8bb8\u5bf9\u8be5\u6c47\u7f16\u6307\u4ee4\u8fdb\u884c\u4f18\u5316\u3002lwsync\u662fPOWERPC\u63d0\u4f9b\u7684barrier\u6307\u4ee4\u3002</p>"},{"location":"design_pattern/singleton/singleton/#6","title":"6.\u9759\u6001\u5c40\u90e8\u53d8\u91cf","text":"<p>Scott Meyer\u5728\u300aEffective C++\u300b\u4e2d\u63d0\u51fa\u4e86\u4e00\u79cd\u7b80\u6d01\u7684singleton\u5199\u6cd5</p> <pre><code>singleton *singleton::instance() {\nstatic singleton p;\nreturn &amp;p;\n}\n</code></pre> <ul> <li>\u5355\u7ebf\u7a0b\u4e0b\uff0c\u6b63\u786e\u3002</li> <li>C++11\u53ca\u4ee5\u540e\u7684\u7248\u672c\uff08\u5982C++14\uff09\u7684\u591a\u7ebf\u7a0b\u4e0b\uff0c\u6b63\u786e\u3002</li> <li>C++11\u4e4b\u524d\u7684\u591a\u7ebf\u7a0b\u4e0b\uff0c\u4e0d\u4e00\u5b9a\u6b63\u786e\u3002</li> </ul> <p>\u539f\u56e0\u5728\u4e8e\u5728C++11\u4e4b\u524d\u7684\u6807\u51c6\u4e2d\u5e76\u6ca1\u6709\u89c4\u5b9alocal static\u53d8\u91cf\u7684\u5185\u5b58\u6a21\u578b\u3002\u4e8e\u662f\u4e4e\u5b83\u5c31\u662f\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u4e86\u3002\u4f46\u662f\u5728C++11\u5374\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u65b0\u7684C++\u6807\u51c6\u89c4\u5b9a\u4e86\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u6b63\u5728\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u5176\u4ed6\u7ebf\u7a0b\u5fc5\u987b\u5f97\u7b49\u5230\u8be5\u521d\u59cb\u5316\u5b8c\u6210\u4ee5\u540e\u624d\u80fd\u8bbf\u95ee\u5b83\u3002</p> <p>\u4e0a\u8ff0\u4f7f\u7528\u7684\u5185\u5b58\u5e8f\uff1a</p> <ul> <li>memory_order_relaxed\uff1a\u677e\u6563\u5185\u5b58\u5e8f\uff0c\u53ea\u7528\u6765\u4fdd\u8bc1\u5bf9\u539f\u5b50\u5bf9\u8c61\u7684\u64cd\u4f5c\u662f\u539f\u5b50\u7684</li> <li>memory_order_acquire\uff1a\u83b7\u5f97\u64cd\u4f5c\uff0c\u5728\u8bfb\u53d6\u67d0\u539f\u5b50\u5bf9\u8c61\u65f6\uff0c\u5f53\u524d\u7ebf\u7a0b\u7684\u4efb\u4f55\u540e\u9762\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u4e0d\u5141\u8bb8\u91cd\u6392\u5230\u8fd9\u4e2a\u64cd\u4f5c\u7684\u524d\u9762\u53bb\uff0c\u5e76\u4e14\u5176\u4ed6\u7ebf\u7a0b\u5728\u5bf9\u540c\u4e00\u4e2a\u539f\u5b50\u5bf9\u8c61\u91ca\u653e\u4e4b\u524d\u7684\u6240\u6709\u5185\u5b58\u5199\u5165\u90fd\u5728\u5f53\u524d\u7ebf\u7a0b\u53ef\u89c1</li> <li>memory_order_release\uff1a\u91ca\u653e\u64cd\u4f5c\uff0c\u5728\u5199\u5165\u67d0\u539f\u5b50\u5bf9\u8c61\u65f6\uff0c\u5f53\u524d\u7ebf\u7a0b\u7684\u4efb\u4f55\u524d\u9762\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u4e0d\u5141\u8bb8\u91cd\u6392\u5230\u8fd9\u4e2a\u64cd\u4f5c\u7684\u540e\u9762\u53bb\uff0c\u5e76\u4e14\u5f53\u524d\u7ebf\u7a0b\u7684\u6240\u6709\u5185\u5b58\u5199\u5165\u90fd\u5728\u5bf9\u540c\u4e00\u4e2a\u539f\u5b50\u5bf9\u8c61\u8fdb\u884c\u83b7\u53d6\u7684\u5176\u4ed6\u7ebf\u7a0b\u53ef\u89c1</li> </ul>"},{"location":"design_pattern/singleton/singleton/#7atomic","title":"7.Atomic","text":"<p>\u5728C++11\u4e4b\u524d\u7684\u7248\u672c\u4e0b\uff0c\u9664\u4e86\u901a\u8fc7\u9501\u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\u7684Singleton\u5916\uff0c\u8fd8\u53ef\u4ee5\u5229\u7528\u5404\u4e2a\u7f16\u8bd1\u5668\u5185\u7f6e\u7684atomic operation\u6765\u5b9e\u73b0\u3002</p> <p><code>java</code>\u548c<code>c#</code>\u53d1\u73b0\u4e71\u5e8f\u95ee\u9898\u540e\uff0c\u5c31\u52a0\u4e86\u4e00\u4e2a\u5173\u952e\u5b57<code>volatile</code>\uff0c\u5728\u58f0\u660e<code>p</code>\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u8981\u52a0\u4e0a<code>volatile</code>\u4fee\u9970\uff0c\u7f16\u8bd1\u5668\u770b\u5230\u4e4b\u540e\uff0c\u5c31\u77e5\u9053\u8fd9\u4e2a\u5730\u65b9\u4e0d\u80fd\u591freorder\uff08\u4e00\u5b9a\u8981\u5148\u5206\u914d\u5185\u5b58\uff0c\u5728\u6267\u884c\u6784\u9020\u5668\uff0c\u90fd\u5b8c\u6210\u4e4b\u540e\u518d\u8d4b\u503c\uff09\u3002</p> <p>\u800c\u5bf9\u4e8e<code>c++</code>\u6807\u51c6\u5374\u4e00\u76f4\u6ca1\u6709\u6539\u6b63\uff0c\u6240\u4ee5<code>VC++</code>\u5728<code>2005</code>\u7248\u672c\u4e5f\u52a0\u5165\u4e86\u8fd9\u4e2a\u5173\u952e\u5b57\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u80fd\u591f\u8de8\u5e73\u53f0\uff08\u53ea\u652f\u6301\u5fae\u8f6f\u5e73\u53f0\uff09\u3002</p> <p>\u800c\u5230\u4e86<code>c++ 11</code>\u7248\u672c\uff0c\u4e3a\u4e86\u4ece\u6839\u672c\u4e0a\u6d88\u9664\u8fd9\u4e9b\u6f0f\u6d1e\uff0c\u5f15\u5165\u4e86\u9002\u5408\u591a\u7ebf\u7a0b\u7684\u5185\u5b58\u6a21\u578b\u3002\u7ec8\u4e8e\u6709\u4e86\u8fd9\u6837\u7684\u673a\u5236\u5e2e\u52a9\u6211\u4eec\u5b9e\u73b0\u8de8\u5e73\u53f0\u7684\u65b9\u6848\u3002</p> <pre><code>mutex singleton::lock_;\natomic&lt;singleton *&gt; singleton::p;\n\n/*\n* std::atomic_thread_fence(std::memory_order_acquire); \n* std::atomic_thread_fence(std::memory_order_release);\n* \u8fd9\u4e24\u53e5\u8bdd\u53ef\u4ee5\u4fdd\u8bc1\u4ed6\u4eec\u4e4b\u95f4\u7684\u8bed\u53e5\u4e0d\u4f1a\u53d1\u751f\u4e71\u5e8f\u6267\u884c\u3002\n*/\nsingleton *singleton::instance() {\nsingleton *tmp = p.load(memory_order_relaxed);\natomic_thread_fence(memory_order_acquire);\nif (tmp == nullptr) {\nlock_guard&lt;mutex&gt; guard(lock_);\ntmp = p.load(memory_order_relaxed);\nif (tmp == nullptr) {\ntmp = new singleton();\natomic_thread_fence(memory_order_release);\np.store(tmp, memory_order_relaxed);\n}\n}\nreturn p;\n}\n</code></pre> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4f7f\u7528\u4e24\u4e2a\u6bd4\u8f83\u5173\u952e\u7684\u672f\u8bed\uff0c\u83b7\u5f97\u4e0e\u91ca\u653e\uff1a</p> <ul> <li>\u83b7\u5f97\u662f\u4e00\u4e2a\u5bf9\u5185\u5b58\u7684\u8bfb\u64cd\u4f5c\uff0c\u5f53\u524d\u7ebf\u7a0b\u7684\u4efb\u4f55\u540e\u9762\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u4e0d\u5141\u8bb8\u91cd\u6392\u5230\u8fd9\u4e2a\u64cd\u4f5c\u7684\u524d\u9762\u53bb\u3002</li> <li>\u91ca\u653e\u662f\u4e00\u4e2a\u5bf9\u5185\u5b58\u7684\u5199\u64cd\u4f5c\uff0c\u5f53\u524d\u7ebf\u7a0b\u7684\u4efb\u4f55\u524d\u9762\u7684\u8bfb\u5199\u64cd\u4f5c\u90fd\u4e0d\u5141\u8bb8\u91cd\u6392\u5230\u8fd9\u4e2a\u64cd\u4f5c\u7684\u540e\u9762\u53bb\u3002</li> </ul> <p>acquire \u548c release \u901a\u5e38\u90fd\u662f\u914d\u5bf9\u51fa\u73b0\u7684\uff0c\u76ee\u7684\u662f\u4fdd\u8bc1\u5982\u679c\u5bf9\u540c\u4e00\u4e2a\u539f\u5b50\u5bf9\u8c61\u7684 release \u53d1\u751f\u5728 acquire \u4e4b\u524d\u7684\u8bdd\uff0crelease \u4e4b\u524d\u53d1\u751f\u7684\u5185\u5b58\u4fee\u6539\u80fd\u591f\u88ab acquire \u4e4b\u540e\u7684\u5185\u5b58\u8bfb\u53d6\u5168\u90e8\u770b\u5230\u3002</p>"},{"location":"design_pattern/singleton/singleton/#8pthread_once","title":"8.pthread_once","text":"<p>\u5982\u679c\u662f\u5728unix\u5e73\u53f0\u7684\u8bdd\uff0c\u9664\u4e86\u4f7f\u7528atomic operation\u5916\uff0c\u5728\u4e0d\u9002\u7528C++11\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7pthread_once\u6765\u5b9e\u73b0Singleton\u3002</p> <p>\u539f\u578b\u5982\u4e0b\uff1a</p> <pre><code>int pthread_once(pthread_once_t once_control, void (init_routine) (void))\uff1b\n</code></pre> <p>\u5b9e\u73b0\uff1a</p> <pre><code>class singleton {\nprivate:\nsingleton(); //\u79c1\u6709\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u5141\u8bb8\u4f7f\u7528\u8005\u81ea\u5df1\u751f\u6210\u5bf9\u8c61\nsingleton(const singleton &amp;other);\n\n//\u8981\u5199\u6210\u9759\u6001\u65b9\u6cd5\u7684\u539f\u56e0\uff1a\u7c7b\u6210\u5458\u51fd\u6570\u9690\u542b\u4f20\u9012this\u6307\u9488\uff08\u7b2c\u4e00\u4e2a\u53c2\u6570\uff09\nstatic void init() {\np = new singleton();\n}\n\nstatic pthread_once_t ponce_;\nstatic singleton *p; //\u9759\u6001\u6210\u5458\u53d8\u91cf \npublic:\nsingleton *instance() {\n// init\u51fd\u6570\u53ea\u4f1a\u6267\u884c\u4e00\u6b21\npthread_once(&amp;ponce_, &amp;singleton::init);\nreturn p;\n}\n};\n</code></pre>"},{"location":"design_pattern/singleton/singleton/#9","title":"9.\u603b\u7ed3","text":"<p>\u672c\u6587\u8bb2\u89e3\u4e86\u51e0\u79cd\u5355\u4f8b\u6a21\u5f0f\uff0c\u5e76\u8bb2\u89e3\u4e86\u7ebf\u7a0b\u5b89\u5168\u7684\u5355\u4f8b\u6a21\u5f0f\uff0c\u4ee5\u53ca\u4e0d\u7528C++11\u5b9e\u73b0\u7684\u51e0\u79cd\u7ebf\u7a0b\u5b89\u5168\u7684\u5355\u4f8b\u6a21\u5f0f\uff1amemory barrier\uff0c\u9759\u6001\u5c40\u90e8\u53d8\u91cf\uff0cpthread_once\u65b9\u5f0f\uff0cC++11\u7684atomic\u5b9e\u73b0\u7b49\u3002</p> <p>\u6700\u540e\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u9488\u5bf9\u4e0a\u8ff0\u5355\u4f8b\u7c7b\u7684\u6790\u6784\u51fd\u6570\u8bf7\u53c2\u8003\u53cc\u91cd\u9501\u68c0\u67e5\u6a21\u5f0f+\u81ea\u52a8\u56de\u6536\u5b9e\u73b0\uff0c\u5fc5\u987b\u5728\u7c7b\u4e2d\u58f0\u660e\u4e00\u4e2a\u9759\u6001\u5c40\u90e8\u53d8\u91cf\uff0c\u9759\u6001\u5c40\u90e8\u53d8\u91cf\u53ef\u4ee5\u7406\u89e3\u4e3a\u5168\u5c40\u53d8\u91cf\uff0c\u5728\u7a0b\u5e8f\u7ed3\u675f\u65f6\uff0c\u81ea\u52a8\u8c03\u7528\u8be5\u9759\u6001\u5c40\u90e8\u53d8\u91cf\u7684\u6790\u6784\u51fd\u6570\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8981\u5728\u7c7b\u4e2d\u58f0\u660e\u4e0e\u5b9a\u4e49\u5d4c\u5957\u7c7b\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u7f16\u5199\u5355\u4f8b\u7684\u6790\u6784\u51fd\u6570\u3002</p>"},{"location":"design_pattern/singleton/singleton/#10","title":"10.\u53c2\u8003\u8d44\u6599","text":"<p>https://thorns.cn/2019/03/09/DCLP.html</p> <p>https://www.cnblogs.com/liyuan989/p/4264889.html</p> <p>https://segmentfault.com/a/1190000015950693</p>"},{"location":"extension/some_problem/string_int/","title":"C++\u4e2d\u5982\u4f55\u5c06string\u7c7b\u578b\u8f6c\u6362\u4e3aint\u7c7b\u578b\uff1f","text":"<p>\u9996\u5148\u63d0\u51fa\u89e3\u51b3\u65b9\u6848\uff1a</p> <ul> <li>atoi</li> <li>strtol</li> <li>stoi</li> </ul> <p>\u8fd9\u51e0\u4e2a\u6709\u4ec0\u4e48\u4e0d\u540c\u5462\uff1f\u4e0b\u9762\u6d4b\u8bd5\u5bf9\u6bd4\u3002</p> <p>C\u8bed\u8a00\u98ce\u683c\u51fd\u6570</p> <p>atoi\u4e0estrtol\u5bf9\u6bd4\uff1a</p> <pre><code>string str = \"16s\";\nint a = atoi(str.c_str());\nint b = strtol(str.c_str(), nullptr, 10);\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>atoi\u7684\u7ed3\u679c\u4e3a:16\nstrtol\u7684\u7ed3\u679c\u4e3a:16\n</code></pre> <p>\u8fd9\u4e24\u4e2a\u51fd\u6570\u90fd\u662f\u4ece\u5b57\u7b26\u4e32\u5f00\u59cb\u5bfb\u627e\u6570\u5b57\u6216\u8005\u6b63\u8d1f\u53f7\u6216\u8005\u5c0f\u6570\u70b9,\u9047\u5230\u975e\u6cd5\u5b57\u7b26\u7ec8\u6b62\u3002</p> <p>\u6240\u4ee5\u5230\u4e0a\u8ff0s\u5b57\u7b26\u5c31\u4e0d\u8f93\u51fa\u4e86\uff0c\u63d0\u524d\u7ed3\u675f\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u4f60\u7684\u5b57\u7b26\u4e32\u4e0d\u662f\u6570\u5b57\u7684\u65f6\u5019\uff0c\u6216\u8005\u5c0f\u6570\u70b9\u7b49\u975e\u6570\u5b57\uff0c\u4e0d\u4f1a\u62a5\u5f02\u5e38\uff01\u76f4\u63a5\u8f93\u51fa0.</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>string str = \"asdsa\";\nint a = atoi(str.c_str());\nint b = strtol(str.c_str(), nullptr, 10);\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>0\n0\n</code></pre> <p>strtol\u76f8\u6bd4\u4e0eatoi\u6765\u8bf4\uff0c\u652f\u6301\u591a\u79cd\u8fdb\u5236\u8f6c\u6362,\u4f8b\u59828\u8fdb\u5236\u7b49</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>int b = strtol(str.c_str(), nullptr, 8);\n</code></pre> <p>C++\u98ce\u683c</p> <p>\u5728C++\u4e2d\u53ef\u4ee5\u4f7f\u7528stoi\u6765\u8f6cint\uff0c\u8fd9\u4e2a\u51fd\u6570\u76f8\u6bd4\u4e8e\u524d\u4e24\u4e2a\u4e00\u4e2a\u6700\u5927\u7279\u70b9\u662f\uff1a\u5f02\u5e38\uff01</p> <p>\u6211\u4eec\u77e5\u9053C++\u76f8\u6bd4\u4e8eC\u8bed\u8a00\u591a\u4e86\u5f02\u5e38\uff0c\u8fd9\u4e5f\u662f\u8fd9\u4e2a\u51fd\u6570\u5728C++\u4e2d\u5177\u6709\u7684\u6700\u663e\u8457\u529f\u80fd\u3002</p> <p>\u4f8b\u5982\uff1a</p> <pre><code>string str1 = \"asq,\";\n//    int c = stoi(str1);    // \u62a5\u5f02\u5e38\nstring str2 = \"12312\";\nint c = stoi(str2);     // ok\ncout &lt;&lt; c &lt;&lt; endl;\n</code></pre> <p>\u5f02\u5e38\u5982\u4e0b\uff1a</p> <pre><code>terminate called after throwing an instance of 'std::invalid_argument'\nwhat():  stoi\n</code></pre> <p>\u81ea\u5b9a\u4e49</p> <p>\u4e5f\u5c31\u662f\u81ea\u5df1\u5199\u5457\uff0c\u5982\u4e0b\uff1a</p> <pre><code>int stringToInt(const string &amp;s) {\nint v;\nstringstream ss;\nss &lt;&lt; s;\nss &gt;&gt; v;\nreturn v;\n}\nint main() {\nint i = stringToInt(\"2.3\");\ncout&lt;&lt;i&lt;&lt;endl;\n}\n</code></pre>"},{"location":"learn_class/modern_C%2B%2B_30/jiketime_class/","title":"\u6781\u5ba2\u65f6\u95f4\u300aC++\u5b9e\u621830\u8bb2\u300b","text":"<ul> <li>\u5806\u3001\u6808\u3001RAII\uff1aC++\u91cc\u8be5\u5982\u4f55\u7ba1\u7406\u8d44\u6e90\uff1f</li> <li>\u5806</li> <li>\u6808</li> <li>RAII</li> <li>\u81ea\u5df1\u52a8\u624b\uff0c\u5b9e\u73b0C++\u7684\u667a\u80fd\u6307\u9488</li> <li>auto_ptr\u3001scope_ptr</li> <li>unique_ptr</li> <li>shared_ptr</li> <li>\u53f3\u503c\u548c\u79fb\u52a8\u7a76\u7adf\u89e3\u51b3\u4e86\u4ec0\u4e48\u95ee\u9898\uff1f</li> <li>\u5de6\u503c\u4e0e\u53f3\u503c</li> <li>\u5ef6\u957f\u58f0\u660e\u5468\u671f</li> <li>\u5f15\u7528\u6298\u53e0</li> <li>\u5b8c\u7f8e\u8f6c\u53d1</li> <li>\u4e0d\u8981\u8fd4\u56de\u672c\u5730\u53d8\u91cf\u7684\u5f15\u7528</li> <li>\u5bb9\u56681</li> <li>\u5bb9\u56682</li> <li>\u5f02\u5e38</li> <li>\u5b57\u9762\u91cf\u3001\u9759\u6001\u65ad\u8a00\u548c\u6210\u5458\u51fd\u6570\u8bf4\u660e\u7b26</li> <li>\u662f\u4e0d\u662f\u5e94\u8be5\u8fd4\u56de\u5bf9\u8c61\uff1f</li> <li>\u7f16\u8bd1\u671f\u591a\u6001\uff1a\u6cdb\u578b\u7f16\u7a0b\u548c\u6a21\u677f\u5165\u95e8</li> <li>\u8bd1\u671f\u80fd\u505a\u4e9b\u4ec0\u4e48\uff1f\u4e00\u4e2a\u5b8c\u6574\u7684\u8ba1\u7b97\u4e16\u754c</li> <li>SFINAE\uff1a\u4e0d\u662f\u9519\u8bef\u7684\u66ff\u6362\u5931\u8d25\u662f\u600e\u4e48\u56de\u4e8b?</li> <li>constexpr\uff1a\u4e00\u4e2a\u5e38\u6001\u7684\u4e16\u754c</li> <li>\u51fd\u6570\u5bf9\u8c61\u548clambda\uff1a\u8fdb\u5165\u51fd\u6570\u5f0f\u7f16\u7a0b</li> <li>\u5185\u5b58\u6a21\u578b\u548catomic\uff1a\u7406\u89e3\u5e76\u53d1\u7684\u590d\u6742\u6027</li> </ul>"},{"location":"practical_exercises/10_day_practice/10_day/","title":"10\u65e5c++\u5b9e\u6218\u72c2\u7ec3","text":"<ul> <li>[x] day1</li> </ul> <p>\u57fa\u672cc++\u8bed\u6cd5</p> <ul> <li>[x] day2</li> </ul> <p>\u9012\u5f52\u3001\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u3001\u9759\u6001\u53d8\u91cf\u7b49</p> <ul> <li>[x] day3</li> </ul> <p>\u51fd\u6570</p> <ul> <li>[x] day4</li> </ul> <p>\u51fd\u6570\u6df1\u5165</p> <ul> <li>[x] day5</li> </ul> <p>\u7ee7\u627f\u591a\u6001</p> <ul> <li>[x] day6</li> </ul> <p>\u865a\u51fd\u6570\u3001\u62bd\u8c61\u7c7b</p> <ul> <li>[x] day7</li> </ul> <p>\u8fd0\u7b97\u7b26\u91cd\u8f7d</p> <ul> <li>[x] day8</li> </ul> <p>\u6a21\u677f\u4e0eSTL</p> <ul> <li>[x] day9</li> </ul> <p>\u5f02\u5e38</p> <ul> <li>[x] day10</li> </ul> <p>\u6587\u4ef6\u4e0e\u6d41</p>"},{"location":"practical_exercises/key_exercises/key/","title":"\u91cd\u70b9\u5b9e\u6218\u7ec3\u4e60","text":""},{"location":"practical_exercises/key_exercises/key/#_1","title":"\u91cd\u70b9\u5b9e\u6218\u7ec3\u4e60","text":"<p>\u251c\u2500\u2500 \u4e2d\u62ec\u53f7\u91cd\u8f7d.cpp</p> <p>\u251c\u2500\u2500 \u65f6\u949f++\u8fd0\u7b97\u7b26\u91cd\u8f7d.cpp</p> <p>\u251c\u2500\u2500 \u8fd0\u7b97\u7b26\u91cd\u8f7d\u4e4b\u5f3a\u5236\u8f6c\u6362.cpp</p> <p>\u251c\u2500\u2500 \u91cd\u8f7d\u5706\u62ec\u53f7\u7684\u65f6\u949f.cpp</p> <p>\u251c\u2500\u2500 \u51fd\u6570\u6a21\u677f.cpp</p> <p>\u251c\u2500\u2500 \u52a8\u6001\u6570\u7ec4.cpp</p> <p>\u251c\u2500\u2500 \u5b57\u5178\u63d2\u5165\u4e0e\u67e5\u627e.cpp</p> <p>\u251c\u2500\u2500 \u5f02\u5e38\u6355\u83b7.cpp</p> <p>\u251c\u2500\u2500 \u7c7b\u6a21\u677f\u4e4b\u6808.cpp</p> <p>\u251c\u2500\u2500 \u7c7b\u6a21\u677f\u7279\u5316\u4e4b\u6570\u7ec4.cpp</p> <p>\u251c\u2500\u2500 \u7ee7\u627f\u4e0e\u5c01\u88c5.cpp</p> <p>\u251c\u2500\u2500 \u8bfb\u5199\u6587\u4ef6\u7efc\u5408\u9898.cpp</p> <p>\u251c\u2500\u2500 \u8f93\u5165\u8f93\u51fa\u8fd0\u7b97\u7b26\u91cd\u8f7d.cpp</p> <p>\u251c\u2500\u2500 \u8f93\u5165\u8f93\u51fa\u91cd\u8f7d.cpp</p> <p>\u251c\u2500\u2500 \u8f93\u51fa\u683c\u5f0f.cpp</p>"},{"location":"src_analysis/stl/array/","title":"C++ STL\u6e90\u7801\u5256\u6790 tr1\u4e0estd array","text":""},{"location":"src_analysis/stl/array/#0","title":"0.\u5bfc\u8bed","text":"<p>\u6e90\u7801\u5256\u6790\u7248\u672c\u4e3agcc4.9.1\u3002</p> <p>C++ tr1\u5168\u79f0Technical Report 1\uff0c\u662f\u9488\u5bf9C++\u6807\u51c6\u5e93\u7684\u7b2c\u4e00\u6b21\u6269\u5c55\u3002\u5373\u5c06\u5230\u6765\u7684\u4e0b\u4e00\u4e2a\u7248\u672c\u7684C++\u6807\u51c6c++0x\u4f1a\u5305\u62ec\u5b83\uff0c\u4ee5\u53ca\u4e00\u4e9b\u8bed\u8a00\u672c\u8eab\u7684\u6269\u5145\u3002tr1\u5305\u62ec\u5927\u5bb6\u671f\u5f85\u5df2\u4e45\u7684smart pointer\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u652f\u6301\u8303\u578b\u7f16\u7a0b\u7684\u5185\u5bb9\u3002\u8349\u6848\u9636\u6bb5\uff0c\u65b0\u589e\u7684\u7c7b\u548c\u6a21\u677f\u7684\u540d\u5b57\u7a7a\u95f4\u662fstd::tr1\u3002</p>"},{"location":"src_analysis/stl/array/#1stdtr1array","title":"1.std::tr1::array","text":"<p>\u4f7f\u7528\uff1a</p> <pre><code>#include &lt;tr1/array&gt;\nstd::tr1::array&lt;int ,10&gt; a;\n</code></pre> <p>tr1\u4e2d\u7684array\u6bd4\u8f83\u7b80\u5355\uff0c\u6a21\u62df\u8bed\u8a00\u672c\u8eab\u7684\u6570\u7ec4\uff0c\u5e76\u4e14\u8ba9\u5176\u652f\u6301\u8fed\u4ee3\u5668\u64cd\u4f5c\uff0c\u4f7f\u5176\u540c\u5176\u4ed6\u5bb9\u5668\u4e00\u6837\uff0c\u80fd\u591f\u8c03\u7528\u7b97\u6cd5\u3002\u5bf9\u4e8etr1\u4e2darray\u6ca1\u6709\u6784\u9020\u4e0e\u6790\u6784\u3002\u8fed\u4ee3\u5668\u662f\u76f4\u63a5\u4f7f\u7528\u4f20\u9012\u8fdb\u6765\u7684\u7c7b\u578b\u5b9a\u4e49\u6307\u9488\u3002</p> <p>\u7b80\u5355\u7684\u770b\u4e00\u4e0b\u8fd9\u4e2a\u9759\u6001\u6570\u7ec4array\u6e90\u7801\uff1a</p> <pre><code>template&lt;typename _Tp, std::size_t _Nm&gt;\nstruct array\n{\ntypedef _Tp                           value_type;\ntypedef value_type&amp;                           reference;\ntypedef const value_type&amp;                     const_reference;\ntypedef value_type*                       iterator;\ntypedef const value_type*                 const_iterator;\ntypedef std::size_t                           size_type;\ntypedef std::ptrdiff_t                         difference_type;\ntypedef std::reverse_iterator&lt;iterator&gt;       reverse_iterator;\ntypedef std::reverse_iterator&lt;const_iterator&gt;   const_reverse_iterator;\n}\n</code></pre> <p>\u91cc\u9762\u4f7f\u7528<code>reverse_iterator</code>\u4f5c\u4e3arbegin\u4e0erend\u64cd\u4f5c\u7684\u8fed\u4ee3\u5668\u3002 \u770b\u4e0a\u53bb\u4e0a\u9762\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5b9e\u9645\u4e0a\u4e24\u4e2a\uff0c\u8fd8\u6709\u4e00\u4e2aiterator,\u8fd9\u4e2a\u76f4\u63a5\u4f7f\u7528\u4f20\u9012\u8fdb\u6765\u7684\u7c7b\u578b\u5b9a\u4e49\u6307\u9488\uff0c\u4f5c\u4e3a\u8fed\u4ee3\u5668\u3002</p> <p>\u53ef\u4ee5\u5c06\u5176\u5bf9\u6bd4\u4e3avector\u4e2d\u7684\u6b63\u5411\u4e0e\u53cd\u5411\u8fed\u4ee3\u5668\u3002</p> <p>\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728tr1::array\u4e2d\uff0c\u652f\u6301\u4f20\u9012\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u4f8b\u5982\u6211\u4eec\u4f7f\u7528\u5982\u4e0b\uff1a</p> <pre><code>std::tr1::array&lt;int,0&gt; a;\n</code></pre> <p>\u5bf9\u4e8e\u8fd9\u6837\u7684\u5199\u6cd5\uff0c\u4f1a\u5bf9\u5e94\u5230\u4e0b\u9762\uff1a</p> <pre><code>// Support for zero-sized arrays mandatory.\nvalue_type _M_instance[_Nm ? _Nm : 1];\n</code></pre> <p>\u6839\u636e\u4f20\u9012\u8fdb\u6765\u7684\u5927\u5c0f\uff0c\u5982\u679c\u4e0d\u4e3a0\uff0c\u5c31\u662f\u4f20\u9012\u8fdb\u6765\u7684\u5927\u5c0f\uff0c\u5426\u5219\u4e3a1\u3002</p>"},{"location":"src_analysis/stl/array/#2stdarray","title":"2.std::array","text":"<p>\u4f7f\u7528</p> <pre><code>std::array&lt;int ,10&gt; a;\n</code></pre> <p>std\u4e2d\u7684array\u5305\u542b\u4e86</p> <p></p> <p>\u5bf9\u6bd4tr1\u4e0estd\u7684array</p> <pre><code>template&lt;typename _Tp, std::size_t _Nm&gt;\nstruct array\n{\ntypedef _Tp                           value_type;\ntypedef value_type*               pointer;\ntypedef const value_type*                       const_pointer;\ntypedef value_type&amp;                           reference;\ntypedef const value_type&amp;                     const_reference;\ntypedef value_type*                       iterator;\ntypedef const value_type*                 const_iterator;\ntypedef std::size_t                           size_type;\ntypedef std::ptrdiff_t                            difference_type;\ntypedef std::reverse_iterator&lt;iterator&gt;       reverse_iterator;\ntypedef std::reverse_iterator&lt;const_iterator&gt;   const_reverse_iterator;\n\n// Support for zero-sized arrays mandatory.\ntypedef _GLIBCXX_STD_C::__array_traits&lt;_Tp, _Nm&gt; _AT_Type;    // # define _GLIBCXX_STD_C std\ntypename _AT_Type::_Type                         _M_elems;\n}\n</code></pre> <p>\u53d1\u73b0array\u91cc\u9762\u6709\u4e24\u5904\u503c\u5f97\u6ce8\u610f\u7684\u5730\u65b9\uff1a</p> <pre><code>// Support for zero-sized arrays mandatory.\ntypedef _GLIBCXX_STD_C::__array_traits&lt;_Tp, _Nm&gt; _AT_Type;    // # define _GLIBCXX_STD_C std\ntypename _AT_Type::_Type                         _M_elems;\n</code></pre> <p>\u5728\u6e90\u7801\u4e2d\u53bb\u627e__array_traits\uff0c\u770b\u5230\uff1a</p> <pre><code>template&lt;typename _Tp, std::size_t _Nm&gt;\nstruct __array_traits\n{\ntypedef _Tp _Type[_Nm];\n\nstatic constexpr _Tp&amp;\n_S_ref(const _Type&amp; __t, std::size_t __n) noexcept\n{ return const_cast&lt;_Tp&amp;&gt;(__t[__n]); }\n};\n</code></pre> <p>\u4e0a\u9762\u4e24\u884c\u7684\u4ee3\u7801\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e0b\u9762\uff1a</p> <pre><code>typedef _Tp _Type[100];\ntypedef _Type _M_elems;  // \u4e00\u4e2a\u542b\u6709100\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u3002\n</code></pre> <p>\u5728\u5b9e\u9645\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u5982\u679c\u8981\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a</p> <pre><code>int a[100];\n//\u6216\u8005\ntypedef int T[100];\ntypedef T a;\n</code></pre> <p>\u9488\u5bf9\u4f20\u8fdb\u6765\u7684size\u5904\u7406\uff0c\u76f8\u6bd4\u4e8etr1\uff0c\u66f4\u52a0\u590d\u6742\uff0c\u4f7f\u7528\u4e86\u6a21\u677f\u504f\u7279\u5316\u6765\u5904\u7406\u4f20\u9012size\u4e3a0\u60c5\u51b5\u3002</p> <pre><code>template&lt;typename _Tp, std::size_t _Nm&gt;\nstruct __array_traits\n{\ntypedef _Tp _Type[_Nm];\n\nstatic constexpr _Tp&amp;\n_S_ref(const _Type&amp; __t, std::size_t __n) noexcept\n{ return const_cast&lt;_Tp&amp;&gt;(__t[__n]); }\n};\n\ntemplate&lt;typename _Tp&gt;\nstruct __array_traits&lt;_Tp, 0&gt;\n{\nstruct _Type { };\n\nstatic constexpr _Tp&amp;\n_S_ref(const _Type&amp;, std::size_t) noexcept\n{ return *static_cast&lt;_Tp*&gt;(nullptr); }\n};\n</code></pre>"},{"location":"src_analysis/stl/deque/","title":"C++ STL\u6e90\u7801\u5256\u6790\u4e4b\u5e8f\u5217\u5f0f\u5bb9\u5668deque","text":""},{"location":"src_analysis/stl/deque/#0","title":"0.\u5bfc\u8bed","text":"<p>deque\u662f\u4e00\u79cd\u53cc\u5411\u5f00\u53e3\u7684\u5206\u6bb5\u8fde\u7eed\u7ebf\u6027\u7a7a\u95f4(\u7b80\u5355\u7406\u89e3\u4e3a\uff1a\u53cc\u7aef\u961f\u5217)\uff0c\u53ef\u4ee5\u5728\u5934\u5c3e\u7aef\u8fdb\u884c\u5143\u7d20\u7684\u63d2\u5165\u548c\u5220\u9664\u3002</p> <p>deque\u4e0evector\u6700\u5927\u7684\u5dee\u5f02\u5c31\u662f\uff1a</p> <ul> <li> <p>deque\u5141\u8bb8\u4e8e\u5e38\u6570\u65f6\u95f4\u5185\u5bf9\u5934\u7aef\u8fdb\u884c\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\uff1b</p> </li> <li> <p>deque\u662f\u5206\u6bb5\u8fde\u7eed\u7ebf\u6027\u7a7a\u95f4\uff0c\u968f\u65f6\u53ef\u4ee5\u589e\u52a0\u4e00\u6bb5\u65b0\u7684\u7a7a\u95f4\uff1b</p> </li> </ul> <p>deque\u4e0d\u50cfvector\u90a3\u6837\uff0cvector\u5f53\u5185\u5b58\u4e0d\u591f\u65f6\uff0c\u9700\u91cd\u65b0\u5206\u914d/\u590d\u5236\u6570\u636e/\u91ca\u653e\u539f\u59cb\u7a7a\u95f4\uff1b\u4e0d\u8fc7deque\u7684\u8fed\u4ee3\u5668\u8bbe\u7f6e\u6bd4vector\u590d\u6742\uff0c\u56e0\u4e3a\u8fed\u4ee3\u5668\u4e0d\u80fd\u4f7f\u7528\u666e\u901a\u6307\u9488\uff0c\u56e0\u6b64\u5c3d\u91cf\u4f7f\u7528vector\u3002</p>"},{"location":"src_analysis/stl/deque/#1deque","title":"1.deque\u4e2d\u63a7\u5668","text":"<p>\u7528\u6237\u770b\u8d77\u6765deque\u4f7f\u7528\u7684\u662f\u8fde\u7eed\u7a7a\u95f4\uff0c\u5b9e\u9645\u4e0a\u662f\u5206\u6bb5\u8fde\u7eed\u7ebf\u6027\u7a7a\u95f4\u3002\u4e3a\u4e86\u7ba1\u7406\u5206\u6bb5\u7a7a\u95f4deque\u5bb9\u5668\u5f15\u5165\u4e86map\uff0c\u79f0\u4e4b\u4e3a\u4e2d\u63a7\u5668\uff0cmap\u662f\u4e00\u5757\u8fde\u7eed\u7684\u7a7a\u95f4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u6307\u5411\u7f13\u51b2\u533a\u7684\u6307\u9488\uff0c\u7f13\u51b2\u533a\u624d\u662fdeque\u5b58\u50a8\u6570\u636e\u7684\u4e3b\u4f53\u3002</p> <p></p> <p>\u5728\u4e0a\u56fe\u4e2d\uff0cbuffer\u79f0\u4e3a\u7f13\u51b2\u533a\uff0c\u663e\u793amap size\u7684\u4e00\u6bb5\u8fde\u7eed\u7a7a\u95f4\u5c31\u662f\u4e2d\u63a7\u5668\u3002</p> <p>\u4e2d\u63a7\u5668\u5305\u542b\u4e86map size,\u6307\u5411buffer\u7684\u6307\u9488\uff0cdeque\u7684\u5f00\u59cb\u8fed\u4ee3\u5668\u4e0e\u7ed3\u5c3e\u8fed\u4ee3\u5668\u3002</p> <pre><code>_Tp     **_M_map;\nsize_t      _M_map_size;\niterator    _M_start;\niterator    _M_finish;\n</code></pre> <p>\u7531\u4e8ebuffer\u4e5f\u662f\u6307\u9488\uff0c\u6240\u4ee5<code>_Tp</code>\u662f\u6307\u9488\u7684\u6307\u9488\u3002</p> <p>deque\u7ee7\u627f\u81ea<code>_Deque_base</code>,\u800c<code>_Deque_base</code>\u91cc\u9762\u6709\u4e00\u4e2a<code>_M_impl</code>\u3002</p> <p></p> <p>\u6839\u636e\u4e0b\u56fe\u4e0e\u4e0a\u8ff0\u63cf\u8ff0\uff0c\u53ef\u4ee5\u77e5\u9053\uff0c\u4e2d\u63a7\u5668\u662f\u7531<code>_Deque_impl</code>\u5b9e\u73b0\u7684\u3002</p> <p></p> <p>\u800cdeque\u662f\u4f7f\u7528\u57fa\u7c7b<code>_Deque_base</code>\u6765\u5b8c\u6210\u5185\u5b58\u7ba1\u7406\u4e0e\u4e2d\u63a7\u5668\u7ba1\u7406\u3002</p>"},{"location":"src_analysis/stl/deque/#2","title":"2.\u9ad8\u7aef\u7684\u8fed\u4ee3\u5668","text":"<p>\u5bf9\u4e8edeque\u6765\u8bf4\uff0c\u5b83\u7684\u8fed\u4ee3\u5668\u8bbe\u8ba1\u7684\u975e\u5e38\u68d2\uff01</p> <p>\u5982\u4e0b\u56fe\u6240\u793a\uff1a </p> <p>\u9996\u5148\u6765\u770b\u4e00\u4e0b\u6bd4\u8f83\u91cd\u8981\u7684\u6210\u5458\uff1a</p> <pre><code>typedef _Tp             **_Map_pointer;\n_Tp     *_M_cur;\n_Tp     *_M_first;\n_Tp     *_M_last;\n_Map_pointer    _M_node;\n</code></pre> <p>\u8fd9\u51e0\u4e2a\u7a76\u7adf\u662f\u4ec0\u4e48\u5462\uff0c\u6839\u636e\u540d\u5b57\uff0c\u5f88\u5bb9\u6613\u77e5\u9053\u5565\u610f\u601d\uff0c\u5bf9\u4e8edeque\u6765\u8bf4\uff0c\u662f\u5206\u6bb5\u8fde\u7eed\u7a7a\u95f4\uff0c\u8fed\u4ee3\u5668\u6267\u884c\u64cd\u4f5c\uff0c\u4e0a\u8ff0\u7684<code>_M_cur</code>\u6307\u5411\u5177\u4f53\u7684\u5143\u7d20\uff0c<code>_M_first</code>\u6307\u5411\u8fd9\u6bb5buffer\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20,<code>_M_last</code>\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20(\u4e0d\u662f\u6709\u6548\u7684\u5143\u7d20)\uff0c\u800c<code>_M_node</code>\u5219\u662f\u6307\u5411\u4e2d\u63a7\u5668\u3002\u6240\u4ee5\u5b83\u662f\u4e00\u4e2a\u6307\u9488\u7684\u6307\u9488\u3002</p> <p>\u4f8b\u5982\u73b0\u5728\u8fed\u4ee3\u5668\u6267\u884c++\u64cd\u4f5c\uff0c\u5f53\u524dbuffer\u4e0d\u591f\u7528\u4e86\uff0c\u90a3\u4e48\u6b64\u65f6\u9700\u8981\u4e00\u4e2a\u6307\u9488\u80fd\u591f\u56de\u5230\u4e2d\u63a7\u5668\uff0c\u53d6\u4e0b\u4e00\u6bb5buffer\uff0c\u91cd\u7f6e<code>_M_first</code>\u4e0e<code>_M_last</code>\u7684\u6307\u9488\u4f4d\u7f6e\uff0c<code>_M_cur</code>\u6307\u5411\u65b0\u6bb5buffer\u4e2d\u7684\u6307\u5b9a\u4f4d\u7f6e\u3002</p> <p>\u6211\u4eec\u73b0\u5728\u56de\u5230\u4e00\u5f00\u59cb\u7684\u56fe\uff1a</p> <p></p> <p>\u6700\u4e0a\u9762\u7684\u7684iterator\u5c31\u662f\u4e0a\u9762\u51e0\u4e2a\u6307\u9488\u7684\u533a\u5757\u914d\u56fe\u3002</p> <p>\u90a3buffer\u8ba1\u7b97\u662f\u4ec0\u4e48\u5b9e\u73b0\u7684\u5462?</p> <p>\u5728\u6e90\u7801\u4e2d\u8ba1\u7b97\u662f\u6839\u636e\u4f20\u9012\u8fdb\u6765\u7684\u7c7b\u578b\uff0c\u5982\u679c\u4f20\u9012\u7684\u7c7b\u578b\u5c0f\u4e8e512\u5b57\u8282\uff0c\u90a3\u4e48buffersize\u5c31\u662f512/sizeof(_Tp)\uff0c\u8d85\u8fc7512\uff0c\u5c31\u662f1\u3002</p> <pre><code>static size_t _S_buffer_size()\n_GLIBCXX_NOEXCEPT\n{\nreturn(__deque_buf_size( sizeof(_Tp) ) );\n}\n</code></pre> <p><code>__deque_buf_size</code>\u5b9e\u73b0</p> <pre><code>#ifndef _GLIBCXX_DEQUE_BUF_SIZE\n#define _GLIBCXX_DEQUE_BUF_SIZE 512\n#endif\ninline size_t\n__deque_buf_size( size_t\n__size )\n{\nreturn(__size &lt; _GLIBCXX_DEQUE_BUF_SIZE\n? size_t( _GLIBCXX_DEQUE_BUF_SIZE / __size ) : size_t( 1 ) );\n}\n</code></pre> <p>\u524d\u9762\u51e0\u8282\u6e90\u7801\u4e2d\u63d0\u5230\u4e86\u8403\u53d6\u673a\u6280\u672f\uff0c\u9488\u5bf9\u6bcf\u4e2a\u8fed\u4ee3\u5668\u90fd\u9700\u8981\u5d4c\u5165\u4e0b\u9762\u4e94\u79cdtypedef\uff1a</p> <pre><code>typedef std::random_access_iterator_tag iterator_category;\ntypedef _Tp             value_type;\ntypedef _Ptr                pointer;\ntypedef _Ref                reference;\ntypedef ptrdiff_t           difference_type;\n</code></pre> <p>\u636e\u6b64\uff0c\u4e5f\u53ef\u4ee5\u77e5\u9053deque\u8fed\u4ee3\u5668\u7684\u4f7f\u7528\u7684\u662f\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\uff1a<code>random_access_iterator_tag</code>\u3002</p> <p>\u800cvector\u4f7f\u7528\u7684\u8fed\u4ee3\u5668\u4e5f\u662f\u8fd9\u4e2a\uff0c\u6839\u636e\u4faf\u6377\u8001\u5e08\u6240\u8bb2\uff0c\u8fde\u7eed\u7684buffer\u662fvector\uff0c\u8fd9\u4e0e\u8fed\u4ee3\u5668\u7684tag\u7c7b\u578b\u4e0d\u8c0b\u800c\u5408\u3002</p> <p>\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\u8fd9\u4e2a\u5f3a\u5927\u7684\u8fed\u4ee3\u5668\u7684\u4e00\u4e9b\u64cd\u4f5c\u7b26\u91cd\u8f7d\uff1a</p> <p>\u5177\u4f53\u7684\u8bb2\u89e3\u5728\u4ee3\u7801\u91cc\u9762\u8bf4\u3002</p> <p>\u53d6\u503c\u64cd\u4f5c\u7b26</p> <pre><code>reference\noperator*() const\n_GLIBCXX_NOEXCEPT\n{\nreturn(*_M_cur);\n}\n\n\npointer\noperator-&gt;() const\n_GLIBCXX_NOEXCEPT\n{\nreturn(_M_cur);\n}\n</code></pre> <p>\u5f53\u7136\u4e0a\u8ff0\u7684<code>-&gt;</code>\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528<code>*</code>\u64cd\u4f5c\u7b26\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982\uff1a</p> <pre><code>pointer\noperator-&gt;() const\n_GLIBCXX_NOEXCEPT\n{\nreturn &amp;(operator*());\n}\n</code></pre> <p>++\u4e0e--\u64cd\u4f5c\u7b26</p> <pre><code>// \u524d\u7f6e++\u64cd\u4f5c\u7b26\n_Self &amp;\noperator++()\n_GLIBCXX_NOEXCEPT\n{\n// \u5148++\uff0c\u5224\u65ad\u662f\u5426\u5230\u4e86buffer\u7684\u672b\u5c3e\uff0c\u5982\u679c\u5230\u4e86\u672b\u5c3e\uff0c\u5c31\u8981\u8df3\u5230\u4e0b\u4e00\u4e2abuffer\u3002\n++_M_cur;\nif ( _M_cur == _M_last ) // _M_last\u6307\u5411\u7684\u4e0d\u662f\u6709\u6548\u5143\u7d20\uff0c\u4fdd\u7559\u8282\u70b9  \n{\n_M_set_node( _M_node + 1 );\n_M_cur = _M_first;\n}\nreturn(*this);\n}\n\n// \u540e\u7f6e++\u64cd\u4f5c\u7b26\n_Self\noperator++( int )\n_GLIBCXX_NOEXCEPT\n{\n_Self __tmp = *this;\n++*this;\nreturn(__tmp);\n}\n\n// \u524d\u7f6e--\u64cd\u4f5c\u7b26\n_Self &amp;\noperator--()\n_GLIBCXX_NOEXCEPT\n{\n// \u5148\u5224\u65ad\u662f\u5426\u5230\u4e86\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5982\u679c\u5230\u4e86\uff0c\u7531\u4e8e\u9700\u8981\u8fdb\u884c--\u64cd\u4f5c\uff0c\u90a3\u4e48\u5c31\u5e94\u8be5\u8fdb\u5165\u524d\u4e00\u4e2abuffer\nif ( _M_cur == _M_first )\n{\n_M_set_node( _M_node - 1 );\n_M_cur = _M_last;\n}\n--_M_cur;\nreturn(*this);\n} //\u5148\u5728\u5bb9\u5668\u5934\u90e8\u63d2\u5165\u4e0e\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\u7684\u5143\u7d20\n\n// \u540e\u7f6e--\u64cd\u4f5c\u7b26\n_Self\noperator--( int )\n_GLIBCXX_NOEXCEPT\n{\n_Self __tmp = *this;    /* \u5b9a\u4e49\u4e00\u4e2a\u526f\u672c */\n--*this;                /* \u8fed\u4ee3\u5668\u81ea\u51cf\u64cd\u4f5c */\nreturn(__tmp);\n}\n</code></pre> <p>\u8df3\u8dc3n\u4e2a\u8ddd\u79bb\u64cd\u4f5c\u7b26</p> <pre><code>/*\n* \u5b9e\u73b0\u968f\u673a\u53d6,\u8fed\u4ee3\u5668\u53ef\u4ee5\u76f4\u63a5\u8df3\u8dc3n\u4e2a\u8ddd\u79bb\n* \u5c06\u8fed\u4ee3\u5668\u524d\u79fbn\u4e2a\u8ddd\u79bb,\u5f53n\u8d1f\u503c\u65f6\u5c31\u4e3a\u4e0b\u9762\u7684operator-=\u64cd\u4f5c\n*/\n_Self &amp;\noperator+=( difference_type __n )\n\n_GLIBCXX_NOEXCEPT\n{\nconst difference_type __offset = __n + (_M_cur - _M_first);\n/*\n        * \u82e5\u524d\u79fbn\u4e2a\u8ddd\u79bb\u540e\uff0c\u76ee\u6807\u4f9d\u7136\u5728\u540c\u4e00\u4e2a\u7f13\u51b2\u533a\n        * \u5219\u76f4\u63a5\u524d\u79fbn\u4e2a\u8ddd\u79bb\n        */\nif ( __offset &gt;= 0 &amp;&amp; __offset &lt; difference_type( _S_buffer_size() ) )\n_M_cur += __n;\nelse {\n/*\n            * \u82e5\u524d\u79fbn\u4e2a\u8ddd\u79bb\u540e,\u76ee\u6807\u8d85\u51fa\u4e86\u7f13\u51b2\u533a\u8303\u56f4\n            * __offset&gt;0   __offset / difference_type(_S_buffer_size())\u8ba1\u7b97\u5411\u540e\u79fb\u52a8\u591a\u5c11\u4e2a\u7f13\u51b2\u533a\n            * __offset&lt;=0  -difference_type((-__offset - 1) / _S_buffer_size()) - 1\u8ba1\u7b97\u5411\u524d\u79fb\u52a8\u591a\u5c11\u4e2a\u7f13\u51b2\u533a\n            */\nconst difference_type __node_offset =\n__offset &gt; 0 ? __offset / difference_type( _S_buffer_size() )\n: -difference_type( (-__offset - 1)\n/ _S_buffer_size() ) - 1;\n/* \u8c03\u6574\u5230\u6b63\u786e\u7684\u7f13\u51b2\u533a,\u6b64\u65f6_M_first\u5df2\u7ecf\u4fee\u6539\u4e86 */\n_M_set_node( _M_node + __node_offset );\n/* \u4fee\u6539\u4e3a\u6b63\u786e\u7684\u6307\u9488\u4f4d\u7f6e */\n_M_cur = _M_first + (__offset - __node_offset\n* difference_type( _S_buffer_size() ) );\n}\nreturn(*this);\n}\n</code></pre> <p>\u4e0b\u9762\u8fd9\u51e0\u4e2a\u64cd\u4f5c\u7b26\u90fd\u662f\u8c03\u7528\u4e0a\u9762\u7684<code>+=</code>\u64cd\u4f5c\u7b26\u5b9e\u73b0\uff1a</p> <pre><code>/*\n    * \u64cd\u4f5c\u7b26+\u91cd\u8f7d\n    * \u8fd4\u56de\u64cd\u4f5c\u4e4b\u540e\u7684\u526f\u672c\n    */\n_Self\noperator+( difference_type __n ) const\n_GLIBCXX_NOEXCEPT\n{\n_Self __tmp = *this;\n/* \u8c03\u7528operator+=\u64cd\u4f5c */\nreturn(__tmp += __n);\n}\n\n\n/* \u5229\u7528operator+=\u64cd\u4f5c\u5b9e\u73b0 */\n_Self &amp;\noperator-=( difference_type __n )\n_GLIBCXX_NOEXCEPT\n{\nreturn(*this += -__n);\n}\n\n\n/*\n    * \u64cd\u4f5c\u7b26-\u91cd\u8f7d\n    * \u8fd4\u56de\u64cd\u4f5c\u4e4b\u540e\u7684\u526f\u672c\n    */\n_Self\noperator-( difference_type __n ) const\n_GLIBCXX_NOEXCEPT\n{\n_Self __tmp = *this;    /*  \u4fdd\u5b58\u526f\u672c */\nreturn(__tmp -= __n);   /* \u8c03\u7528operator-=\u64cd\u4f5c\u7b26 */\n}\n\n\n/* \u8fd4\u56de\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20\uff0c\u5373\u5b9e\u73b0\u968f\u673a\u5b58\u53d6 */\nreference\noperator[]( difference_type __n ) const\n_GLIBCXX_NOEXCEPT\n{\nreturn(*(*this + __n) );    /* \u8be5\u51fd\u6570\u8c03\u7528operator+,operator* */\n}\n</code></pre> <p>buffer\u8df3\u8dc3</p> <p>\u524d\u9762\u7684++\u4e0e--\u7b49\u64cd\u4f5c\u7b26\uff0c\u4f1a\u8c03\u7528\u5230<code>_M_set_node</code>\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u7684\u4f5c\u7528\u662f\u80fd\u591f\u8fdb\u884cbuffer\u4e4b\u95f4\u7684\u8df3\u8dc3\uff0c\u4fee\u6539<code>_M_node</code>\u3001<code>_M_first</code>\u3001<code>_M_last</code>\u7684\u6307\u5411\u3002</p> <pre><code>/**\n    *  Prepares to traverse new_node.  Sets everything except\n    *  _M_cur, which should therefore be set by the caller\n    *  immediately afterwards, based on _M_first and _M_last.\n    */\nvoid\n_M_set_node( _Map_pointer __new_node )\n_GLIBCXX_NOEXCEPT\n{\n_M_node     = __new_node;                                           /* \u6307\u5411\u65b0\u7684\u8282\u70b9 */\n_M_first    = *__new_node;                                          /* \u6307\u5411\u65b0\u8282\u70b9\u7684\u5934\u90e8 */\n_M_last     = _M_first + difference_type( _S_buffer_size() );       /* \u6307\u5411\u65b0\u8282\u70b9\u7684\u5c3e\u90e8 */\n}\n</code></pre> <p>\u636e\u6b64\uff0c\u6211\u4eec\u5c31\u628adeque\u7684\u8fed\u4ee3\u5668\u5b9e\u73b0\u7ec6\u8282\u8bb2\u89e3\u5b8c\u6bd5\u4e86\u3002</p>"},{"location":"src_analysis/stl/deque/#3deque","title":"3.deque","text":"<p>begin()\u51fd\u6570</p> <p>\u8fd4\u56de<code>_M_start</code>\u3002</p> <pre><code>iterator\nbegin()\n_GLIBCXX_NOEXCEPT\n{\nreturn(this-&gt;_M_impl._M_start);\n}\n</code></pre> <p>end()\u51fd\u6570</p> <p>\u8fd4\u56de<code>_M_finish</code>\u3002</p> <pre><code>iterator\nend()\n_GLIBCXX_NOEXCEPT\n{\nreturn(this-&gt;_M_impl._M_finish);\n}\n</code></pre> <p>size()\u51fd\u6570</p> <pre><code>size_type\nsize() const\n\n_GLIBCXX_NOEXCEPT\n{\nreturn(this-&gt;_M_impl._M_finish - this-&gt;_M_impl._M_start);\n}\n</code></pre> <p>resize()\u51fd\u6570</p> <p>\u6839\u636e\u4f20\u9012\u8fdb\u6765\u7684\u5927\u5c0f\uff0c\u5982\u679c\u8d85\u8fc7\u4e86\u603bsize\uff0c\u5c31\u91cd\u65b0\u5206\u914d\u6269\u5145<code>__new_size-size()</code>\u7a7a\u95f4\uff0c\u5426\u5219\u5220\u9664\u4ece<code>size()-__new_size</code>\u6570\u636e\uff0c\u4f8b\u5982\u73b0\u5728\u670920\u4e2a\u7a7a\u95f4\uff0cresize(12)\uff0c\u5c31\u4f1a\u628a\u540e\u97628\u4e2a\u7a7a\u95f4\u6570\u636e\u5220\u9664\u53ca\u7a7a\u95f4\u91ca\u653e\u3002</p> <pre><code>void\nresize( size_type __new_size )\n{\nconst size_type __len = size();\nif ( __new_size &gt; __len )\n_M_default_append( __new_size - __len );\nelse if ( __new_size &lt; __len )\n_M_erase_at_end( this-&gt;_M_impl._M_start\n+ difference_type( __new_size ) );\n}\n</code></pre> <p>empty()\u51fd\u6570</p> <p>\u5224\u65ad\u4e24\u4e2a\u6307\u9488\u4f4d\u7f6e\u5373\u53ef\u3002</p> <pre><code>bool\nempty() const\n\n_GLIBCXX_NOEXCEPT\n{\nreturn(this-&gt;_M_impl._M_finish == this-&gt;_M_impl._M_start);\n}\n</code></pre> <p>back\u51fd\u6570</p> <pre><code>reference\nback()\n_GLIBCXX_NOEXCEPT       // \u6307\u5411finish\u7684\u524d\u4e00\u4e2a\u4f4d\u7f6e\n{\niterator __tmp = end();\n--__tmp;\nreturn(*__tmp);\n}\n</code></pre> <p>push_front\u51fd\u6570</p> <pre><code>void\npush_front( const value_type &amp;__x )\n{\n//\u82e5\u5f53\u524d\u7f13\u51b2\u533a\u5b58\u5728\u53ef\u7528\u7a7a\u95f4\nif ( this-&gt;_M_impl._M_start._M_cur != this-&gt;_M_impl._M_start._M_first )\n{\nthis-&gt;_M_impl.construct( this-&gt;_M_impl._M_start._M_cur - 1, __x );// \u76f4\u63a5\u6784\u9020\u5bf9\u8c61\n--this-&gt;_M_impl._M_start._M_cur;    // \u8c03\u6574\u6307\u9488\u6240\u6307\u4f4d\u7f6e\n} else\n_M_push_front_aux( __x );   // \u9700\u5206\u914d\u4e00\u6bb5\u65b0\u7684\u8fde\u7eed\u7a7a\u95f4\n}\n</code></pre> <p>push_back\u51fd\u6570</p> <pre><code>void\npush_back( const value_type &amp;__x )\n{\n//\u82e5\u5f53\u524d\u7f13\u51b2\u533a\u5b58\u5728\u53ef\u7528\u7a7a\u95f4\nif ( this-&gt;_M_impl._M_finish._M_cur\n!= this-&gt;_M_impl._M_finish._M_last - 1 )\n{\nthis-&gt;_M_impl.construct( this-&gt;_M_impl._M_finish._M_cur, __x ); // \u76f4\u63a5\u6784\u9020\u5bf9\u8c61\n++this-&gt;_M_impl._M_finish._M_cur;       //\u8c03\u6574\u6307\u9488\u6240\u6307\u4f4d\u7f6e\n} else     // \u82e5\u5f53\u524d\u7f13\u51b2\u533a\u4e0d\u5b58\u5728\u53ef\u7528\u7a7a\u95f4\n// \u9700\u5206\u914d\u4e00\u6bb5\u65b0\u7684\u8fde\u7eed\u7a7a\u95f4\n_M_push_back_aux( __x );\n}\n</code></pre> <p>\u4e0a\u8ff0\u5bf9\u5e94\u7684pop\u52a8\u4f5c\u4e0e\u4e4b\u76f8\u53cd\u3002</p> <p>insert()\u51fd\u6570</p> <p>insert\u51fd\u6570\u6bd4\u8f83\u6709\u610f\u601d\uff0c\u6839\u636e\u4f20\u9012\u8fdb\u6765\u7684\u8fed\u4ee3\u5668\u4f4d\u7f6e\uff0c\u770b\u662f\u4e0d\u5728\u5f00\u5934\u4e0e\u7ed3\u5c3e\uff0c\u5982\u679c\u662f\u5728\u5f00\u5934\u76f4\u63a5\u8c03\u7528<code>push_front</code>\u51fd\u6570\uff0c\u7ed3\u5c3e\u76f4\u63a5\u8c03<code>push_back</code>\u51fd\u6570\uff0c\u5426\u5219\u5728\u5bb9\u5668\u4e2d\u76f4\u63a5\u63d2\u5165\u5143\u7d20\u3002</p> <pre><code>template &lt;typename _Tp, typename _Alloc&gt;\ntypename deque&lt;_Tp, _Alloc&gt;::iterator\ndeque&lt;_Tp, _Alloc&gt;::\ninsert(iterator __position, const value_type&amp; __x)\n{\nif (__position._M_cur == this-&gt;_M_impl._M_start._M_cur)   {\npush_front(__x);\nreturn this-&gt;_M_impl._M_start;\n}\nelse if (__position._M_cur == this-&gt;_M_impl._M_finish._M_cur)\n{\npush_back(__x);\niterator __tmp = this-&gt;_M_impl._M_finish;\n--__tmp;\nreturn __tmp;\n}\nelse  //\u5426\u5219\u5728\u5bb9\u5668\u76f4\u63a5\u63d2\u5165\u6570\u636e\nreturn _M_insert_aux(__position._M_const_cast(), __x);\n}\n</code></pre> <p>\u800c\u4e0a\u8ff0\u5728\u5bb9\u5668\u4e2d\u76f4\u63a5\u63d2\u5165\u5143\u7d20\u51fd\u6570\uff0c\u4f1a\u8ba1\u7b97\u63d2\u5165\u70b9\uff0c\u5982\u679c\u6bd4\u8f83\u9760\u524d\u9762\uff0c\u5c31\u5728\u524d\u9762\u63d2\u5165\uff0c\u9760\u8fd1\u540e\u9762\u5c31\u5728\u540e\u9762\u63d2\u5165\uff1a</p> <pre><code>template&lt;typename _Tp, typename _Alloc&gt;\ntypename deque&lt;_Tp, _Alloc&gt;::iterator\ndeque&lt;_Tp, _Alloc&gt;::\n_M_insert_aux(iterator __pos, const value_type&amp; __x)\n{\nvalue_type __x_copy = __x; // XXX copy\ndifference_type __index = __pos - this-&gt;_M_impl._M_start;  //\u8ba1\u7b97\u63d2\u5165\u70b9\u4e4b\u524d\u5143\u7d20\u4e2a\u6570\nif (static_cast&lt;size_type&gt;(__index) &lt; size() / 2)   //\u82e5\u63d2\u5165\u70b9\u4e4b\u524d\u7684\u5143\u7d20\u8f83\u5c11\n{\npush_front(_GLIBCXX_MOVE(front())); //\u5148\u5728\u5bb9\u5668\u5934\u90e8\u63d2\u5165\u4e0e\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\u7684\u5143\u7d20\niterator __front1 = this-&gt;_M_impl._M_start;\n++__front1;\niterator __front2 = __front1;\n++__front2;\n__pos = this-&gt;_M_impl._M_start + __index;\niterator __pos1 = __pos;\n++__pos1;\n_GLIBCXX_MOVE3(__front2, __pos1, __front1); // \u5143\u7d20\u642c\u79fb\n}\nelse\n{\npush_back(_GLIBCXX_MOVE(back()));\niterator __back1 = this-&gt;_M_impl._M_finish;\n--__back1;\niterator __back2 = __back1;\n--__back2;\n__pos = this-&gt;_M_impl._M_start + __index;\n_GLIBCXX_MOVE_BACKWARD3(__pos, __back2, __back1);\n}\n*__pos = _GLIBCXX_MOVE(__x_copy);       // \u5728\u5b89\u63d2\u70b9\u4e0a\u8bbe\u5b9a\u65b0\u503c\nreturn __pos;\n}\n</code></pre>"},{"location":"src_analysis/stl/hashtable/","title":"C++ STL\u6e90\u7801\u5256\u6790\u4e4b\u54c8\u5e0c\u8868","text":""},{"location":"src_analysis/stl/hashtable/#0","title":"0.\u5bfc\u8bed","text":"<p>\u54c8\u5e0c\u8868\uff0c\u662f\u4f5c\u4e3a<code>unordered_map</code>\u4e0e<code>unordered_set</code>\u7b49\u7684\u5e95\u5c42\u5bb9\u5668\uff0c\u81eagcc2.9\u540e\u6e90\u7801\u91cf\u5927\u589e\uff01</p> <p>\u8fd9\u6b21\u9605\u8bfb\u7684\u4ee3\u7801\u4ecd\u65e7\u662fgcc4.9.1\uff0c\u4ee3\u7801\u91cf\u975e\u5e38\u591a\uff0c\u5c31\u4e0d\u5168\u90e8\u5c55\u5f00\uff0c\u91cd\u70b9\u7814\u7a76\u5e95\u5c42\u54c8\u5e0c\u7684\u827a\u672f\u4e0e\u6280\u672f\uff0c\u4f3c\u4e4e\u8fd9\u4e24\u4e2a\u8bcd\u8bed\u5f88\u62bc\u97f5\u54e6\uff0c\u54c8\u54c8\uff0c\u8fdb\u5165\u6b63\u6587\uff5e</p>"},{"location":"src_analysis/stl/hashtable/#1hashtable","title":"1.Hashtable\u521d\u8bc6","text":"<p>\u5148\u6765\u770b\u4e00\u773cHashtable\u6e90\u7801\uff1a</p> <pre><code>template&lt;typename _Key, typename _Value, typename _Alloc,\ntypename _ExtractKey, typename _Equal,\ntypename _H1, typename _H2, typename _Hash,\ntypename _RehashPolicy, typename _Traits&gt;\nclass _Hashtable\n: \u3000public __detail::_Hashtable_base&lt;_Key, _Value, _ExtractKey, _Equal,\npublic __detail::_Map_base&lt;_Key, _Value, _Alloc, _ExtractKey, _Equal,  _H1, _H2, _Hash, _RehashPolicy, _Traits&gt;,\npublic __detail::_Insert&lt;_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits&gt;,\npublic __detail::_Rehash_base&lt;_Key, _Value, _Alloc, _ExtractKey, _Equal,_H1, _H2, _Hash, _RehashPolicy, _Traits&gt;,\npublic __detail::_Equality&lt;_Key, _Value, _Alloc, _ExtractKey, _Equal,_H1, _H2, _Hash, _RehashPolicy, _Traits&gt;,\nprivate __detail::_Hashtable_alloc&lt;typename __alloctr_rebind&lt;_Alloc,__detail::_Hash_node&lt;_Value,_Traits::__hash_cached::value&gt; &gt;::__type&gt;\n{\n};\n</code></pre> <p>\u6ca1\u5b66\u8fc7\u7c7b\u6a21\u677f\u7684\u4e00\u8138\u61f5\u903c\uff0c\u6570\u4e00\u4e0b\u6a21\u677f\u53c2\u6570\u90fd\u6655\u6b7b\u3002\u3002\u3002</p> <p>\u8fd8\u6709\u5b83\u7684\u7ee7\u627f\uff0c\u4e00\u4e0b\u5b50\u6574\u51fa\u8fd9\u4e48\u591a\u7236\u4eb2\u6765\u3002\u3002\u3002</p> <p>\u4e0b\u9762\u5c31\u6765\u4e00\u4e00\u5206\u6790\u5b83\u7684\u7236\u4eb2\uff0c\u7136\u540e\u518d\u56de\u5230\u54c8\u5e0c\u8868\u3002</p>"},{"location":"src_analysis/stl/hashtable/#2_hashtable_base","title":"2._Hashtable_base","text":"<p>\u5176\u4e2d\u6ce8\u91ca\u4e2d\u5982\u4e0b\uff1a</p> <p>Helper class adding management of _Equal functor to _Hash_code_base type.</p> <p>\u5e2e\u52a9\u7a0b\u5e8f\u7c7b\uff0c\u5c06\u4eff\u51fd\u6570_Equal\u7684\u7ba1\u7406\u6dfb\u52a0\u5230_Hash_code_base\u4e2d\u3002</p> <p>\u5bf9\u6bd4\u4ee3\u7801\u5c31\u53ef\u4ee5\u770b\u51fa\u6765\u662f\u5565\u610f\u601d\u4e86\uff1a</p> <pre><code>template&lt;typename _Key, typename _Value,\ntypename _ExtractKey, typename _Equal,\ntypename _H1, typename _H2, typename _Hash, typename _Traits&gt;\nstruct _Hashtable_base\n: public _Hash_code_base&lt;_Key, _Value, _ExtractKey, _H1, _H2, _Hash, _Traits::__hash_cached::value&gt;,\nprivate _Hashtable_ebo_helper&lt;0, _Equal&gt;\n{\n\n};\n</code></pre> <p>\u5bf9\u6bd4\u4e00\u4e0b<code>_Hash_code_base</code>\u4e0e<code>_Hashtable_base</code>\uff0c\u4e24\u8005\u5c31\u5dee\u4e00\u4e2a<code>_Equal</code>\uff0c\u636e\u6b64\u8fd9\u53e5\u8bdd\u89e3\u91ca\u5b8c\u6bd5\u3002</p> <p>\u5b83\u7684\u57fa\u7c7b\u53c8\u6709\u4e24\u4e2a\u5206\u522b\u662f\uff1a</p> <pre><code>__detail::_Hash_code_base\n__detail::_Hashtable_ebo_helper\n</code></pre> <p>\u6211\u4eec\u7ee7\u7eed\u8ffd\u8e2a\u8fd9\u4e24\u4e2a\u7c7b\uff01</p>"},{"location":"src_analysis/stl/hashtable/#21-_hash_code_base","title":"2.1 _Hash_code_base","text":"<p>\u8fd9\u4e2a\u7c7b\u6700\u540e\u4e00\u4e2a<code>__cache_hash_code</code>\u8868\u793a\u662f\u5426\u7f13\u5b58hash code\u3002</p> <pre><code>template&lt;typename _Key, typename _Value, typename _ExtractKey,\ntypename _H1, typename _H2, typename _Hash,bool __cache_hash_code&gt;\nstruct _Hash_code_base;\n</code></pre> <p>\u6839\u636e\u662f\u5426\u7f13\u5b58\uff0c\u5f97\u5230\u5176\u504f\u7279\u5316\u7248\u672c\uff1a</p> <ul> <li>\u4f7f\u7528\u8303\u56f4\u54c8\u5e0c(\u5b9e\u9645\u4e0a\u5c31\u662f\u6211\u4eec\u901a\u5e38\u8bf4\u7684\u9664\u7559\u4f59\u6570\u6cd5)\uff0c\u4e0d\u7f13\u5b58hash code\u3002</li> </ul> <pre><code>template&lt;typename _Key, typename _Value, typename _ExtractKey,\ntypename _H1, typename _H2, typename _Hash&gt;\nstruct _Hash_code_base&lt;_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false&gt;\n: private _Hashtable_ebo_helper&lt;0, _ExtractKey&gt;,\nprivate _Hashtable_ebo_helper&lt;1, _Hash&gt;\n}\n</code></pre> <ul> <li>\u4f7f\u7528\u8303\u56f4\u54c8\u5e0c(\u5b9e\u9645\u4e0a\u5c31\u662f\u6211\u4eec\u901a\u5e38\u8bf4\u7684\u9664\u7559\u4f59\u6570\u6cd5)\uff0c\u7f13\u5b58hash code\u3002</li> </ul> <p>\u5bf9\u4e8e\u8fd9\u4e2a\u504f\u7279\u5316\uff0c\u7f13\u5b58\u662f\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u6240\u4ee5\u4ee3\u7801\u4e2d\u53ea\u662f\u58f0\u660e\uff0c\u5e76\u6ca1\u6709\u5b9a\u4e49\uff01</p> <pre><code>template&lt;typename _Key, typename _Value, typename _ExtractKey,\ntypename _H1, typename _H2, typename _Hash&gt;\nstruct _Hash_code_base&lt;_Key, _Value, _ExtractKey, _H1, _H2, _Hash, true&gt;;\n</code></pre> <ul> <li>\u6709\u54c8\u5e0c\u51fd\u6570\u4ee5\u53ca\u8303\u56f4\u54c8\u5e0c\u51fd\u6570\uff0c\u4e0d\u7f13\u5b58hash code\u3002</li> </ul> <pre><code>template&lt;typename _Key, typename _Value, typename _ExtractKey,\ntypename _H1, typename _H2&gt;\nstruct _Hash_code_base&lt;_Key, _Value, _ExtractKey, _H1, _H2,\n_Default_ranged_hash, false&gt;\n: private _Hashtable_ebo_helper&lt;0, _ExtractKey&gt;,\nprivate _Hashtable_ebo_helper&lt;1, _H1&gt;,\nprivate _Hashtable_ebo_helper&lt;2, _H2&gt;\n{\n};\n</code></pre> <ul> <li>\u4e0a\u8ff0\u7684\u7f13\u5b58hash code</li> </ul> <pre><code>template&lt;typename _Key, typename _Value, typename _ExtractKey,\ntypename _H1, typename _H2&gt;\nstruct _Hash_code_base&lt;_Key, _Value, _ExtractKey, _H1, _H2,\n_Default_ranged_hash, true&gt;\n: private _Hashtable_ebo_helper&lt;0, _ExtractKey&gt;,\nprivate _Hashtable_ebo_helper&lt;1, _H1&gt;,\nprivate _Hashtable_ebo_helper&lt;2, _H2&gt;\n{\n</code></pre> <p>\u4e0a\u8ff0_H1\u4e0e_H2\u5927\u5bb6\u80af\u5b9a\u5f88\u8ff7\u60d1\uff0c\u4e0b\u9762\u6765\u770b\u4e00\u4e0b\uff1a</p> <p>\uff081\uff09 Default range hashing function(\u9ed8\u8ba4\u8303\u56f4\u54c8\u5e0c\u51fd\u6570)</p> <pre><code>h1=hash&lt;key&gt;\n</code></pre> <p>\u4e0b\u9762\u8fd9\u4e2a\u5c31\u662f\uff1a</p> <pre><code>h2(h1(key),N)=h1(key)%N\n</code></pre> <p>\u5177\u4f53\u53ef\u4ee5\u5728\u540e\u9762\u770b\u5230\u9610\u8ff0\u3002</p> <pre><code>struct _Mod_range_hashing\n{\ntypedef std::size_t first_argument_type;\ntypedef std::size_t second_argument_type;\ntypedef std::size_t result_type;\n\nresult_type\noperator()(first_argument_type __num,\nsecond_argument_type __den) const noexcept\n{ return __num % __den; }\n};\n</code></pre> <p>\u522b\u770b\u4f7f\u7528\u4e00\u4e2astruct\u5b9a\u4e49\u7684\uff0c\u5927\u5bb6\u4f1a\u4ee5\u4e3a\u662f\u7c7b\uff0c\u5b9e\u9645\u4e0a\u91cd\u8f7d\u4e86()\u64cd\u4f5c\u7b26\uff0c\u5c31\u662f\u4e2a\u4eff\u51fd\u6570\u3002</p> <p>\u4e0a\u9762\u5bf9\u5e94\u5230\u54c8\u5e0c\u8868\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u5c31\u662f\u5927\u5bb6\u77e5\u9053\u7684\u6563\u5217\u51fd\u6570\uff1a\u9664\u7559\u4f59\u6570\u6cd5\u3002</p> <pre><code>f(__num) = __num mod __den(__den&lt;=__num)\n</code></pre> <p>\u5176\u6b21\uff0c\u662f<code>_Default_ranged_hash</code>:</p> <pre><code>struct _Default_ranged_hash { };\n</code></pre> <p>\u8fd9\u4e2a\u53ea\u662f\u4f5c\u4e3a\u6807\u8bb0\u7528\uff0c\u9ed8\u8ba4\u5df2\u7ecf\u8ba1\u7b97\u7684\u8303\u56f4\u54c8\u5e0c\u51fd\u6570( Default ranged hash function):</p> <pre><code>h(k, N) = h2(h1(k), N),\n</code></pre> <p>\u6240\u4ee5\u5230\u8fd9\uff0c\u5e95\u5c42\u7684\u54c8\u5e0c\u8868\u7684\u6563\u5217\u51fd\u6570\u5f88\u660e\u663e\u4e86\uff0c\u9ed8\u8ba4\u5c31\u662f\u8fd9\u6837\u7684\u3002 \u800c\u521a\u624d\u63d0\u5230\u7684\u6807\u8bb0\u5c31\u662f\u7531\u4e8e\u7c7b\u578bH1\u4e0eH2\u7684\u5bf9\u8c61\u7ec4\u5408\u6210H\uff0c\u4f1a\u6d88\u8017\u989d\u5916\u7684\u62f7\u8d1d\u64cd\u4f5c\uff0c\u56e0\u6b64\u8fd9\u91cc\u5f15\u51fa\u4e86\u8fd9\u4e2a\u6807\u8bb0\u3002</p> <p>\u81f3\u6b64\uff0c\u4e0a\u9762\u63d0\u5230\u7684_H1\u4e0e_H2\u8bb2\u89e3\u5b8c\u6bd5\uff0c\u5c31\u662f\u5206\u522b\u5bf9\u5e94\u4e0a\u8ff0\u4e24\u4e2a\u51fd\u6570\u3002</p> <p>\uff082\uff09 rehash\u64cd\u4f5c</p> <p>\u7d27\u63a5\u7740\uff0c\u8fd8\u6709\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u79f0\u4e3arehash\uff0c\u76f8\u4fe1\u5927\u5bb6\u5f88\u6e05\u695arehash\uff0c\u5f53\u6563\u5217\u8868\u7684\u51b2\u7a81\u5230\u8fbe\u4e00\u5b9a\u7a0b\u5ea6\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u91cd\u65b0\u5c06key\u653e\u5230\u5408\u9002\u4f4d\u7f6e\uff0c\u800c\u54c8\u5e0c\u8868\u7684\u5e95\u5c42\u6e90\u7801\u5c31\u662f\u8fd9\u6837\u505a\u7684\uff0c\u8fd9\u91cc\u5c01\u88c5\u6210\u4e86\u4e00\u4e2arehash policy\uff1a</p> <pre><code>struct _Prime_rehash_policy\n{\n//...\n};\n</code></pre> <p>rehash\u64cd\u4f5c\u4e2d\u63d0\u5230\uff1a\u6876\u7684\u5927\u5c0f(bucket size) \u9ed8\u8ba4\u901a\u5e38\u662f\u6700\u5c0f\u7684\u7d20\u6570\uff0c\u4ece\u800c\u4fdd\u8bc1\u88c5\u8f7d\u56e0\u5b50(load factor \u5bb9\u5668\u5f53\u524d\u5143\u7d20\u6570\u91cf\u4e0e\u6876\u6570\u91cf\u4e4b\u6bd4\u3002)\u8db3\u591f\u5c0f\u3002\u88c5\u8f7d\u56e0\u5b50\u7528\u6765\u8861\u91cf\u54c8\u5e0c\u8868\u6ee1\u7684\u7a0b\u5ea6\uff0c\u6700\u5927\u52a0\u8f7d\u56e0\u5b50\u9ed8\u8ba4\u503c\u4e3a1.0.</p> <pre><code>_Prime_rehash_policy(float __z = 1.0)\n: _M_max_load_factor(__z), _M_next_resize(0) { }\n\n\n&gt; rehash\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u7d20\u6570\u6876\n</code></pre> <p>\u5f53\u54c8\u5e0c\u51b2\u7a81\u7684\u65f6\u5019\uff0c\u600e\u4e48rehash\u5462\uff1f</p> <pre><code> inline std::size_t\n_Prime_rehash_policy::\n_M_next_bkt(std::size_t __n) const\n{\nconst unsigned long* __p = std::lower_bound(__prime_list, __prime_list + _S_n_primes, __n);\n_M_next_resize = static_cast&lt;std::size_t&gt;(__builtin_ceil(*__p * _M_max_load_factor));\nreturn *__p;\n}\n</code></pre> <p>\u5f53\u53d1\u751f\u54c8\u5e0c\u51b2\u7a81\u7684\u65f6\u5019\uff0c\u8be5\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u4e0d\u5c0f\u4e8en\u7684\u7d20\u6570\u6765\u4f5c\u4e3a\u4e00\u4e0b\u4e2a\u6876\u3002</p> <p>\u7d20\u6570\u8868</p> <p>\u600e\u4e48\u67e5\u627e\u7d20\u6570\u5462\uff1f \u53d1\u73b0\u4e0a\u9762\u6709\u4e2a<code>__prime_list</code>,\u4e8e\u662f\u53d6\u67e5\u627e\uff0c\u5728<code>libstdc++v3/src/shared/hashtable-aux.cc</code>\u4e2d\u627e\u5230\u4e86\u6240\u6709\u7684\u7d20\u6570\u8868\u3002 \u91cc\u9762\u603b\u5171\u6709256+1+49\u6216\u8005256+49\u4e2a\u3002 \u5982\u679csizeof(unsigned long)!=8 \u5c31\u662f256+1+49\u4e2a\uff0c\u5426\u5219\u5c31\u662f256+49\u4e2a\u3002</p> <pre><code>extern const unsigned long __prime_list[] = // 256 + 1 or 256 + 48 + 1\n{\n2ul, 3ul, 5ul, 7ul, 11ul, 13ul, 17ul, 19ul, 23ul, 29ul, 31ul,\n37ul, 41ul, 43ul, 47ul, 53ul, 59ul, 61ul, 67ul, 71ul, 73ul, 79ul,\n83ul, 89ul, 97ul, 103ul, 109ul, 113ul, 127ul, 137ul, 139ul, 149ul\uff0c\n// \u540e\u9762\u8fd8\u6709\u5f88\u591a\n}\n</code></pre> <p>\u6240\u4ee5\u4e00\u5207\u90fd\u53d8\u5f97\u975e\u5e38\u6e05\u6670\uff0c\u90a3\u5c31\u662f\u901a\u8fc7lower_bound\u5728\u4e0a\u8ff0\u8868\u4e2d\u53bb\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e\u7ed9\u5b9a\u503cn\u7684\u7d20\u6570\u3002</p> <pre><code>enum { _S_n_primes = sizeof(unsigned long) != 8 ? 256 : 256 + 48 };\n</code></pre> <p>\u8ba1\u7b97\u5143\u7d20\u5bf9\u5e94\u7684\u6876</p> <p>\u6839\u636e\u6700\u5927\u52a0\u8f7d\u56e0\u5b50\u7b97\u51fa\u6700\u5c0f\u7684\u6876\uff0c\u7136\u540e\u6839\u636e\u6876\u8ba1\u7b97\u51fa\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20\u5bf9\u5e94\u7684\u6700\u5c0f\u7d20\u6570\u6876\u3002</p> <pre><code>inline std::size_t\n_Prime_rehash_policy::\n_M_bkt_for_elements(std::size_t __n) const\n{\n// \u83b7\u53d6\u6700\u5c0f\u7684\u6876\nconst float __min_bkts = __n / _M_max_load_factor;\n// \u83b7\u53d6\u6700\u5c0f\u7d20\u6570p\nconst unsigned long* __p = std::lower_bound(__prime_list, __prime_list\n+ _S_n_primes, __min_bkts);\n_M_next_resize =\nstatic_cast&lt;std::size_t&gt;(__builtin_ceil(*__p * _M_max_load_factor));\nreturn *__p;\n}\n</code></pre> <p>_Hashtable_ebo_helper\u5c31\u662f\u524d\u9762\u5b66\u4e60\u8fc7\u7684EBO\u7a7a\u57fa\u7c7b </p> <p><code>_Map_base</code>\u4e3b\u8981\u662f\u901a\u8fc7\u504f\u7279\u5316\uff0c\u5b9e\u73b0\u91cd\u8f7d\u64cd\u4f5c\u7b26<code>[]</code>\u4e0e<code>at</code>\u3002</p> <p>\uff40_Insert\uff40\u4e3b\u8981\u5b8c\u6210\u63d2\u5165\u76f8\u5173\u3002</p> <p>\uff40_Rehash_base\uff40\u4e3b\u8981\u5b8c\u6210\u4e0a\u8ff0rehash\u4e2d\u7684\u6700\u5927\u52a0\u8f7d\u56e0\u5b50\u503c\u7684\u4f20\u9012\u3002</p> <p>\uff40_Equality_base\uff40\u4e3b\u8981\u662f\u4e3a\u7c7b<code>_Equality</code>\u63d0\u4f9b\u516c\u5171\u7c7b\u578b\u4e0e\u51fd\u6570\u3002</p> <p>\u5230\u73b0\u5728\u4e3a\u6b62\uff0c\u4e0a\u8ff0\u7684<code>_Hashtable</code>\u7ee7\u627f\u7684\u6240\u6709\u7c7b\u90fd\u9610\u8ff0\u5b8c\u6bd5\u3002</p>"},{"location":"src_analysis/stl/hashtable/#2hashtable","title":"2.hashtable\u4e2d\u94fe\u8868\u7684\u8282\u70b9\u7ed3\u6784","text":"<p>hash node\u57fa\u7c7b\uff0c\u8fd9\u4e2a\u53ea\u5305\u542b\u6307\u9488\u58f0\u660e\u3002</p> <pre><code>struct _Hash_node_base\n{\n_Hash_node_base* _M_nxt;\n\n_Hash_node_base() noexcept : _M_nxt() { }\n\n_Hash_node_base(_Hash_node_base* __next) noexcept : _M_nxt(__next) { }\n};\n</code></pre> <p>\u5e26\u8282\u70b9\u503c\u7684\u7c7b\u7ee7\u627f\u4e0a\u8ff0\u57fa\u7c7b</p> <pre><code>template&lt;typename _Value&gt;\nstruct _Hash_node_value_base : _Hash_node_base\n{\ntypedef _Value value_type;\n\n__gnu_cxx::__aligned_buffer&lt;_Value&gt; _M_storage;\n\n_Value*\n_M_valptr() noexcept\n{ return _M_storage._M_ptr(); }\n\nconst _Value*\n_M_valptr() const noexcept\n{ return _M_storage._M_ptr(); }\n\n_Value&amp;\n_M_v() noexcept\n{ return *_M_valptr(); }\n\nconst _Value&amp;\n_M_v() const noexcept\n{ return *_M_valptr(); }\n};\n</code></pre> <p>\u524d\u9762\u63d0\u5230\u8282\u70b9\u662f\u5426\u8fd8\u6709hash code\uff0c\u6545\u5728\u8282\u70b9\u4e2d\u5e94\u8be5\u5f97\u5e26hash code\uff0c\u800c\u5177\u4f53\u5728\u4e0b\u9762\u4e2d\u5b9e\u73b0\uff1a</p> <pre><code>/**\n*  Primary template struct _Hash_node.\n*/\ntemplate&lt;typename _Value, bool _Cache_hash_code&gt;\nstruct _Hash_node;\n\n/**\n*  Specialization for nodes with caches, struct _Hash_node.\n*\n*  Base class is __detail::_Hash_node_value_base.\n*/\ntemplate&lt;typename _Value&gt;\nstruct _Hash_node&lt;_Value, true&gt; : _Hash_node_value_base&lt;_Value&gt;\n{\nstd::size_t  _M_hash_code;\n\n_Hash_node*\n_M_next() const noexcept\n{ return static_cast&lt;_Hash_node*&gt;(this-&gt;_M_nxt); }\n};\n\n/**\n*  Specialization for nodes without caches, struct _Hash_node.\n*\n*  Base class is __detail::_Hash_node_value_base.\n*/\ntemplate&lt;typename _Value&gt;\nstruct _Hash_node&lt;_Value, false&gt; : _Hash_node_value_base&lt;_Value&gt;\n{\n_Hash_node*\n_M_next() const noexcept\n{ return static_cast&lt;_Hash_node*&gt;(this-&gt;_M_nxt); }\n};\n</code></pre> <p>\u5230\u8fd9\u91cc\u5c31\u5f88\u660e\u786e\u4e86\uff0c\u5bf9\u4e8e\u8282\u70b9\uff0c\u5206\u4e3a\u5305\u542bhash code\u4e0e\u4e0d\u5305\u542b\uff0c\u5177\u4f53\u662f\u6839\u636e\u4f20\u9012\u7684\u6a21\u677f\u53c2\u6570\uff0c\u6765\u8c03\u7528\u76f8\u5e94\u7684\u504f\u7279\u5316\u7248\u672c\u3002</p>"},{"location":"src_analysis/stl/hashtable/#3","title":"3.\u8fed\u4ee3\u5668","text":"<p>\u8fed\u4ee3\u5668\u57fa\u7c7b\u663e\u793a\u4f7f\u7528using\u7684\u8bed\u6cd5\uff0c\u8fd9\u4e2a\u8bed\u6cd5\u7c7b\u4f3c\u4e8etypedef\uff0c\u540e\u9762\u5b9a\u4e49\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528<code>__node_type</code>\u8bed\u6cd5\u6765\u5b9a\u4e49\uff0c<code>_M_incr</code>\u51fd\u6570\u5b8c\u6210\u94fe\u8868\u4e0b\u4e00\u4e2a\u8282\u70b9\u83b7\u53d6\u3002</p> <pre><code>/// Base class for node iterators.\ntemplate&lt;typename _Value, bool _Cache_hash_code&gt;\nstruct _Node_iterator_base\n{\nusing __node_type = _Hash_node&lt;_Value, _Cache_hash_code&gt;;\n\n__node_type*  _M_cur;\n\n_Node_iterator_base(__node_type* __p) noexcept\n: _M_cur(__p) { }\n\nvoid\n_M_incr() noexcept\n{ _M_cur = _M_cur-&gt;_M_next(); }\n};\n</code></pre> <p>\u8282\u70b9\u8fed\u4ee3\u5668\uff1a\u5bf9\u4e0b\u9762\u4ee3\u7801\u7814\u8bfb\uff0c\u5b66\u4e60\u5230\u4e24\u70b9\uff1a - \u7b2c\u4e00\uff1ausing \u7684\u4f7f\u7528 - hashtable\u7684\u8fed\u4ee3\u5668\u5c5e\u4e8eforward_iterator - \u91cd\u8f7d\u4e86++,--,*,-&gt;\uff0c\u8fd9\u56db\u4e2a\u64cd\u4f5c\u7b26</p> <pre><code>template&lt;typename _Value, bool __constant_iterators, bool __cache&gt;\nstruct _Node_iterator\n: public _Node_iterator_base&lt;_Value, __cache&gt;\n{\nprivate:\nusing __base_type = _Node_iterator_base&lt;_Value, __cache&gt;;\nusing __node_type = typename __base_type::__node_type;\n\npublic:\ntypedef _Value                  value_type;\ntypedef std::ptrdiff_t              difference_type;\ntypedef std::forward_iterator_tag           iterator_category;\n\nusing pointer = typename std::conditional&lt;__constant_iterators,\nconst _Value*, _Value*&gt;::type;\n\nusing reference = typename std::conditional&lt;__constant_iterators,\nconst _Value&amp;, _Value&amp;&gt;::type;\n\n_Node_iterator() noexcept\n: __base_type(0) { }\n\nexplicit\n_Node_iterator(__node_type* __p) noexcept\n: __base_type(__p) { }\n\nreference\noperator*() const noexcept\n{ return this-&gt;_M_cur-&gt;_M_v(); }\n\npointer\noperator-&gt;() const noexcept\n{ return this-&gt;_M_cur-&gt;_M_valptr(); }\n\n_Node_iterator&amp;\noperator++() noexcept\n{\nthis-&gt;_M_incr();\nreturn *this;\n}\n\n_Node_iterator\noperator++(int) noexcept\n{\n_Node_iterator __tmp(*this);\nthis-&gt;_M_incr();\nreturn __tmp;\n}\n};\n</code></pre>"},{"location":"src_analysis/stl/hashtable/#4hashtable","title":"4.\u4ed4\u7ec6\u7814\u7a76hashtable\u7684\u91cd\u8981\u5185\u90e8\u7ed3\u6784","text":"<p>\u5185\u90e8\u7ed3\u6784\u4e3a\u5728\u6bcf\u4e2a\u5143\u7d20\u4e2d\u7ef4\u62a4\u4e00\u4e2a\u5355\u94fe\u8868, \u7136\u540e\u5728\u5355\u94fe\u8868\u4e0a\u6267\u884c\u5143\u7d20\u7684\u63d2\u5165\u3001\u641c\u5bfb\u3001\u5220\u9664\u7b49\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u5143\u7d20\u88ab\u79f0\u4e3a\u6876(bucket)\uff0c\u5e95\u5c42\u6784\u5efa\u5148\u91c7\u7528H1\u8ba1\u7b97\u51fakey\u7684hash code\uff0c\u518d\u901a\u8fc7\u9664\u7559\u4f59\u6570\u6cd5H2\u5f97\u5230\u5176\u5bf9\u5e94\u7684\u6876\u3002</p> <pre><code>template&lt;typename _Key, typename _Value, typename _Alloc,\ntypename _ExtractKey, typename _Equal,\ntypename _H1, typename _H2, typename _Hash,\ntypename _RehashPolicy, typename _Traits&gt;\nclass _Hashtable\nprivate:\n__bucket_type*      _M_buckets;  //_ Hash_node_base *\nsize_type           _M_bucket_count;    // bucket \u8282\u70b9\u4e2a\u6570\n__node_base     _M_before_begin;    // _NodeAlloc::value_type\nsize_type           _M_element_count;   // //hashtable\u4e2dlist\u8282\u70b9\u4e2a\u6570\n_RehashPolicy       _M_rehash_policy;  // rehash\u7b56\u7565\n__bucket_type       _M_single_bucket;  // \u53ea\u9700\u8981\u4e00\u4e2a\u6876\u7528\n};\n</code></pre> <p>hashtable\u7684\u4e00\u4e9b\u91cd\u8981\u51fd\u6570\uff1a</p> <p>begin\u51fd\u6570</p> <pre><code>iterator\nbegin() noexcept\n{ return iterator(_M_begin()); }\n</code></pre> <p>\u8c03\u7528<code>_M_begin</code>:</p> <p>\u53ef\u4ee5\u628a<code>_M_before_begin</code>\u60f3\u8c61\u6210\u4e00\u4e2ahead\u8282\u70b9\uff0c\u7b2c\u4e00\u4e2a\u8282\u70b9\u5c31\u662f\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002</p> <pre><code>__node_type*\n_M_begin() const\n{ return static_cast&lt;__node_type*&gt;(_M_before_begin._M_nxt); }\n</code></pre> <p>end\u51fd\u6570</p> <p>\u56e0\u4e3a\u662f\u5355\u94fe\u8868\uff0c\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5373\u53ef\u3002</p> <pre><code>iterator\nend() noexcept\n{ return iterator(nullptr); }\n</code></pre> <p>size\u4e0eempty\u51fd\u6570</p> <pre><code>size_type\nsize() const noexcept\n{ return _M_element_count; }\n\nbool\nempty() const noexcept\n{ return size() == 0; }\n</code></pre> <p>\u6876\u6570\u91cf</p> <pre><code>size_type\nbucket_count() const noexcept\n{ return _M_bucket_count; }\n</code></pre> <p>\u8ba1\u7b97\u52a0\u8f7d\u56e0\u5b50</p> <p>\u5f53\u524d\u5143\u7d20\u6570\u91cf\u9664\u4ee5\u6876\u7684\u6570\u91cf</p> <pre><code>float\nload_factor() const noexcept\n{\nreturn static_cast&lt;float&gt;(size()) / static_cast&lt;float&gt;(bucket_count());\n}\n</code></pre> <p>\u6876\u7684index\u8ba1\u7b97</p> <p>\u6839\u636e\u4f20\u9012\u8fdb\u6765\u7684key\u83b7\u5f97\u6876\u7684index\u3002</p> <pre><code>size_type\nbucket(const key_type&amp; __k) const\n{ return _M_bucket_index(__k, this-&gt;_M_hash_code(__k)); }\n</code></pre> <p>\u5728<code>_Hash_code_base</code>\u4e2d\u6709\u5982\u4e0b\u5b9e\u73b0\uff1a</p> <p>\u800c<code>_M_h1</code>\u8fd4\u56de\u7684\u662f<code>_H1</code>\uff0c<code>_H1</code>\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728<code>unordered_map</code>\u4e2d\u67e5\u627e\u5230\u662f<code>_Hash=hash&lt;_Key&gt;</code>\uff0c\u56e0\u6b64\u4e0b\u9762\u8fd9\u4e2a\u51fd\u6570\u5c31\u662f\u6570\u5b66\u8868\u8fbe\u5f0f\uff1a <code>h1(k)</code>\u6765\u83b7\u53d6hash code\u3002</p> <p>\u8fd4\u56de\u6876\u7684hash code\u3002</p> <pre><code>__hash_code\n_M_hash_code(const _Key&amp; __k) const\n{ return _M_h1()(__k); }\n</code></pre> <p>\u8fd4\u56de\u6876\u7684index\u3002</p> <p><code>_M_bucket_index</code>\u5728\u540c\u4e00\u6587\u4ef6\u540e\u9762\u627e\u5230\u5b9a\u4e49\uff1a</p> <pre><code>size_type\n_M_bucket_index(const key_type&amp; __k, __hash_code __c) const\n{ return __hash_code_base::_M_bucket_index(__k, __c, _M_bucket_count); }\n</code></pre> <p>\u6211\u4eec\u7ee7\u7eed\u53bb<code>__hash_code_base</code>\u67e5\u627e<code>_M_bucket_index</code>\uff0c\u53ef\u5728<code>bits/hashtable_policy.h</code>\u4e2d\u627e\u5230\uff1a</p> <pre><code>std::size_t\n_M_bucket_index(const _Key&amp;, __hash_code __c,\nstd::size_t __n) const\n{ return _M_h2()(__c, __n); }\n</code></pre> <p>\u540c\u4e0a\u8ff0h1\u7684\u67e5\u627e\uff0c\u53ef\u4ee5\u5728<code>unordered_map</code>\u4e2d\u67e5\u5230<code>_H2</code>\u9ed8\u8ba4\u91c7\u7528<code>_Mod_range_hashing</code>\uff0c\u518d\u770b\u8fd9\u4e2a\u6e90\u7801\uff1a</p> <pre><code>struct _Mod_range_hashing\n{\ntypedef std::size_t first_argument_type;\ntypedef std::size_t second_argument_type;\ntypedef std::size_t result_type;\n\nresult_type\noperator()(first_argument_type __num,\nsecond_argument_type __den) const noexcept\n{ return __num % __den; }\n};\n</code></pre> <p>\u5bf9\u5e94\u6570\u5b66\u8868\u8fbe\u5f0f\u5c31\u662f<code>h2(c,n)</code>\u3002</p> <p>\u56e0\u6b64\u4e0a\u8ff0<code>bucket</code>\u83b7\u53d6\u6876\u7684index\u5bf9\u5e94\u7684\u6570\u5b66\u8868\u8fbe\u5f0f\u5c31\u662f\uff1a</p> <pre><code>h(k,hash(k))=h(k,hash(k),n)=h(k,hash(k)%n)\n</code></pre> <p>\u5b9e\u9645\u4e0a\u5c31\u662f\u6700\u7ec8\u7684\uff1a</p> <pre><code>hash(k)%n\n</code></pre> <p>\u8fd9\u4e2a\u5c31\u662f\u6876\u7684index\u8ba1\u7b97\u3002</p>"},{"location":"src_analysis/stl/iterator/","title":"C++ STL\u6e90\u7801\u5256\u6790\u4e4b\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684iterator_category","text":""},{"location":"src_analysis/stl/iterator/#0","title":"0.\u5bfc\u8bed","text":"<p>\u672c\u8282\u4f7f\u7528\u4e0a\u8282Traits\u7279\u6027\uff0c\u7814\u7a76iterator\u6e90\u7801\uff0c\u6765\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684iterator_category\uff0c\u540c\u65f6\u5bf9iterator\u7684\u6e90\u7801\u7ed3\u6784\u8fdb\u884c\u5206\u6790\u3002</p> <p>\u77e5\u5176\u7136\uff0c\u77e5\u5176\u6240\u4ee5\u7136\uff0c\u6e90\u7801\u9762\u524d\u4e86\u65e0\u79d8\u5bc6\uff01</p>"},{"location":"src_analysis/stl/iterator/#1iterator_category","title":"1.\u5229\u7528\u8403\u53d6\u673a\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684iterator_category\u8bc6\u522b","text":"<p>\u4e0a\u4e00\u8282\u6307\u51fa\u4e86\u8fed\u4ee3\u5668\u7684\u4f5c\u7528\uff0c\u4f9d\u65e7\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u8fed\u4ee3\u5668\u662f\u6307\u5411\u5e8f\u5217\u5143\u7d20\u7684\u6307\u9488\u7684\u4e00\u79cd\u62bd\u8c61\u3002\u901a\u8fc7\u4f7f\u7528\u8fed\u4ee3\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u5e8f\u5217\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\u3001\u6539\u53d8\u5e8f\u5217\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\u7684\u503c\u3001\u4f7f\u8fed\u4ee3\u5668\u5411\u524d\u6216\u5411\u540e\u884c\u8d70\u7b49\u7b49\u3002</p> <p>\u8fed\u4ee3\u5668\u6709\u5e38\u89c1\u6709\u4e94\u79cd\u7c7b\u578b: value_type, difference_type, reference_type, pointer_type\u90fd\u6bd4\u8f83\u5bb9\u6613\u5728 traits \u548c\u76f8\u5e94\u504f\u7279\u5316\u4e2d\u63d0\u53d6\u3002</p> <p>\u4f46\u662f\uff0citerator_category\u4e00\u822c\u4e5f\u67095\u4e2a\uff0c\u8fd9\u4e2a\u76f8\u5e94\u578b\u522b\u4f1a\u5f15\u53d1\u8f83\u5927\u89c4\u6a21\u7684\u5199\u4ee3\u7801\u5de5\u7a0b\u3002</p> <ul> <li>\u5355\u5411\u79fb\u52a8\u53ea\u8bfb\u8fed\u4ee3\u5668 Input Iterator</li> <li>\u5355\u5411\u79fb\u52a8\u53ea\u5199\u8fed\u4ee3\u5668 Output Iterator</li> <li>\u5355\u5411\u79fb\u52a8\u8bfb\u5199\u8fed\u4ee3\u5668 Forward Iterator</li> <li>\u53cc\u5411\u79fb\u52a8\u8bfb\u5199\u8fed\u4ee3\u5668 Bidirectional Iterator</li> </ul> <p></p> <p>\u4f8b\u5982\uff1a\u6211\u4eec\u5b9e\u73b0\u4e86 advanceII, advanceBI, advanceRAI \u5206\u522b\u4ee3\u8868\u8fed\u4ee3\u5668\u7c7b\u578b\u662fInput Iterator\uff0cBidirectional Iterator\u548cRandom Access Iterator\u7684\u5bf9\u5e94\u5b9e\u73b0\u3002</p> <pre><code>template&lt;class Iterator&gt;\nvoid advance(Iterator&amp; i) {\nif (is_random_access_iterator(i))\nadvanceRAI(i,n);\nif (is_bidirectional_iterator(i))\nadvanceBI(i,n);\nelse\nadvanceII(i,n);\n}\n</code></pre> <p>\u4f46\u8fd9\u6837\u5728\u6267\u884c\u65f6\u671f\u624d\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e00\u4e2a\u7248\u672c\uff0c\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u6548\u7387\u3002\u6700\u597d\u80fd\u591f\u5728\u7f16\u8bd1\u671f\u5c31\u9009\u62e9\u6b63\u786e\u7684\u7248\u672c\u3002</p> <p>\u800c\u91cd\u8f7d\u8fd9\u4e2a\u51fd\u6570\u673a\u5236\u53ef\u4ee5\u8fbe\u6210\u8fd9\u4e2a\u76ee\u6807\u3002</p> <p>\u800c\u5bf9\u4e8e<code>advanceXX()</code>\u90fd\u6709\u4e24\u4e2a\u51fd\u6570\u53c2\u6570\uff0c\u578b\u522b\u90fd\u672a\u5b9a(\u56e0\u4e3a\u90fd\u662f\u6a21\u677f\u53c2\u6570)\u3002\u4e3a\u4e86\u4ee4\u5176\u540c\u540d\uff0c\u5f62\u6210\u91cd\u8f7d\u51fd\u6570\uff0c\u6211\u4eec\u5fc5\u987b\u52a0\u4e0a\u4e00\u4e2a\u578b\u522b\u5df2\u786e\u5b9a\u7684\u51fd\u6570\u53c2\u6570\uff0c\u4f7f\u51fd\u6570\u91cd\u8f7d\u673a\u5236\u5f97\u4ee5\u6709\u6548\u8fd0\u4f5c\u8d77\u6765\u3002</p> <p>\u8bbe\u8ba1\u5982\u4e0b\uff1a\u5982\u679ctraits\u6709\u80fd\u529b\u8403\u53d6\u51fa\u8fed\u4ee3\u5668\u7684\u79cd\u7c7b\uff0c\u6211\u4eec\u4fbf\u53ef\u5229\u7528\u8fd9\u4e2a\"\u8fed\u4ee3\u5668\u7c7b\u578b\"\u76f8\u5e94\u578b\u522b\u4f5c\u4e3aadvancexx\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u800c\u8fd9\u4e2a\u76f8\u5e94\u578b\u522b\u5fc5\u987b\u662f\u4e00\u4e2aclass type\uff0c\u4e0d\u80fd\u53ea\u662f\u6570\u503c\u53f7\u7801\u7c7b\u7684\u4e1c\u897f\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u9700\u4f9d\u8d56\u5b83\u6765\u8fdb\u884c\u91cd\u8f7d\u51b3\u8bae\u3002</p> <p>\u4e0b\u9762\u6765\u8fdb\u884c\u5b9e\u73b0\uff0c\u9996\u5148\u7ed9\u51fa\u4e00\u4e2a\u603b\u4f53\u7ed3\u6784\u56fe\uff1a</p> <p></p> <p>\u5b9a\u4e49\u51fa\u4e0b\u9762tag\uff1a</p> <pre><code>struct input_iterator_tag {};\nstruct output_iterator_tag {};\nstruct forward_iterator_tag : public input_iterator_tag {};\nstruct bidirectional_iterator_tag : public forward_iterator_tag {};\nstruct random_access_iterator_tag : public bidirectional_iterator_tag {};\n// \u7ee7\u627f\u7684\u597d\u5904\u5c31\u662f\uff0c\u5f53\u51fd\u6570\u9700\u8981\u7528 input_iterator_tag \u7684\u65f6\u5019\n// \u5047\u8bbe\u4f60\u4f20\u8fdb\u4e00\u4e2aforward_iterator_tag\uff0c\u5b83\u4f1a\u6cbf\u7ee7\u627f\u5411\u4e0a\u627e\uff0c\u77e5\u9053\u7b26\u5408\u6761\u4ef6\n</code></pre> <p>\u58f0\u660e\u4e86\u4e00\u4e9b\u5217 tag \u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u91cd\u8f7d advance\u51fd\u6570\uff0c\u6211\u4eec\u628a\u8fd9\u4e9b\u51fd\u6570\u7528\u4e0b\u6ed1\u7ebf\u6765\u5b9a\u4e49\uff0c\u8868\u793a\u5728\u5185\u90e8\u4f7f\u7528\uff0c\u5916\u90e8\u4e0d\u53ef\u89c1\u3002</p> <pre><code>// \u7ee7\u627f\u7684\u597d\u5904\u5c31\u662f\uff0c\u5f53\u51fd\u6570\u9700\u8981\u7528 input_iterator_tag \u7684\u65f6\u5019\n// \u5047\u8bbe\u4f60\u4f20\u8fdb\u4e00\u4e2aforward_iterator_tag\uff0c\u5b83\u4f1a\u6cbf\u7ee7\u627f\u5411\u4e0a\u627e\uff0c\u77e5\u9053\u7b26\u5408\u6761\u4ef6\n// input iterator\ntemplate&lt;class inputIterator, class distance&gt;\ninline void __advance(inputIterator&amp;i, distance n,\ninput_iterator_tag) {\nstd::cout &lt;&lt; \"input tag\" &lt;&lt; std::endl;\n}\n// output iterator\ntemplate&lt;class outputIterator, class distance&gt;\ninline void __advance(outputIterator&amp;i, distance n,\noutput_iterator_tag) {\nstd::cout &lt;&lt; \"output tag\" &lt;&lt; std::endl;\n}\n\n// forward iterator\ntemplate&lt;class ForwardIterator, class Distance&gt;\ninline void __advance(ForwardIterator &amp;i, Distance n,\nforward_iterator_tag) {\nstd::cout &lt;&lt; \"forward tag\" &lt;&lt; std::endl;\n}\n\n// bidrectional iterator\ntemplate&lt;class BidiectionalIterator, class Distance&gt;\ninline void __advance(BidiectionalIterator &amp;i, Distance n,\nbidiectional_iterator_tag) {\nstd::cout &lt;&lt; \"bidrectional tag\" &lt;&lt; std::endl;\n\n}\n\n// RandomAccess iterator\ntemplate&lt;class RandomAccessIterator, class Distance&gt;\ninline void __advance(RandomAccessIterator &amp;i, Distance n,\nrandom_access_iterator_tag) {\nstd::cout &lt;&lt; \"randomaccess tag\" &lt;&lt; std::endl;\n\n}\n</code></pre> <p>\u5b9a\u4e49\u8403\u53d6\u673a\uff1a</p> <pre><code>// traits \u578b\u522b\ntemplate&lt;class I&gt;\nstruct Iterator_traits {\ntypedef typename I::iterator_category iterator_category;\n};\n\n// \u9488\u5bf9\u539f\u751f\u6307\u9488\u8bbe\u8ba1\u7684\"\u504f\u7279\u5316\u7248\"\ntemplate&lt;class I&gt;\nstruct Iterator_traits&lt;I *&gt; {\ntypedef random_access_iterator_tag iterator_category;\n};\ntemplate&lt;class I&gt;\nstruct Iterator_traits&lt;const I *&gt; {\ntypedef random_access_iterator_tag iterator_category;\n};\n</code></pre> <p>\u5bf9\u5916\u66b4\u9732\u63a5\u53e3\uff1a</p> <pre><code>// \u5bf9\u5916\u63a5\u53e3\ntemplate&lt;class InputIterator, class Distance&gt;\ninline void advance(InputIterator &amp;i, Distance n) {\n// \u901a\u8fc7Ierator_traits\u8be2\u95ee\u5b83\u7684iterator_category\u662f\u8c01\ntypedef typename Iterator_traits&lt;InputIterator&gt;::iterator_category category;\n__advance(i, n, category()); // \u5404\u578b\u522b\u7684\u91cd\u8f7d\n}\n</code></pre> <p>\u5b9a\u4e49class type\uff1a</p> <pre><code>// class type\ntemplate&lt;class Category&gt;\nstruct iterator {\ntypedef Category iterator_category;\n};\n</code></pre> <p>\u5f00\u59cb\u6d4b\u8bd5\uff0c\u6211\u4eec\u4f7f\u7528\u4e0a\u8ff0\u5b9a\u4e49\u7684class type\u4e0e\u539f\u751f\u6307\u9488\u6765\u6d4b\u8bd5\uff0c\u5206\u522b\u8fdb\u5165\u8403\u53d6\u673a\u7684\u666e\u901a\u8403\u53d6\u673a\u4e0e\u504f\u7279\u5316\u8403\u53d6\u673a\uff0c\u770b\u770b\u662f\u5426\u5f97\u5230\u76f8\u5e94\u7684Tag\u3002</p> <pre><code>int main() {\niterator&lt;input_iterator_tag&gt; input;\niterator&lt;output_iterator_tag&gt; output;\niterator&lt;forward_iterator_tag&gt; forward;\niterator&lt;bidiectional_iterator_tag&gt; bidect;\niterator&lt;random_access_iterator_tag&gt; random;\nadvance(input, 10);\nadvance(output, 10);\nadvance(forward, 10);\nadvance(bidect, 10);\nadvance(random, 10);\nint *p=NULL;\nadvance(p,10);\nreturn 0;\n}\n</code></pre> <p>\u8f93\u51fa\u7ed3\u679c\uff1a</p> <pre><code>input tag\noutput tag\nforward tag\nbidrectional tag\nrandomaccess tag\nrandomaccess tag\n</code></pre> <p>\u4e00\u5207\u5982\u6211\u4eec\u9884\u671f\u4e00\u6837\uff0c\u901a\u8fc7\u8403\u53d6\u673a\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u6bcf\u4e2a\u8fed\u4ee3\u5668\u7684tag\uff0c\u4ee5\u53ca\u539f\u751f\u6307\u9488\u7684tag\u3002</p> <p>\u6211\u4eec\u518d\u60f3\u5f97\u590d\u6742\u4e00\u4e9b\uff0c\u5982\u679c\u6211\u4eec\u60f3\u77e5\u9053advance\u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u90a3\u5982\u4f55\u505a\u5462\uff1f</p> <p>\u9996\u5148\u4fee\u6539<code>advance</code>\u8fd4\u56de\uff1a</p> <pre><code>// \u5bf9\u5916\u63a5\u53e3\ntemplate&lt;class InputIterator, class Distance&gt;\ninline typename Iterator_traits&lt;InputIterator&gt;::iterator_category\nadvance(InputIterator &amp;i, Distance n) {\n// \u901a\u8fc7Ierator_traits\u8be2\u95ee\u5b83\u7684iterator_category\u662f\u8c01\ntypedef typename Iterator_traits&lt;InputIterator&gt;::iterator_category category;\nreturn __advance(i, n, category()); // \u5404\u578b\u522b\u7684\u91cd\u8f7d\n}\n</code></pre> <p>\u7d27\u63a5\u7740\u4fee\u6539<code>__advance</code>\u8fd4\u56de\uff1a</p> <pre><code>// input iterator\ntemplate&lt;class inputIterator, class distance&gt;\ninline typename Iterator_traits&lt;inputIterator&gt;::iterator_category\n__advance(inputIterator &amp;i, distance n,\ninput_iterator_tag) {\nstd::cout &lt;&lt; \"input tag\" &lt;&lt; std::endl;\nreturn input_iterator_tag();\n}\n\n// output iterator\ntemplate&lt;class outputIterator, class distance&gt;\ninline typename Iterator_traits&lt;outputIterator&gt;::iterator_category\n__advance(outputIterator &amp;i, distance n,\noutput_iterator_tag) {\nstd::cout &lt;&lt; \"output tag\" &lt;&lt; std::endl;\nreturn output_iterator_tag();\n}\n\n// forward iterator\ntemplate&lt;class ForwardIterator, class Distance&gt;\ninline typename Iterator_traits&lt;ForwardIterator&gt;::iterator_category\n__advance(ForwardIterator &amp;i, Distance n,\nforward_iterator_tag) {\nstd::cout &lt;&lt; \"forward tag\" &lt;&lt; std::endl;\nreturn forward_iterator_tag();\n}\n\n// bidrectional iterator\ntemplate&lt;class BidiectionalIterator, class Distance&gt;\ninline typename Iterator_traits&lt;BidiectionalIterator&gt;::iterator_category\n__advance(BidiectionalIterator &amp;i, Distance n,\nbidiectional_iterator_tag) {\nstd::cout &lt;&lt; \"bidrectional tag\" &lt;&lt; std::endl;\nreturn bidiectional_iterator_tag();\n}\n\n// RandomAccess iterator\ntemplate&lt;class RandomAccessIterator, class Distance&gt;\ninline typename Iterator_traits&lt;RandomAccessIterator&gt;::iterator_category\n__advance(RandomAccessIterator &amp;i, Distance n,\nrandom_access_iterator_tag) {\nstd::cout &lt;&lt; \"randomaccess tag\" &lt;&lt; std::endl;\nreturn random_access_iterator_tag();\n}\n</code></pre> <p>\u53ea\u9700\u8981\u628a<code>void</code>\u4fee\u6539\u4e3a\u76f8\u5e94\u7684\u8403\u53d6\u673a\u5373\u53ef\u3002</p> <p>\u6700\u540e\u6d4b\u8bd5\u4fee\u6539\uff0c\u6dfb\u52a0\u4e0a\u8fd4\u56de\uff1a</p> <pre><code>int main() {\niterator&lt;input_iterator_tag&gt; input;\niterator&lt;output_iterator_tag&gt; output;\niterator&lt;forward_iterator_tag&gt; forward;\niterator&lt;bidiectional_iterator_tag&gt; bidect;\niterator&lt;random_access_iterator_tag&gt; random;\ninput_iterator_tag inputIteratorTag = advance(input, 10);\noutput_iterator_tag outputIteratorTag = advance(output, 10);\nforward_iterator_tag forwardIteratorTag = advance(forward, 10);\nbidiectional_iterator_tag bidiectionalIteratorTag = advance(bidect, 10);\nrandom_access_iterator_tag randomAccessIteratorTag = advance(random, 10);\nint *p = NULL;\nrandom_access_iterator_tag v = advance(p, 10);\nreturn 0;\n}\n</code></pre> <p>\u81f3\u6b64\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u8fed\u4ee3\u5668\u7c7b\u578b\u5728\u7f16\u8bd1\u5668\u5224\u522b\u5b9e\u73b0\u5b8c\u6bd5\u3002</p>"},{"location":"src_analysis/stl/iterator/#2stliterator","title":"2.STL\u6e90\u7801\u5256\u6790Iterator","text":"<p>\u5728<code>bits/stl_iterator_base_types.h</code>\u4e2d\u4e5f\u662f\u5982\u4e0a\u8ff0\u6240\u793a(\u5b9e\u9645\u4e0a\uff0c\u4e0a\u9762\u5c31\u662fSTL\u6e90\u7801\u7684\u7b80\u5355\u7248\uff0c\u5f88\u63a5\u8fd1)\uff0c\u6765\u6211\u4eec\u4e00\u8d77\u6765\u770b\u3002</p> <p>\uff081\uff09<code>tag</code></p> <pre><code> ///  Marking input iterators.\nstruct input_iterator_tag { };\n\n///  Marking output iterators.\nstruct output_iterator_tag { };\n\n/// Forward iterators support a superset of input iterator operations.\nstruct forward_iterator_tag : public input_iterator_tag { };\n\n/// Bidirectional iterators support a superset of forward iterator\n/// operations.\nstruct bidirectional_iterator_tag : public forward_iterator_tag { };\n\n/// Random-access iterators support a superset of bidirectional\n/// iterator operations.\nstruct random_access_iterator_tag : public bidirectional_iterator_tag { };\n</code></pre> <p>\u4e0e\u6211\u4e0a\u9762\u7528\u7684\u4e00\u6837\u3002</p> <p>\uff082\uff09<code>iterator_traits</code>\u8403\u53d6\u673a\uff0c\u91cc\u9762\u5305\u542b\u4e94\u79cd\uff0c\u800c\u4e0a\u9762\u53ea\u662f\u5b9e\u73b0\u5176\u4e2d\u7684\u4e00\u79cd\uff1a<code>iterator_category</code>\u3002\u6240\u4ee5\u5728STL\u4e2d\u5bb9\u5668\u4e0e\u7b97\u6cd5\u4e4b\u95f4\u7684\u6865\u6881iterator\u5fc5\u987b\u5305\u542b\u4e0b\u9762\u4e94\u79cd typedef\u3002</p> <pre><code>template&lt;typename _Iterator&gt;\nstruct iterator_traits\n{\ntypedef typename _Iterator::iterator_category iterator_category;\ntypedef typename _Iterator::value_type        value_type;\ntypedef typename _Iterator::difference_type   difference_type;\ntypedef typename _Iterator::pointer           pointer;\ntypedef typename _Iterator::reference         reference;\n};\n</code></pre> <p>\uff083\uff09<code>iterator</code></p> <p>\u4e0a\u9762\u63d0\u5230\u7684class type\u4e3a\u4e0b\u9762\u7684\u7b80\u5355\u7248\uff0c\u5bf9\u6bd4\u4e00\u4e0b\uff0c\u6ca1\u6709\u5565\u533a\u522b\uff0c\u5c31\u662f\u6a21\u677f\u53c2\u6570\u591a\u4e86\u4e00\u4e9b\uff0ctypedef\u591a\u4e86\u3002</p> <pre><code>template&lt;typename _Category, typename _Tp, typename _Distance = ptrdiff_t,\ntypename _Pointer = _Tp*, typename _Reference = _Tp&amp;&gt;\nstruct iterator\n{\n/// One of the @link iterator_tags tag types@endlink.\ntypedef _Category  iterator_category;\n/// The type \"pointed to\" by the iterator.\ntypedef _Tp        value_type;\n/// Distance between iterators is represented as this type.\ntypedef _Distance  difference_type;\n/// This type represents a pointer-to-value_type.\ntypedef _Pointer   pointer;\n/// This type represents a reference-to-value_type.\ntypedef _Reference reference;\n};\n</code></pre> <p>\u81f3\u6b64\uff0citerator\u4e0etraits\u7279\u6027\u5206\u6790\u5b8c\u6bd5\u3002\u6b22\u8fce\u4e0e\u6211\u5171\u540c\u63a2\u8ba8STL\u6e90\u7801\u5965\u79d8\uff0c\u5982\u4faf\u6377\u8001\u5e08\u6240\u8bf4\uff1a\u6e90\u7801\u9762\u524d\u4e86\u65e0\u79d8\u5bc6\u3002</p>"},{"location":"src_analysis/stl/list/","title":"C++ STL\u6e90\u7801\u5256\u6790\u4e4b\u53cc\u5411\u73af\u5f62\u94fe\u8868list","text":""},{"location":"src_analysis/stl/list/#0","title":"0. \u5bfc\u8bed","text":"<p>\u6e90\u7801\u5bf9\u5e94\u7684\u7248\u672c\u4e3agcc-4.9.1</p>"},{"location":"src_analysis/stl/list/#1list","title":"1.list","text":"<p>list\u4e3a\u53cc\u5411\u73af\u5f62\u94fe\u8868\uff0c\u5176\u7ed3\u6784\u4e3a\uff1a</p> <p></p> <p>\u81ea\u5df1\u7ed8\u5236\u7684\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u53cc\u5411\u73af\u72b6\u94fe\u8868\u4ece\u8282\u70b9\u503c\u4e3a3\u5f00\u59cb\u63d2\u5165\uff0c\u7ea2\u8272\u6846\u8868\u793a\u6700\u540e\u4e00\u4e2a\u8282\u70b9(end()\u6307\u5411\u7684\u8282\u70b9)\u3002\u9ec4\u8272\u7ebf\u6761\u8868\u793a\u6307\u5411\u524d\u9a71\u8282\u70b9\uff0c\u9ed1\u8272\u7ebf\u6761\u8868\u793a\u6307\u5411\u540e\u7ee7\u8282\u70b9\u3002</p>"},{"location":"src_analysis/stl/list/#11-list","title":"1.1 list\u6e90\u7801","text":""},{"location":"src_analysis/stl/list/#111","title":"1.1.1 \u7c7b\u7ed3\u6784","text":"<pre><code> template&lt;typename _Tp, typename _Alloc = std::allocator&lt;_Tp&gt; &gt;\nclass list : protected _List_base&lt;_Tp, _Alloc&gt; {\n\n}\n</code></pre> <p><code>list</code>\u7ee7\u627f<code>_List_base</code>\u3002</p>"},{"location":"src_analysis/stl/list/#112","title":"1.1.2 \u53cc\u5411\u73af\u5f62\u94fe\u8868\u5b9e\u73b0","text":"<p>\u3010\u6784\u9020\u51fd\u6570\u3011</p> <p>\uff081\uff09\u4e0d\u5e26\u4efb\u4f55\u5143\u7d20\u7684list</p> <pre><code>explicit\nlist(const allocator_type &amp;__a) _GLIBCXX_NOEXCEPT: _Base(_Node_alloc_type(__a)) {}\n</code></pre> <p>\uff082\uff09\u5e26n\u4e2a\u5143\u7d20\u4e14\u8d4b\u4e88\u521d\u503c\u7684list</p> <pre><code>explicit list(size_type __n, const value_type &amp;__value = value_type(),const allocator_type &amp;__a = allocator_type()) : _Base(_Node_alloc_type(__a)) { _M_fill_initialize(__n, __value); }\n</code></pre> <p>\uff083\uff09\u4ece\u4e00\u4e2a\u8303\u56f4\u4e2d\u8fdb\u884c\u521d\u59cb\u5316list</p> <pre><code>template&lt;typename _InputIterator&gt;\nlist(_InputIterator __first, _InputIterator __last,\nconst allocator_type &amp;__a = allocator_type())\n: _Base(_Node_alloc_type(__a)) {\n// Check whether it's an integral type.  If so, it's not an iterator.\ntypedef typename std::__is_integer&lt;_InputIterator&gt;::__type _Integral;\n_M_initialize_dispatch(__first, __last, _Integral());\n}\n</code></pre> <p>\u3010\u521b\u5efa\u8282\u70b9\u3011</p> <p>\u505a\u7684\u4e8b\u60c5\uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8282\u70b9\u5e76\u52a8\u6001\u5206\u914d\u5185\u5b58\uff0c\u8fd4\u56de\u8282\u70b9\u3002</p> <pre><code>_Node *_M_create_node(const value_type &amp;__x) {\n_Node *__p = this-&gt;_M_get_node();\n__try\n{\n_M_get_Tp_allocator().construct\n(std::__addressof(__p-&gt;_M_data), __x);\n}\n__catch(...)\n{\n_M_put_node(__p);\n__throw_exception_again;\n}\nreturn __p;\n}\n</code></pre> <p>\u6ce8\u610f\u5230\u91cc\u9762\u6709\u4e24\u4e2a\u91cd\u8981\u7684\u51fd\u6570<code>_M_get_node</code>\u4e0e<code>_M_put_node</code>\uff0c\u6211\u4eec\u6765\u67e5\u770b\u540e\u53d1\u73b0\u8fd9\u4e9b\u65b9\u6cd5\u6765\u81ea\u57fa\u7c7b\uff0c\u6e90\u7801\u4e3a\uff1a</p> <pre><code>_List_node&lt;_Tp&gt; * _M_get_node() { return _M_impl._Node_alloc_type::allocate(1); }\n\nvoid _M_put_node(_List_node&lt;_Tp&gt; *__p)   _GLIBCXX_NOEXCEPT\n{ _M_impl._Node_alloc_type::deallocate(__p, 1); }\n</code></pre> <p>\u5bf9\u5e94\u7684\u5c31\u662f\u521b\u5efa\u8282\u70b9\u52a8\u6001\u5206\u914d\u5185\u5b58\uff0c\u82e5\u521b\u5efa\u8fc7\u7a0b\u4e2d\u629b\u51fa\u5f02\u5e38\uff0c\u5219\u91ca\u653e\u5185\u5b58\u3002</p> <p>\u3010\u63d2\u5165\u8282\u70b9\u3011</p> <p>\u63d2\u5165\u8282\u70b9\u5305\u62ec\uff1a</p> <ul> <li>\u5c3e\u90e8\u63d2\u5165n\u4e2a\u6307\u5b9a\u8282\u70b9\u503c\u7684\u8282\u70b9\uff0c\u5bf9\u5e94\u7684\u51fd\u6570<code>_M_fill_initialize</code></li> </ul> <p>\u5728list\u7684\u6784\u9020\u51fd\u6570\u4e2d\u4f7f\u7528\uff1a</p> <pre><code>explicit list(size_type __n, const value_type &amp;__value = value_type(),const allocator_type &amp;__a = allocator_type()) : _Base(_Node_alloc_type(__a)) { _M_fill_initialize(__n, __value); }\n</code></pre> <ul> <li>\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165\u6307\u5b9a\u8282\u70b9\u503c\u7684\u8282\u70b9\uff0c\u5bf9\u5e94\u7684\u51fd\u6570<code>_M_insert</code></li> </ul> <p>\u5176\u4e2d\u5927\u5bb6\u7ecf\u5e38\u4f7f\u7528\u7684<code>push_back</code>\u4e0e<code>push_front</code>\u5e95\u5c42\u5c31\u662f\u8c03\u7528<code>_M_insert</code>\u51fd\u6570\u3002</p> <p>\u4e24\u8005\u51fd\u6570\u533a\u522b\u662f\uff1a</p> <pre><code>this-&gt;_M_insert(end(), __x);  // push_back   \u5c3e\u90e8\u63d2\u5165  \nthis-&gt;_M_insert(begin(), __x); // push_front \u5934\u90e8\u63d2\u5165\n</code></pre> <ul> <li>\u53cc\u5411\u73af\u5f62\u94fe\u8868\u63d2\u5165\u51fd\u6570<code>_M_hook</code> (\u6700\u91cd\u8981\uff01\uff01\uff01)</li> </ul> <p>\u50cf\u524d\u9762\u63d0\u5230\u7684<code>push_back</code>\u3001<code>push_front</code>\u3001<code>_M_insert</code>\uff0c\u8fd8\u6709<code>insert</code>\u90fd\u662f\u4f7f\u7528\u6700\u57fa\u7840\u7684\u53cc\u5411\u94fe\u8868\u63d2\u5165\u51fd\u6570<code>_M_hook</code>\u5b9e\u73b0\u7684\u3002</p> <p>\u4e0b\u9762\u6765\u6df1\u5165\u7814\u7a76\u4e00\u4e0b\uff1a</p> <p>\u5176\u4e2d<code>_M_fill_initialize</code>\u6e90\u7801\u5982\u4e0b\uff1a</p> <pre><code>void _M_fill_initialize(size_type __n, const value_type &amp;__x) {\nfor (; __n; --__n)\npush_back(__x);\n}\n</code></pre> <p>\u5176\u4e2d<code>push_back</code>\u6e90\u7801\u5982\u4e0b\uff1a</p> <pre><code>void push_back(const value_type &amp;__x) { this-&gt;_M_insert(end(), __x); }\n</code></pre> <p>\u5176\u4e2d<code>_M_insert</code>\uff0c\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u63d2\u5165\u521d\u59cb\u503c\u4e3ax\u7684\u8282\u70b9\u3002</p> <pre><code>void _M_insert(iterator __position, const value_type &amp;__x) {\n_Node *__tmp = _M_create_node(__x);\n__tmp-&gt;_M_hook(__position._M_node);\n}\n</code></pre> <p>\u5176\u4e2d<code>_M_hook</code>\u5b9e\u73b0\u5728<code>gcc-4.9.1/libstdc++-v3/src/c++98/list.cc</code>\u4e2d,\u5f53\u7136<code>_List_node_base</code>\u7684\u5176\u4ed6\u51fd\u6570\uff0c\u4f8b\u5982\uff1a<code>_M_unhook</code>\u4e5f\u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u3002</p> <pre><code>// \u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u524d\u63d2\u5165this\u6307\u5411\u7684\u8282\u70b9\nvoid_List_node_base::_M_hook(_List_node_base* const __position) _GLIBCXX_USE_NOEXCEPT\n{\nthis-&gt;_M_next = __position;       this-&gt;_M_prev = __position-&gt;_M_prev;\n__position-&gt;_M_prev-&gt;_M_next = this;\n__position-&gt;_M_prev = this;\n}\n</code></pre> <p>\u6240\u4ee5\u4e0a\u8ff0\u7ec6\u5206\u4e3a\u4e24\u4e2a\u51fd\u6570\uff1a\u6211\u4eec\u628a\u4e0a\u8ff0\u4ee3\u7801\u8fdb\u884c\u603b\u7ed3\uff1a</p> <p>\uff081\uff09\u5728\u6307\u5b9a\u7684\u4f4d\u7f6e\u63d2\u5165\u521d\u59cb\u503c\u4e3ax\u7684\u8282\u70b9</p> <pre><code>void _M_insert(iterator __position, const value_type &amp;__x) {\n_Node *__tmp = _M_create_node(__x);\n__tmp-&gt;_M_next = __position;            // \u7b2c\u4e00\u6b65\n__tmp-&gt;_M_prev = __position-&gt;_M_prev;   // \u7b2c\u4e8c\u6b65\n__position-&gt;_M_prev-&gt;_M_next = __tmp;   // \u7b2c\u4e09\u6b65\n__position-&gt;_M_prev = __tmp;            // \u7b2c\u56db\u6b65\n}\n</code></pre> <p>\u8fd9\u79cd\u63d2\u5165\u662f\u5728\u6307\u5b9a\u4f4d\u7f6e\u524d\u63d2\u5165\uff0c(\u5bf9\u5e94\u5230\u4ee3\u7801\u5c31\u662f)\u4f8b\u5982\u5b9e\u73b0\u5728\u6307\u5b9a<code>__position</code>\u8282\u70b9\u4e3a7\u524d\u63d2\u5165\u8282\u70b9\u503c9\u7684\u8282\u70b9(\u5bf9\u5e94\u5230\u4ee3\u7801\u5c31\u662f__tmp)\uff0c\u4e0b\u9762\u9610\u8ff0\u4e86\u5177\u4f53\u7684\u63d2\u5165\u6d41\u7a0b\u3002</p> <p></p> <p>\uff082\uff09\u5728\u672b\u5c3e\u4f9d\u6b21\u63d2\u5165n\u4e2a\u8282\u70b9\u503c\u4e3ax\u7684\u8282\u70b9</p> <pre><code>void _M_fill_initialize(size_type __n, const value_type &amp;__x) {\nfor (; __n; --__n)\n_M_insert(end(), __x);\n}\n</code></pre> <p>\u5bf9\u4e8e\u4e0a\u8ff0\u7684\u4ee3\u7801\u5927\u5bb6\u6216\u8bb8\u4f1a\u8054\u60f3\u5230<code>insert</code>,\u5b83\u6709\u4e09\u4e2a\u3002<code>insert</code>\u5b9e\u73b0\u6587\u4ef6\u5728<code>libstdc++-v3/include/bits/list.tcc</code>\u3002</p> <ul> <li>\u7b2c\u4e00\uff1a\u5728\u6307\u5b9a\u8fed\u4ee3\u5668\u4e4b\u524d\u63d2\u5165\u6307\u5b9a\u5143\u7d20\u503c\u8282\u70b9\u3002</li> </ul> <p>\u5b9e\u73b0\u662f\u8c03\u7528\u524d\u9762\u7684<code>_M_hook</code>\u51fd\u6570\u3002</p> <pre><code>template&lt;typename _Tp, typename _Alloc&gt;\ntypename list&lt;_Tp, _Alloc&gt;::iterator\nlist&lt;_Tp, _Alloc&gt;::\n#if __cplusplus &gt;= 201103L\ninsert(const_iterator __position, const value_type&amp; __x)\n#else\ninsert(iterator __position, const value_type&amp; __x)\n#endif\n{\n_Node* __tmp = _M_create_node(__x);\n__tmp-&gt;_M_hook(__position._M_const_cast()._M_node);\nreturn iterator(__tmp);\n}\n</code></pre> <ul> <li>\u7b2c\u4e8c\uff1a\u5728\u6307\u5b9a\u8fed\u4ee3\u5668\u4e4b\u524d\u63d2\u5165n\u4e2a\u6307\u5b9a\u8282\u70b9\u503c\u7684\u8282\u70b9\u3002</li> </ul> <pre><code>void insert(iterator __position, size_type __n, const value_type &amp;__x) {\nlist __tmp(__n, __x, get_allocator());\nsplice(__position, __tmp);\n}\n</code></pre> <p>\u5b9e\u73b0\u662f\u5148\u8c03\u7528list\u6784\u9020\u51fd\u6570\uff0c\u5b8c\u6210\u521b\u5efa\u4e00\u4e2a\u62e5\u6709n\u4e2a\u6307\u5b9a\u8282\u70b9\u503c\u7684list\u3002</p> <pre><code>explicit list(size_type __n, const value_type &amp;__value = value_type(),const allocator_type &amp;__a = allocator_type()) : _Base(_Node_alloc_type(__a)) { _M_fill_initialize(__n, __value); }\n</code></pre> <p>\u7136\u540e\u4f7f\u7528<code>splice</code>\u51fd\u6570\u5b8c\u6210\u4ece\u53e6\u4e00\u4e2alist\u4e2d\u6765\u63d2\u5165\u5f53\u524dlist\u3002</p> <pre><code>void splice(iterator __position, list &amp;__x)\n{\nif (!__x.empty()) {\n_M_check_equal_allocators(__x);\n\nthis-&gt;_M_transfer(__position._M_const_cast(),\n__x.begin(), __x.end());\n}\n}\n</code></pre> <p>\u5176\u4e2d<code>_M_transfer</code>\u8ffd\u8e2a\u4ee3\u7801\uff0c\u53ef\u4ee5\u77e5\u9053\uff1a</p> <pre><code>// Moves the elements from [first,last) before position.\nvoid\n_M_transfer(iterator __position, iterator __first, iterator __last) {\n__position._M_node-&gt;_M_transfer(__first._M_node, __last._M_node);\n}\n</code></pre> <p>\u518d\u6b21\u5206\u6790\u5f97\u5230\u5176\u6765\u81ealist\u7684\u57fa\u7c7b<code>_List_node_base</code>\uff0c\u800c<code>_M_transfer</code>\u5b9e\u73b0\u6587\u4ef6\u5728<code>gcc-4.9.1/libstdc++-v3/src/c++98/list.cc</code>\u4e2d\uff1a</p> <pre><code>void _List_node_base::\n_M_transfer(_List_node_base * const __first,\n_List_node_base * const __last) _GLIBCXX_USE_NOEXCEPT\n{\nif (this != __last)\n{\n// Remove [first, last) from its old position.\n__last-&gt;_M_prev-&gt;_M_next  = this;\n__first-&gt;_M_prev-&gt;_M_next = __last;\nthis-&gt;_M_prev-&gt;_M_next    = __first;\n\n// Splice [first, last) into its new position.\n_List_node_base* const __tmp = this-&gt;_M_prev;\nthis-&gt;_M_prev                = __last-&gt;_M_prev;\n__last-&gt;_M_prev              = __first-&gt;_M_prev;\n__first-&gt;_M_prev             = __tmp;\n}\n}\n</code></pre> <p>\u4ecd\u7136\u662f\u4e0a\u8ff0\u7684\u56fe\uff1a</p> <p></p> <p>\u7ecf\u8fc7\u524d\u9762\u5206\u6790\uff0c\u6211\u4eec\u77e5\u9053<code>splice</code>\u662f\u5c06\u4e0a\u8ff0\u56fe\u7684\u6240\u4ee3\u8868\u7684\u6574\u4e2alist\u63d2\u5165\u6307\u5b9a\u8fed\u4ee3\u5668\u524d\u9762\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u60f3\u8981\u5728\u4e0b\u9762\u4e24\u4e2a\u8282\u70b9\u524d\u9762\u63d2\u5165\uff0c\u5177\u4f53\u56fe\u5f62\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <p><code>this</code>\u4ee3\u8868\u7684\u8282\u70b9\u4e3a\u503c\u4e3a8\u7684\u8282\u70b9\uff0c\u4e0b\u56fe\u63cf\u8ff0\u7684\u5c31\u662f\u5728\u8282\u70b910\u4e0e\u8282\u70b98\u4e2d\u95f4\u63d2\u5165\u6574\u4e2alist\u3002</p> <p><code>__last</code>\u4ee3\u8868\u7684\u662f\u7ea2\u8272\u6846\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u4e3a<code>end()</code>\u6307\u5411\u7684\u8282\u70b9\uff0c\u6211\u4eec\u662f\u4e0d\u9700\u8981\u8be5\u8282\u70b9\u7684\uff0c\u6240\u4ee5\u5728\u540e\u9762\u5904\u7406\u4e2d\uff0c\u4f1a\u628a\u8be5\u8282\u70b9\u4ece\u6574\u4e2alist\u4e2d\u53bb\u9664\u6389\u3002</p> <p><code>__first</code>\u4ee3\u8868\u7684\u662f\u56fe\u4e2d\u8282\u70b9\u503c\u4e3a3\u7684\u8282\u70b9\u3002</p> <p>\u7b2c\u4e00\u6b65\uff1a\u5148\u5c06\u6700\u540e\u4e00\u4e2a\u6709\u6548\u8282\u70b9\uff0c\u4e5f\u5c31\u662f\u7ea2\u8272\u6846\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u7684next\u6307\u9488\u6307\u5411\u6307\u5b9a\u7684\u8282\u70b98\u3002</p> <p></p> <p>\u5bf9\u5e94\u4ee3\u7801\u4e3a\uff1a</p> <pre><code>__last-&gt;_M_prev-&gt;_M_next  = this;   \n</code></pre> <p>\u7b2c\u4e8c\u6b65\uff1a<code>_last</code>\u7684next\u6307\u9488\u6307\u5411\u81ea\u5df1\u3002</p> <p></p> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\u4e3a\uff1a</p> <pre><code>__first-&gt;_M_prev-&gt;_M_next = __last;\n</code></pre> <p>\u7b2c\u4e09\u6b65\uff1a\u8ba9\u6307\u5b9a\u8fed\u4ee3\u5668\u4e4b\u524d\u7684\u8282\u70b9\u7684nex\u6307\u5411\u539f\u5148list\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9(<code>__first</code>)\u3002</p> <p></p> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\u4e3a\uff1a</p> <pre><code>this-&gt;_M_prev-&gt;_M_next    = __first;\n</code></pre> <p>\u7b2c\u56db\u6b65\uff1a\u4fdd\u5b58\u6307\u5b9a\u8fed\u4ee3\u5668\u7684\u524d\u9a71\u8282\u70b9(\u5bf9\u5e94\u5230\u54ea\u56fe\u4e2d\u7684\u8282\u70b9\u503c\u4e3a10\u7684\u8282\u70b9)\u3002</p> <pre><code>_List_node_base* const __tmp = this-&gt;_M_prev;\n</code></pre> <p>\u7b2c\u4e94\u6b65\uff1a\u6307\u5b9a\u8fed\u4ee3\u5668\u7684\u524d\u9a71\u8282\u70b9\u6307\u5411\u539flist\u4e2d\u5b9e\u9645\u6700\u540e\u4e00\u4e2a\u8282\u70b9(end()\u524d\u4e00\u8282\u70b9)\u3002</p> <p></p> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\u4e3a\uff1a</p> <pre><code>this-&gt;_M_prev                = __last-&gt;_M_prev;\n</code></pre> <p>\u7b2c\u516d\u6b65\uff1a\u8ba9\u539flist\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9(end()\u6307\u5411\u7684\u8282\u70b9)\u7684prev\u6307\u5411\u81ea\u5df1\u3002</p> <p></p> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\u4e3a\uff1a</p> <pre><code>__last-&gt;_M_prev              = __first-&gt;_M_prev;\n</code></pre> <p>\u7b2c\u4e03\u6b65\uff1a\u8ba9\u539flist\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684prev\u6307\u5411\u7b2c\u56db\u6b65\u4fdd\u5b58\u7684\u8282\u70b9\u3002</p> <p></p> <p>\u5bf9\u5e94\u7684\u4ee3\u7801\u4e3a\uff1a</p> <pre><code>__first-&gt;_M_prev             = __tmp;\n</code></pre> <p>\u8fd9\u6837\u7ecf\u8fc7\u4ee5\u4e0a\u4e03\u6b65\u64cd\u4f5c\uff0c\u5b8c\u6210\u4e86\u5728\u8282\u70b98\u4e0e\u8282\u70b910\u4e4b\u524d\u63d2\u5165\u4e00\u4e2alist\u3002</p> <ul> <li>\u7b2c\u4e09\uff1a\u4ece\u4e00\u4e2alist\u8303\u56f4\u628a\u6570\u636e\u63d2\u5165\u5230\u6307\u5b9a\u8fed\u4ee3\u5668\u524d\u9762\u3002</li> </ul> <pre><code>template&lt;typename _InputIterator&gt;\nvoid\ninsert(iterator __position, _InputIterator __first,\n_InputIterator __last) {\nlist __tmp(__first, __last, get_allocator());\nsplice(__position, __tmp);\n}\n</code></pre> <p>\u539f\u7406\u540c\u4e0a\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e2a<code>__tmp</code>\u662f\u8c03\u7528\u53e6\u5916\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u3002</p> <p>\u3010\u5220\u9664\u8282\u70b9\u3011</p> <ul> <li>\u5220\u9664\u6307\u5b9a\u8282\u70b9</li> </ul> <p>\u5220\u9664\u6307\u5b9a\u8282\u70b9\u5206\u4e3a\u4e24\u4e2a\uff0c\u7b2c\u4e00\u4e2a\u901a\u8fc7\u8fed\u4ee3\u5668\u5220\u9664\uff0c\u7b2c\u4e8c\u4e2a\u662f\u901a\u8fc7\u5143\u7d20\u503c\u5220\u9664\u3002</p> <p>\uff081\uff09\u901a\u8fc7\u8fed\u4ee3\u5668\u5220\u9664\uff0c\u5bf9\u5e94\u51fd\u6570\u4e3aerase</p> <p>\u5176\u4e2d<code>pop_front</code>\u4e0e<code>pop_back</code>\u3001<code>erase</code>\u3001<code>remove</code>\u5e95\u5c42\u5b9e\u73b0\u57fa\u4e8e<code>_M_erase</code>\u51fd\u6570\u3002</p> <pre><code>this-&gt;_M_erase(begin());    // pop_front \u4e0d\u65ad\u5220\u9664\u8d77\u70b9\u7684\u5143\u7d20\nthis-&gt;_M_erase(iterator(this-&gt;_M_impl._M_node._M_prev)); // pop_back\u79fb\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n</code></pre> <p>\u5728<code>libstdc++-v3/include/bits/list.tcc</code>\u4e2d\uff1a</p> <pre><code>erase(iterator __position)\n#endif\n{\niterator __ret = iterator(__position._M_node-&gt;_M_next);\n_M_erase(__position._M_const_cast());\nreturn __ret;\n}\n</code></pre> <p>\uff082\uff09\u901a\u8fc7\u5143\u7d20\u503c\u5220\u9664\uff0c\u5bf9\u5e94\u51fd\u6570\u4e3aremove</p> <p>\u7279\u6b8a\u60c5\u51b5\u5904\u7406\uff0c\u5f53\u5220\u9664\u5143\u7d20\u7684\u5730\u5740\u4e0e\u8fed\u4ee3\u5668\u7684\u5730\u5740\u4e00\u6837\u7684\u65f6\u5019\uff0c\u5148\u4fdd\u5b58\u8d77\u6765\uff0c\u6700\u540e\u5224\u65ad\u4fdd\u5b58\u7684\u8fed\u4ee3\u5668\u662f\u4e0d\u662fend()\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5c31\u5220\u9664\u6389\u3002\u5e95\u5c42\u4ecd\u65e7\u662f\u901a\u8fc7<code>_M_erase</code>\u5220\u9664\u3002</p> <pre><code>template&lt;typename _Tp, typename _Alloc&gt;\nvoid list&lt;_Tp, _Alloc&gt;::remove(const value_type&amp; __value)\n{\niterator __first = begin();\niterator __last = end();\niterator __extra = __last;\nwhile (__first != __last)\n{\niterator __next = __first;\n++__next;\nif (*__first == __value)\n{\n// _GLIBCXX_RESOLVE_LIB_DEFECTS\n// 526. Is it undefined if a function in the standard changes\n// in parameters?\nif (std::__addressof(*__first) != std::__addressof(__value))\n_M_erase(__first);\nelse\n__extra = __first;\n}\n__first = __next;\n}\nif (__extra != __last)\n_M_erase(__extra);\n}\n</code></pre> <p>\u9664\u4e86\u8fd9\u4e2aremove\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u662f<code>remove_if</code>\uff0c\u6839\u636e\u6761\u4ef6\u6765\u5220\u9664\u3002</p> <pre><code>template&lt;typename _Tp, typename _Alloc&gt;\ntemplate &lt;typename _Predicate&gt;\nvoid list&lt;_Tp, _Alloc&gt;::\nremove_if(_Predicate __pred)\n{\niterator __first = begin();\niterator __last = end();\nwhile (__first != __last)\n{\niterator __next = __first;\n++__next;\nif (__pred(*__first))\n_M_erase(__first);\n__first = __next;\n}\n}\n</code></pre> <p>\u5bf9\u4e0a\u8ff0\u7684<code>remove</code>\u7684if\u53bb\u6389\uff0c\u5728\u91cc\u9762\u6dfb\u52a0\u4e00\u4e2a\u5224\u65ad\u5373\u53ef\u3002</p> <p>\u4f7f\u7528\u5982\u4e0b\uff1a</p> <pre><code>bool isone(int one) {\nreturn one==2;\n}\nint main() {\nlist&lt;int&gt; t;\nt={3,4,0,2,0,10,10};\nfor(auto i:t) cout&lt;&lt;i&lt;&lt;\" \";  // 3 4 0 2 0 10 10 \ncout&lt;&lt;endl;\nt.remove_if(isone);\nfor(auto i:t) cout&lt;&lt;i&lt;&lt;\" \";  // 3 4 0 0 10 10 \ncout&lt;&lt;endl;\n}\n</code></pre> <ul> <li>\u5220\u9664\u4e00\u7cfb\u5217\u8282\u70b9</li> <li>\u5220\u9664\u6240\u6709\u8282\u70b9\uff0c\u5bf9\u5e94\u7684\u51fd\u6570<code>clear</code></li> </ul> <p>\uff081\uff09\u5220\u9664\u6307\u5b9a\u8282\u70b9\u8be6\u7ec6\u5206\u6790</p> <pre><code>_M_erase(iterator __position)\n_GLIBCXX_NOEXCEPT\n{\n__position._M_node-&gt;_M_unhook();\n_Node *__n = static_cast&lt;_Node *&gt;(__position._M_node);\n#if __cplusplus &gt;= 201103L\n_M_get_Node_allocator().destroy(__n);\n#else\n_M_get_Tp_allocator().destroy(std::__addressof(__n-&gt;_M_data));\n#endif\n_M_put_node(__n);       // \u91ca\u653e\u5185\u5b58\n}\n</code></pre> <p>\u5176\u4e2d<code>_M_unhook</code>\u5b9e\u73b0\u5728<code>gcc-4.9.1/libstdc++-v3/src/c++98/list.cc</code>\uff0c\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>void _List_node_base::_M_unhook() _GLIBCXX_USE_NOEXCEPT\n{\n_List_node_base* const __next_node = this-&gt;_M_next;   // \u7b2c\u4e00\u6b65\uff1a\u4fdd\u5b58\u540e\u7ee7\u8282\u70b9\n_List_node_base* const __prev_node = this-&gt;_M_prev;   // \u7b2c\u4e8c\u6b65\uff1a\u4fdd\u5b58\u524d\u9a71\u8282\u70b9\n__prev_node-&gt;_M_next = __next_node;                   // \u7b2c\u4e09\u6b65\uff1a\u524d\u9a71\u8282\u70b9\u7684next\u6307\u5411\u540e\u7ee7\u8282\u70b9\n__next_node-&gt;_M_prev = __prev_node;                   // \u7b2c\u56db\u6b65\uff1a\u540e\u7ee7\u8282\u70b9\u7684prev\u6307\u5411\u524d\u9a71\u8282\u70b9\n}\n</code></pre> <p>\u4f8b\u5982\uff1a\u5220\u9664\u8282\u70b9\u503c\u4e3a9\u7684\u8282\u70b9\uff0c\u7b2c\u4e09\u4e0e\u7b2c\u56db\u6b65\u56fe\u89e3\uff1a</p> <p></p> <p>\uff082\uff09\u5220\u9664\u4e00\u7cfb\u5217\u5143\u7d20\u8be6\u7ec6\u5206\u6790</p> <pre><code>iterator\n#if __cplusplus &gt;= 201103L\nerase(const_iterator __first, const_iterator __last) noexcept\n#else\nerase(iterator __first, iterator __last)\n#endif\n{\nwhile (__first != __last)\n__first = erase(__first);\nreturn __last._M_const_cast();\n}\n</code></pre> <p>\u4f7f\u7528erase\uff0c\u5220\u9664\u7ed9\u5b9a\u8fed\u4ee3\u5668\u8303\u56f4\u5185\u7684\u6570\u636e\u3002</p> <p>\uff083\uff09\u5220\u9664\u6240\u6709\u5143\u7d20\u8be6\u7ec6\u5206\u6790</p> <p>\u6e05\u7a7a\u5143\u7d20\uff0c\u5e76\u521d\u59cb\u5316\uff0c\u56de\u5230list\u9ed8\u8ba4\u72b6\u6001\u3002</p> <pre><code>void clear()\n_GLIBCXX_NOEXCEPT\n{\n_Base::_M_clear();\n_Base::_M_init();\n}\n</code></pre> <p>\u5176\u4e2d<code>_M_clear</code>\u5b9e\u73b0\u5728\uff1a<code>libstdc++-v3/include/bits/list.tcc</code>\u4e2d\uff1a</p> <pre><code>_List_base&lt;_Tp, _Alloc&gt;::\n_M_clear() _GLIBCXX_NOEXCEPT\n{\ntypedef _List_node&lt;_Tp&gt;  _Node;\n_Node* __cur = static_cast&lt;_Node*&gt;(_M_impl._M_node._M_next);\nwhile (__cur != &amp;_M_impl._M_node)\n{\n_Node* __tmp = __cur;         // \u4fdd\u5b58\u8282\u70b9\n__cur = static_cast&lt;_Node*&gt;(__cur-&gt;_M_next);  // \u5f80\u540e\u904d\u5386\n#if __cplusplus &gt;= 201103L\n_M_get_Node_allocator().destroy(__tmp);\n#else\n_M_get_Tp_allocator().destroy(std::__addressof(__tmp-&gt;_M_data));\n#endif\n_M_put_node(__tmp);   // \u91ca\u653e\u5185\u5b58\n}\n}\n</code></pre> <p><code>_M_init</code>\u5b9e\u73b0\uff0c\u5168\u90e8\u6307\u5411\u81ea\u5df1\u5373\u53ef\u3002</p> <pre><code>void _M_init()\n_GLIBCXX_NOEXCEPT\n{\nthis-&gt;_M_impl._M_node._M_next = &amp;this-&gt;_M_impl._M_node;\nthis-&gt;_M_impl._M_node._M_prev = &amp;this-&gt;_M_impl._M_node;\n}\n</code></pre> <p>\u3010\u5143\u7d20\u8bbf\u95ee\u3011</p> <p>\u6bcf\u4e2a\u90fd\u5b9e\u73b0\u4e86\u4e24\u4e2a\u7248\u672c\uff1a\u5f15\u7528\u4e0e\u5e38\u5f15\u7528\u3002</p> <ul> <li>front \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20</li> </ul> <pre><code>reference front()\n_GLIBCXX_NOEXCEPT\n{ return *begin(); }\nconst_reference\nfront() const\n_GLIBCXX_NOEXCEPT\n{ return *begin(); }\n</code></pre> <ul> <li>\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20</li> </ul> <pre><code>reference\nback()\n_GLIBCXX_NOEXCEPT\n{\niterator __tmp = end();\n--__tmp;\nreturn *__tmp;\n}\nconst_reference\nback() const\n_GLIBCXX_NOEXCEPT\n{\nconst_iterator __tmp = end();\n--__tmp;\nreturn *__tmp;\n}\n</code></pre> <p>\u3010\u7b97\u6cd5\u3011</p> <ul> <li>unique</li> </ul> <p>\u4ece\u5bb9\u5668\u4e2d\u7684\u6bcf\u4e2a\u8fde\u7eed\u7684\u76f8\u7b49\u5143\u7d20\u7ec4\u4e2d\u9664\u53bb\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20\u5916\u7684\u6240\u6709\u5143\u7d20\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u53ea\u6709\u4e0e\u5217\u8868\u5bb9\u5668\u7d27\u90bb\u7684\u5143\u7d20\u76f8\u6bd4\uff0c\u8be5\u5143\u7d20\u624d\u4ece\u5217\u8868\u5bb9\u5668\u4e2d\u5220\u9664\u3002\u56e0\u6b64\uff0c\u6b64\u529f\u80fd\u5bf9\u4e8e\u6392\u5e8f\u5217\u8868\u7279\u522b\u6709\u7528\u3002</p> <pre><code>template&lt;typename _Tp, typename _Alloc&gt;\ntemplate &lt;typename _BinaryPredicate&gt;\nvoid\nlist&lt;_Tp, _Alloc&gt;::\nunique(_BinaryPredicate __binary_pred)\n{\niterator __first = begin();\niterator __last = end();\nif (__first == __last)\nreturn;\niterator __next = __first;\nwhile (++__next != __last)\n{\n// \u6ee1\u8db3\u6761\u4ef6\u5c31\u5220\u9664\nif (__binary_pred(*__first, *__next))\n// \u5220\u9664\n_M_erase(__next);\nelse\n__first = __next;\n__next = __first;\n}\n}\n</code></pre> <p>\u4e3e\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>// list::unique\n#include &lt;iostream&gt;\n#include &lt;cmath&gt;\n#include &lt;list&gt;\n\n// a binary predicate implemented as a function:\nbool same_integral_part (double first, double second)\n{ return ( int(first)==int(second) ); }\n\n// a binary predicate implemented as a class:\nstruct is_near {\nbool operator() (double first, double second)\n{ return (fabs(first-second)&lt;5.0); }\n};\n\nint main ()\n{\ndouble mydoubles[]={ 12.15,  2.72, 73.0,  12.77,  3.14,\n12.77, 73.35, 72.25, 15.3,  72.25 };\nstd::list&lt;double&gt; mylist (mydoubles,mydoubles+10);\n\nmylist.sort();             //  2.72,  3.14, 12.15, 12.77, 12.77,\n// 15.3,  72.25, 72.25, 73.0,  73.35\n\nmylist.unique();           //  2.72,  3.14, 12.15, 12.77\n// 15.3,  72.25, 73.0,  73.35\n\nmylist.unique (same_integral_part);  //  2.72,  3.14, 12.15\n// 15.3,  72.25, 73.0\n\nmylist.unique (is_near());           //  2.72, 12.15, 72.25\n\nstd::cout &lt;&lt; \"mylist contains:\";\nfor (std::list&lt;double&gt;::iterator it=mylist.begin(); it!=mylist.end(); ++it)\nstd::cout &lt;&lt; ' ' &lt;&lt; *it;\nstd::cout &lt;&lt; '\\n';\n\nreturn 0;\n}\n</code></pre> <p>\u4e0a\u8ff0\u6392\u5e8f\u540e\u4f1a\u5220\u9664\u6240\u6709\u7684\u91cd\u590d\u5143\u7d20\uff0c\u53ea\u5269\u4e0b\u4e00\u4e2a\uff0c\u800c\u4e0d\u6392\u5e8f\u53ea\u4f1a\u5220\u9664\u91cd\u590d\u4e14\u8fde\u7eed\u7684\u5143\u7d20\u3002</p> <ul> <li>merge</li> </ul> <p>merge\u6e90\u7801\u5b9e\u73b0\u91c7\u7528\u524d\u9762<code>_M_transfer</code>\u51fd\u6570\uff0c\u5047\u8bbe\u73b0\u5728\u6709\u4e24\u4e2alist\uff0c\u5206\u522b\u662flist1\u4e0elist2\u3002list1\u4e2d\u7684\u5143\u7d20\u4e0elist2\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679clist1\u4e2d\u5143\u7d20\u503c\u5c0f\u4e8elist2\u4e2d\u5143\u7d20\u503c\uff0c\u5219\u5bf9list1\u8fed\u4ee3\u5668++\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u800c\u5982\u679clist1\u4e2d\u7684\u5143\u7d20\u503c\u5927\u4e8elist2\u4e2d\u7684\u5143\u7d20\u503c\uff0c\u90a3\u4e48\u6bcf\u6b21\u5c06list2\u8fd9\u4e2a\u5c0f\u7684\u5143\u7d20\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u585e\u5165<code>_M_transfer</code>\u51fd\u6570\u4e2d\uff0c\u901a\u8fc7\u8fd9\u4e2a\u51fd\u6570\u5b8c\u6210\u5411list1\u4e2d\u521a\u624d\u6bd4\u8f83\u7684\u8fed\u4ee3\u5668\u524d\u9762\u63d2\u5165list2\u8f83\u5c0f\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u6700\u540e\u6240\u6709\u5143\u7d20\u90fd\u4f1a\u88ab\u63d2\u5165\u5230list1\u4e2d\u3002</p> <p>\u5f53list1\u5df2\u7ecf\u904d\u5386\u5b8c\u6bd5\uff0c\u800clist2\u8fd8\u6ca1\u6709\u904d\u5386\u5b8c\u6bd5\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u6267\u884c\u4e00\u6b21<code>_M_transfer</code>\uff0c\u5c06list2\u94fe\u8868\u4ece\u5f53\u524d\u8fed\u4ee3\u5668\u5f00\u59cb\u5230\u6700\u540e\u7684end\u63d2\u5165\u5230list1\u7684\u672b\u5c3e\u5373\u53ef\u3002</p> <pre><code>template&lt;typename _Tp, typename _Alloc&gt;\nvoid\nlist&lt;_Tp, _Alloc&gt;::\n#if __cplusplus &gt;= 201103L\nmerge(list&amp;&amp; __x)\n#else\nmerge(list&amp; __x)\n#endif\n{\n// _GLIBCXX_RESOLVE_LIB_DEFECTS\n// 300. list::merge() specification incomplete\nif (this != &amp;__x)\n{\n_M_check_equal_allocators(__x);\n\niterator __first1 = begin();\niterator __last1 = end();\niterator __first2 = __x.begin();\niterator __last2 = __x.end();\nwhile (__first1 != __last1 &amp;&amp; __first2 != __last2)\nif (*__first2 &lt; *__first1)\n{\niterator __next = __first2;\n_M_transfer(__first1, __first2, ++__next);\n__first2 = __next;\n}\nelse\n++__first1;\nif (__first2 != __last2)\n_M_transfer(__last1, __first2, __last2);\n}\n}\n</code></pre> <p>\u4f7f\u7528\uff1a</p> <pre><code>int main() {\nlist&lt;int&gt; l1 = {2,3,5,7};\nlist&lt;int&gt; l2 = {1,10,9,5};\nl1.sort();\nl2.sort();\nl1.merge(l2);\nfor(auto i:l1) cout&lt;&lt;i&lt;&lt;\" \";    // 1 2 3 5 5 7 9 10\nreturn 0;\n}\n</code></pre> <ul> <li>sort</li> </ul> <p>\u7531\u4e8eSTL\u672c\u8eab\u7684\u6392\u5e8f\u7b97\u6cd5sort\u63a5\u53d7\u7684\u8f93\u5165\u8fed\u4ee3\u5668\u662f\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\uff0c\u4f46\u662f\u53cc\u5411list\u94fe\u8868\u5bb9\u5668\u7684\u8bbf\u95ee\u65b9\u5f0f\u662f\u53cc\u5411\u8fed\u4ee3\u5668\uff0c\u56e0\u6b64\uff0c\u4e0d\u80fd\u4f7f\u7528STL\u672c\u8eab\u7684\u6392\u5e8f\u7b97\u6cd5sort\uff0c\u5fc5\u987b\u81ea\u5df1\u5b9a\u4e49\u5c5e\u4e8e\u81ea\u5df1\u8bbf\u95ee\u7684\u6392\u5e8f\u7b97\u6cd5\u3002\u6211\u4eec\u4ece\u6e90\u7801\u7684\u5256\u6790\u4e2d\uff0c\u53ef\u4ee5\u770b\u5230\u8be5\u6392\u5e8f\u7b97\u6cd5\u601d\u60f3\u7c7b\u4f3c\u4e8e\u5f52\u5e76\u6392\u5e8f\u3002</p> <p>sort\u4e2dsplice\u8c03\u7528\u7684\u662f\uff1a</p> <pre><code>void splice(const_iterator __position, list&amp; __x, const_iterator __i) noexcept\n{ splice(__position, std::move(__x), __i); }\n</code></pre> <p>\u8fdb\u4e00\u6b65\u5206\u6790\uff1a</p> <pre><code>void\nsplice(iterator __position, list &amp;__x, iterator __i)\n{\niterator __j = __i._M_const_cast();\n++__j;\nif (__position == __i || __position == __j)\nreturn;\n\nif (this != &amp;__x)\n_M_check_equal_allocators(__x);\n\nthis-&gt;(__position._M_const_cast(),\n__i._M_const_cast(), __j);\n}\n</code></pre> <p>\u6700\u540e\u8c03\u7528\u7684\u662f<code>_M_transfer</code>\u3002</p> <p>\u5728sort\u4e2d\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570<code>swap</code>\uff0c\u5b8c\u6210\u4e24\u4e2a\u94fe\u8868\u4ea4\u6362\uff0c\u5b9e\u73b0\u4ee3\u7801\u5728<code>gcc-4.9.1/libstdc++-v3/src/c++98/list.cc</code>\u4e2d\uff1a</p> <pre><code>void\n_List_node_base::swap(_List_node_base&amp; __x,\n_List_node_base&amp; __y) _GLIBCXX_USE_NOEXCEPT\n{\nif ( __x._M_next != &amp;__x )\n{\nif ( __y._M_next != &amp;__y )\n{\n// Both __x and __y are not empty.\nstd::swap(__x._M_next,__y._M_next);\nstd::swap(__x._M_prev,__y._M_prev);\n__x._M_next-&gt;_M_prev = __x._M_prev-&gt;_M_next = &amp;__x;\n__y._M_next-&gt;_M_prev = __y._M_prev-&gt;_M_next = &amp;__y;\n}\nelse\n{\n// __x is not empty, __y is empty.\n__y._M_next = __x._M_next;\n__y._M_prev = __x._M_prev;\n__y._M_next-&gt;_M_prev = __y._M_prev-&gt;_M_next = &amp;__y;\n__x._M_next = __x._M_prev = &amp;__x;\n}\n}\nelse if ( __y._M_next != &amp;__y )\n{\n// __x is empty, __y is not empty.\n__x._M_next = __y._M_next;\n__x._M_prev = __y._M_prev;\n__x._M_next-&gt;_M_prev = __x._M_prev-&gt;_M_next = &amp;__x;\n__y._M_next = __y._M_prev = &amp;__y;\n}\n}\n</code></pre> <p>\u5177\u4f53\u7684\u5b9e\u73b0\u601d\u8def\u662f\uff0c\u5224\u65ad\u4e24\u4e2a\u94fe\u8868\u4e3a\u7a7a\u8fd8\u662f\u4e0d\u4e3a\u7a7a\uff0c\u7136\u540e\u4fee\u6539next\u6307\u9488\u4e0eprev\u6307\u9488\u3002</p> <p>\u4e0b\u9762\u6765\u770b\u770b\u5f3a\u5927\u7684sort\uff1a</p> <pre><code>template&lt;typename _Tp, typename _Alloc&gt;\nvoid\nlist&lt;_Tp, _Alloc&gt;::\nsort() {\n// Do nothing if the list has length 0 or 1.\nif (this-&gt;_M_impl._M_node._M_next != &amp;this-&gt;_M_impl._M_node\n&amp;&amp; this-&gt;_M_impl._M_node._M_next-&gt;_M_next != &amp;this-&gt;_M_impl._M_node) {\nlist __carry; // \u8f85\u52a9\u94fe\u8868\uff0c\u7528\u4e8e\u4ecea\u4e2d\u63d0\u53d6\u5143\u7d20\u4ee5\u53ca\u4e34\u65f6\u4fdd\u5b58\u4e24\u4e2a\u94fe\u8868\u7684\u5408\u5e76\u7ed3\u679c\nlist __tmp[64]; // \u4fdd\u5b58\u7740\u5f53\u524d\u6bcf\u4e00\u4e2a\u5f52\u5e76\u5c42\u6b21\u7684\u7ed3\u679c, i\u53f7\u94fe\u8868\u4fdd\u5b58\u7684\u5143\u7d20\u4e2a\u6570\u4e3a2\u7684i\u6b21\u65b9\u6216\u80050\nlist *__fill = &amp;__tmp[0]; // \u8868\u793a\u5f53\u524d\u6700\u5927\u5f52\u5e76\u6392\u5e8f\u7684\u5c42\u6b21\uff0cwhile\u5faa\u73af\u4e4b\u540e__fill\u53d8\u6210log2(list.size())\nlist *__counter;\n\ndo {\n__carry.splice(__carry.begin(), *this, begin()); //\u628a\u5f53\u524d\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u653e\u5728carry\u94fe\u8868\u5934\n\nfor (__counter = &amp;__tmp[0];\n__counter != __fill &amp;&amp; !__counter-&gt;empty();\n++__counter) {\n__counter-&gt;merge(__carry);  // \u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\u5408\u5e76\n__carry.swap(*__counter); // \u7c7b\u4f3c\u4e8e\u4ea4\u6362\u94fe\u8868carry\u548ccounter[i]\u5185\u5bb9  \n}\n__carry.swap(*__counter); // \u7c7b\u4f3c\u4e8e\u4ea4\u6362\u94fe\u8868carry\u548ccounter[i]\u5185\u5bb9  \nif (__counter == __fill)\n++__fill;\n} while (!empty());\n// \u6bcf\u4e24\u4e2a\u8fdb\u884c\u5f52\u5e76\uff0c\u4f9d\u6b21\u7f51\u4e0a\uff0c\u76f4\u5230\u6700\u540e*(__fill-1)\u4fdd\u5b58\u6700\u540e\u7684\u6392\u5e8f\u7ed3\u679c\u3002\u7136\u540e\u4ea4\u6362\u5230\u5f53\u524dlist\u4e2d\u3002\nfor (__counter = &amp;__tmp[1]; __counter != __fill; ++__counter)\n__counter-&gt;merge(*(__counter - 1));\nswap(*(__fill - 1)); }\n}\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u770b\u8d77\u6765\u6bd4\u8f83\u96be\u61c2\uff0c\u5728\u7f51\u4e0a\u67e5\u627e\u540e\u53d1\u73b0\uff0cG2.9\u4e2d\uff1a</p> <pre><code>template &lt;class T, class Alloc&gt;\nvoid list&lt;T, Alloc&gt; :: sort(){\n// \u5224\u65ad\u94fe\u8868\u662f\u5426\u4e3a\u7a7a\u6216\u8005\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\nif(node-&gt;next == node || link_type(node-&gt;next)-&gt;next == node){\nreturn;\n}\n\nlist&lt;T, Alloc&gt; carry;\nlist&lt;T, alloc&gt; counter[64];\nint fill = 0;\nwhile(!empty()){\ncarry.splice(carry.begin(), *this, begin());\nint i = 0;\nwhile(i &lt; fill &amp;&amp; !counter[i].empty()){\ncounter[i].merge(carry);\ncarry.swap(counter[i++]);\n}\ncarry.swap(counter[i]);\nif(i == fill){\n++fill;\n} }\n\nfor(int i = 1; i &lt; fill; ++i){\ncounter[i].merge(counter[i-1]);\n}\nswap(counter[fill-1]);\n}\n</code></pre> <p>\u5bf9\u5e94\u7684\u5916\u90e8\u5b9e\u73b0\u662f\uff1a</p> <pre><code>void sortList(list&lt;int&gt; &amp;l) {\nif (l.size() &lt;= 1) {\nreturn;\n}\nlist&lt;int&gt; carry;       // \u8f85\u52a9\u94fe\u8868\uff0c\u7528\u4e8e\u4ecea\u4e2d\u63d0\u53d6\u5143\u7d20\u4ee5\u53ca\u4e34\u65f6\u4fdd\u5b58\u4e24\u4e2a\u94fe\u8868\u7684\u5408\u5e76\u7ed3\u679c\nlist&lt;int&gt; counter[64]; // \u4fdd\u5b58\u7740\u5f53\u524d\u6bcf\u4e00\u4e2a\u5f52\u5e76\u5c42\u6b21\u7684\u7ed3\u679c, i\u53f7\u94fe\u8868\u4fdd\u5b58\u7684\u5143\u7d20\u4e2a\u6570\u4e3a2\u7684i\u6b21\u65b9\u6216\u80050\nint fill = 0;          // \u8868\u793a\u5f53\u524d\u6700\u5927\u5f52\u5e76\u6392\u5e8f\u7684\u5c42\u6b21\uff0cwhile\u5faa\u73af\u4e4b\u540efill\u53d8\u6210log2(a.size())\n\nwhile (!l.empty()) {\ncarry.splice(carry.begin(), l, l.begin()); // \u5c06\u94fe\u8868a\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u79fb\u52a8\u81f3carry\u5f00\u5934\nint i = 0;\n// \u4ece\u5c0f\u5f80\u5927\u4e0d\u65ad\u5408\u5e76\u975e\u7a7a\u5f52\u5e76\u5c42\u6b21\u76f4\u81f3\u9047\u5230\u7a7a\u5c42\u6216\u8005\u5230\u8fbe\u5f53\u524d\u6700\u5927\u5f52\u5e76\u5c42\u6b21\nwhile (i &lt; fill &amp;&amp; !counter[i].empty()) {\ncounter[i].merge(carry);    // \u94fe\u8868\u5408\u5e76\uff0c\u7ed3\u679c\u94fe\u8868\u662f\u6709\u5e8f\u7684\uff0c\u5fc5\u987b\u4fdd\u8bc1\u5408\u5e76\u524d\u4e24\u4e2a\u94fe\u8868\u662f\u6709\u5e8f\u7684\ncarry.swap(counter[i++]);   // \u94fe\u8868\u5143\u7d20\u4e92\u6362\n}\ncarry.swap(counter[i]);\nif (i == fill) {       // i\u5230\u8fbe\u5f53\u524d\u6700\u5927\u5f52\u5e76\u5c42\u6b21\uff0c\u8bf4\u660e\u5f97\u589e\u52a0\u4e00\u5c42\n++fill;\n}\n}\n\nfor (int i = 1; i &lt; fill; ++i) {  // \u5c06\u6240\u6709\u5f52\u5e76\u5c42\u6b21\u7684\u7ed3\u679c\u5408\u5e76\u5f97\u5230\u6700\u7ec8\u7ed3\u679ccounter[fill - 1]\ncounter[i].merge(counter[i - 1]);\n}\nl.swap(counter[fill - 1]);\n}\n</code></pre> <p>\u8fd9\u4e00\u5757\u53ef\u4ee5\u53c2\u8003</p> <p>https://blog.csdn.net/chenhanzhun/article/details/39337331</p> <p>\u4e0a\u9762\u7ed9\u51fa\u4e86\u8be6\u7ec6\u7684\u8fc7\u7a0b\u56fe\u89e3\u3002</p> <p>\u6211\u4eec\u518d\u6b21\u5c06G4.9\u8f6c\u6362\u5bf9\u5e94\u7684\u5916\u90e8\u5b9e\u73b0\uff1a</p> <pre><code>void sortList1(list&lt;int&gt; &amp;l) {\ntypedef list&lt;int&gt; list;\nif (l.size() &lt;= 1) {\nreturn;\n}\nlist __carry;\nlist __tmp[64];\nlist *__fill = &amp;__tmp[0];\nlist *__counter;\ndo {\n__carry.splice(__carry.begin(), l, l.begin());\nfor (__counter = &amp;__tmp[0];\n__counter != __fill &amp;&amp; !__counter-&gt;empty();\n++__counter) {\n__counter-&gt;merge(__carry);\n__carry.swap(*__counter);\n}\n__carry.swap(*__counter);\nif (__counter == __fill) ++__fill;\n} while (!l.empty());\n\nfor (__counter = &amp;__tmp[1]; __counter != __fill; ++__counter)\n__counter-&gt;merge(*(__counter - 1));\n\nl.swap(*(__fill - 1));\n}\n</code></pre> <p>\u4f7f\u7528\uff1a</p> <pre><code>int main() {\nlist&lt;int&gt; l = {7, 5, 8, 1};\ncout &lt;&lt; \"===============\u6392\u5e8f\u524d==============\" &lt;&lt; endl;\nfor (auto i:l) cout &lt;&lt; i &lt;&lt; \" \";\ncout &lt;&lt; endl;\nsortList1(l);\ncout &lt;&lt; \"===============\u6392\u5e8f\u540e==============\" &lt;&lt; endl;\nfor (auto i:l) cout &lt;&lt; i &lt;&lt; \" \";\ncout &lt;&lt; endl;\n\nreturn 0;\n}\n</code></pre> <p>\u3010\u64cd\u4f5c\u7b26\u91cd\u8f7d\u3011</p> <pre><code>template&lt;typename _Tp, typename _Alloc&gt;\ninline bool\noperator==(const list&lt;_Tp, _Alloc&gt; &amp;__x, const list&lt;_Tp, _Alloc&gt; &amp;__y) {\ntypedef typename list&lt;_Tp, _Alloc&gt;::const_iterator const_iterator;\nconst_iterator __end1 = __x.end();\nconst_iterator __end2 = __y.end();\n\nconst_iterator __i1 = __x.begin();\nconst_iterator __i2 = __y.begin();\nwhile (__i1 != __end1 &amp;&amp; __i2 != __end2 &amp;&amp; *__i1 == *__i2) {\n++__i1;\n++__i2;\n}\nreturn __i1 == __end1 &amp;&amp; __i2 == __end2;\n}\n</code></pre> <p>\u5b9e\u73b0\u601d\u8def\u662f\uff0c\u8fed\u4ee3\u5224\u65ad\u4e24\u4e2a\u8fed\u4ee3\u5668\u662f\u5426\u90fd\u62b5\u8fbe\u672b\u5c3e\u3002</p> <p>\u5269\u4e0b\u5c31\u662f\u5176\u4ed6\u7684\u64cd\u4f5c\u7b26\u91cd\u8f7d\uff0c\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u9610\u8ff0\u4e86\u3002\u5176\u4e2d<code>lexicographical_compare</code>\u5b9e\u73b0\u5728<code>c++-v3/src/c++98/stl_algobase.h</code>\u4e2d\uff0c\u8be5\u51fd\u6570\u662f\u6309\u7167\u5b57\u5178\u5e8f\u6d4b\u8bd5[frist1,last1)\u662f\u5426\u5c0f\u4e8e[first2,last2)\u3002\u8be5\u51fd\u6570\u4f7f\u7528opeartor&lt;\u6216\u8005\u662fcomp\u8fdb\u884c\u6bd4\u8f83\u3002\u5176\u884c\u4e3a\u7c7b\u4f3c\u4e8e\uff1a\u5982\u679c\u4e24\u4e2a\u5e8f\u5217\u957f\u5ea6\u4e0d\u540c\uff0c\u5e76\u4e14\u77ed\u5e8f\u5217\u548c\u957f\u5e8f\u5217\u5934\u90e8\u5b8c\u5168\u4e00\u6837\uff0c\u4f8b\u5982example\u548cexamplee.\u90a3\u4e48\uff0c\u957f\u5ea6\u5927\u7684\u5b57\u5178\u5e8f\u6bd4\u77ed\u5e8f\u7684\u5927\u3002</p> <pre><code>template &lt;class InputIterator1, class InputIterator2&gt;\nbool lexicographical_compare (InputIterator1 first1, InputIterator1 last1,\nInputIterator2 first2, InputIterator2 last2)\n{\nwhile (first1!=last1)\n{\nif (first2==last2 || *first2&lt;*first1) return false;\nelse if (*first1&lt;*first2) return true;\n++first1; ++first2;\n}\nreturn (first2!=last2);\n}\n</code></pre> <p>\u4f7f\u7528\uff1a</p> <pre><code>int main() {\nvector&lt;char&gt; v1{'h','e','l','l','o'};\nvector&lt;char&gt; v2{'h','e','l','l','o','o'};\nvector&lt;char&gt; v3{'h','e','l','m','o'};\ncout&lt;&lt;\"v1=\";\nfor(char i:v1)\ncout&lt;&lt;i&lt;&lt;\" \";\ncout&lt;&lt;endl;\ncout&lt;&lt;\"v2=\";\nfor(char i:v2)\ncout&lt;&lt;i&lt;&lt;\" \";\ncout&lt;&lt;endl;\ncout&lt;&lt;\"v3=\";\nfor(char i:v3)\ncout&lt;&lt;i&lt;&lt;\" \";\ncout&lt;&lt;endl;\n\nif(lexicographical_compare(v1.begin(),v1.end(),v2.begin(),v2.end()))\ncout&lt;&lt;\"v1 is less than v2 \"&lt;&lt;endl;\nelse\ncout&lt;&lt;\"v2 is less than v1 \"&lt;&lt;endl;\n\nif(lexicographical_compare(v1.begin(),v1.end(),v3.begin(),v3.end()))\ncout&lt;&lt;\"v1 is less than v3 \"&lt;&lt;endl;\nelse\ncout&lt;&lt;\"v3 is less than v1 \"&lt;&lt;endl;\n}\n</code></pre> <p>\u5176\u5b83\u91cd\u8f7d\u64cd\u4f5c\u7b26\u5982\u4e0b\uff1a</p> <pre><code>template&lt;typename _Tp, typename _Alloc&gt;\ninline bool\noperator&lt;(const list&lt;_Tp, _Alloc&gt; &amp;__x, const list&lt;_Tp, _Alloc&gt; &amp;__y) {\nreturn std::lexicographical_compare(__x.begin(), __x.end(),\n__y.begin(), __y.end());\n}\n\n/// Based on operator==\ntemplate&lt;typename _Tp, typename _Alloc&gt;\ninline bool\noperator!=(const list&lt;_Tp, _Alloc&gt; &amp;__x, const list&lt;_Tp, _Alloc&gt; &amp;__y) { return !(__x == __y); }\n\n/// Based on operator&lt;\ntemplate&lt;typename _Tp, typename _Alloc&gt;\ninline bool\noperator&gt;(const list&lt;_Tp, _Alloc&gt; &amp;__x, const list&lt;_Tp, _Alloc&gt; &amp;__y) { return __y &lt; __x; }\n\n/// Based on operator&lt;\ntemplate&lt;typename _Tp, typename _Alloc&gt;\ninline bool\noperator&lt;=(const list&lt;_Tp, _Alloc&gt; &amp;__x, const list&lt;_Tp, _Alloc&gt; &amp;__y) { return !(__y &lt; __x); }\n\n/// Based on operator&lt;\ntemplate&lt;typename _Tp, typename _Alloc&gt;\ninline bool\noperator&gt;=(const list&lt;_Tp, _Alloc&gt; &amp;__x, const list&lt;_Tp, _Alloc&gt; &amp;__y) { return !(__x &lt; __y); }\n</code></pre>"},{"location":"src_analysis/stl/list/#12-list","title":"1.2 list\u57fa\u7c7b\u6e90\u7801","text":"<p><code>_list_base</code>\u4e2d\u6709\u4e00\u4e2a\u7ed3\u6784\u4f53:<code>_List_impl</code>,\u800c<code>_List_impl</code>\u4e2d\u6709\u4e00\u4e2a<code>List_node_base</code>\u3002</p> <pre><code>class _List_base\n{\nprotected:\ntypedef typename _Alloc::template rebind&lt;_List_node&lt;_Tp&gt; &gt;::other\n_Node_alloc_type;\n\ntypedef typename _Alloc::template rebind&lt;_Tp&gt;::other _Tp_alloc_type;\n\nstruct _List_impl\n: public _Node_alloc_type\n{\n__detail::_List_node_base _M_node;\n\n_List_impl()\n: _Node_alloc_type(), _M_node()\n{ }\n\n_List_impl(const _Node_alloc_type&amp; __a) _GLIBCXX_NOEXCEPT\n: _Node_alloc_type(__a), _M_node()\n{ }\n\n#if __cplusplus &gt;= 201103L\n_List_impl(_Node_alloc_type&amp;&amp; __a) _GLIBCXX_NOEXCEPT\n: _Node_alloc_type(std::move(__a)), _M_node()\n{ }\n#endif\n};\n\n_List_impl _M_impl;\n};\n</code></pre> <p>\u6700\u540e\u5f62\u6210\u7684\u56fe\u5c31\u662f:</p> <p></p> <p>\u6240\u4ee5\u5982\u679c\u6c42:</p> <pre><code>sizeof(list&lt;int&gt;)=16\n</code></pre> <p>\u539f\u56e0\u662f:</p> <p><code>list</code>\u7684sizeof\u4e3a1,\u6240\u4ee5sizeof\u6765\u6e90\u4e8e\u57fa\u7c7b<code>_list_base</code>,\u800c<code>_list_base</code>\u4e2d\u6709\u4e00\u4e2a\u7ed3\u6784\u4f53:<code>_List_impl</code>,\u800c<code>_List_impl</code>\u4e2d\u6709\u4e00\u4e2a<code>_List_node_base</code>.</p> <p>\u6211\u4eec\u77e5\u9053<code>_List_node_base</code>,\u91cc\u9762\u6709\u4e24\u4e2a\u6307\u9488,\u572864\u4f4d\u4e0a,\u6bcf\u4e2a\u4e3a8\u5b57\u8282,\u517116\u5b57\u8282\u3002</p>"},{"location":"src_analysis/stl/list/#2lists-iterator","title":"2.list's Iterator\u5256\u6790","text":""},{"location":"src_analysis/stl/list/#21-iterator","title":"2.1 iterator","text":"<p>list\u7684iterator\u5b9a\u4e49</p> <pre><code>template&lt;typename _Tp&gt;\nstruct _List_iterator\n{\ntypedef _List_iterator&lt;_Tp&gt;                _Self;\ntypedef _List_node&lt;_Tp&gt;                    _Node;\n\ntypedef ptrdiff_t                          difference_type;\ntypedef std::bidirectional_iterator_tag    iterator_category;\ntypedef _Tp                                value_type;\ntypedef _Tp*                               pointer;\ntypedef _Tp&amp;                               reference;\n\n// The only member points to the %list element.\n__detail::_List_node_base* _M_node;         //  _List_node(\u8282\u70b9\u7684\u6570\u636e\u90e8\u5206) -&gt; _List_node_base(\u524d\u6307\u9488\u4e0e\u540e\u6307\u9488)\n\n_List_iterator() _GLIBCXX_NOEXCEPT\n: _M_node() { }\n\nexplicit\n_List_iterator(__detail::_List_node_base* __x) _GLIBCXX_NOEXCEPT\n: _M_node(__x) { }\n\n_Self\n_M_const_cast() const _GLIBCXX_NOEXCEPT\n{ return *this; }\n\n// The only member points to the %list element.\n__detail::_List_node_base* _M_node;\n};\n</code></pre> <p>\u5185\u90e8\u91cd\u8f7d\u51fd\u6570:</p> <pre><code>// Must downcast from _List_node_base to _List_node to get to _M_data.\n// \u91cd\u8f7d*\u64cd\u4f5c\u7b26\nreference operator*() const _GLIBCXX_NOEXCEPT\n{ return static_cast&lt;_Node*&gt;(_M_node)-&gt;_M_data; }\n\n// \u91cd\u8f7d-&gt;\u64cd\u4f5c\u7b26\npointer operator-&gt;() const _GLIBCXX_NOEXCEPT\n{ return std::__addressof(static_cast&lt;_Node*&gt;(_M_node)-&gt;_M_data); }\n\n// \u91cd\u8f7d\u524d\u7f6e++\u64cd\u4f5c\u7b26  ++i\n_Self&amp; operator++() _GLIBCXX_NOEXCEPT   { _M_node = _M_node-&gt;_M_next;\nreturn *this;\n}\n\n// \u91cd\u8f7d\u540e\u7f6e++\u64cd\u4f5c\u7b26 i++\n_Self operator++(int) _GLIBCXX_NOEXCEPT\n{\n_Self __tmp = *this;             // \u8bb0\u5f55\u539f\u503c  *\u8c03\u7528\u7684\u662f\u62f7\u8d1d\u6784\u9020\u51fd\u6570\n_M_node = _M_node-&gt;_M_next;      // \u8fdb\u884c\u64cd\u4f5c\nreturn __tmp;                    // \u8fd4\u56de\u539f\u503c\n}\n\n// \u91cd\u8f7d\u524d\u7f6e--\u64cd\u4f5c\u7b26  --i\n_Self&amp; operator--() _GLIBCXX_NOEXCEPT\n{\n_M_node = _M_node-&gt;_M_prev;\nreturn *this;\n}\n// \u91cd\u8f7d\u540e\u7f6e--\u64cd\u4f5c\u7b26  --i\n_Self operator--(int) _GLIBCXX_NOEXCEPT\n{\n_Self __tmp = *this;\n_M_node = _M_node-&gt;_M_prev;\nreturn __tmp;\n}\n// \u91cd\u8f7d++\u64cd\u4f5c\u7b26\nbool operator==(const _Self&amp; __x) const _GLIBCXX_NOEXCEPT\n{ return _M_node == __x._M_node; }\n// \u91cd\u8f7d!=\u64cd\u4f5c\u7b26\nbool operator!=(const _Self&amp; __x) const _GLIBCXX_NOEXCEPT\n{ return _M_node != __x._M_node; }\n</code></pre>"},{"location":"src_analysis/stl/list/#22","title":"2.2 \u7ed3\u70b9\u8bbe\u8ba1","text":"<p>iterator\u5185\u90e8\u7684<code>_List_node</code>,\u8fd9\u91cc\u53ef\u4ee5\u5f97\u5230\u7ee7\u627f\u81ea<code>_List_node_base</code>.</p> <p><code>_List_node</code>\u653e\u6570\u636e\u90e8\u5206</p> <p><code>_List_node_base</code>\u653e\u524d\u540e\u6307\u9488</p> <pre><code>/// An actual node in the %list.\ntemplate&lt;typename _Tp&gt;\nstruct _List_node : public __detail::_List_node_base\n{\n///&lt; User's data.\n_Tp _M_data;\n\n#if __cplusplus &gt;= 201103L\ntemplate&lt;typename... _Args&gt;\n_List_node(_Args&amp;&amp;... __args)\n: __detail::_List_node_base(), _M_data(std::forward&lt;_Args&gt;(__args)...) { }\n#endif\n};\n</code></pre> <p><code>_List_node_base</code>\u4ee3\u7801:</p> <pre><code>namespace __detail\n{\n_GLIBCXX_BEGIN_NAMESPACE_VERSION\n/// Common part of a node in the %list. \nstruct _List_node_base\n{\n_List_node_base* _M_next;\n_List_node_base* _M_prev;\n\nstatic void\nswap(_List_node_base&amp; __x, _List_node_base&amp; __y) _GLIBCXX_USE_NOEXCEPT;\n\nvoid\n_M_transfer(_List_node_base* const __first,\n_List_node_base* const __last) _GLIBCXX_USE_NOEXCEPT;\n\nvoid\n_M_reverse() _GLIBCXX_USE_NOEXCEPT;\n\nvoid\n_M_hook(_List_node_base* const __position) _GLIBCXX_USE_NOEXCEPT;\n\nvoid\n_M_unhook() _GLIBCXX_USE_NOEXCEPT;\n};\n\n_GLIBCXX_END_NAMESPACE_VERSION\n} // namespace detail\n</code></pre> <p>\u8fed\u4ee3\u5668\u5728\u8bbe\u8ba1\u7684\u65f6\u5019,\u603b\u662f\u4fdd\u6301\u524d\u95ed\u540e\u5f00\u539f\u5219,\u4f8b\u5982iter-&gt;begin()\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20,iter-&gt;end()\u6307\u5411\u5b9e\u9645\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20,\u6545\u6700\u540e\u7684\u8bbe\u8ba1\u523b\u610f\u5728\u73af\u5f62list\u5c3e\u90e8\u52a0\u4e00\u4e2a\u7a7a\u767d\u7ed3\u70b9,\u7528\u4ee5\u7b26\u5408STL\u524d\u95ed\u540e\u5f00\u539f\u5219.</p>"},{"location":"src_analysis/stl/map_multimap/","title":"C++ STL\u6e90\u7801\u5256\u6790\u4e4bmap\u3001multimap\u3001initializer_list","text":"<p>map/multimap \u4ee5rb_tree\u4e3a\u5e95\u5c42\u7ed3\u6784\uff0c\u56e0\u6b64\u6709\u5143\u7d20\u81ea\u52a8\u6392\u5e8f\u7279\u70b9\uff0c\u6392\u5e8f\u7684\u4f9d\u636e\u662fkey\u3002</p> <p>map/multimap\u63d0\u4f9b\"\u904d\u5386\"\u64cd\u4f5c\u53caiterators\u3002\u6309\u6b63\u5e38\u89c4\u5219(++iter)\u904d\u5386\uff0c\u4fbf\u80fd\u591f\u83b7\u5f97\u6392\u5e8f\u72b6\u6001\u3002</p> <p>\u6211\u4eec\u65e0\u6cd5\u4f7f\u7528map/multimap\u7684iterators\u6539\u53d8\u5143\u7d20\u7684key(\u56e0\u4e3akey\u6709\u5176\u4e25\u8c28\u6392\u5217\u89c4\u5219)\uff0c\u4f46\u53ef\u4ee5\u7528\u5b83\u6765\u6539\u53d8\u5143\u7d20\u7684data\u3002\u56e0\u6b64map/multimap\u5185\u90e8\u81ea\u52a8\u5c06\u7528\u6237\u6307\u5b9a\u7684key type\u8bbe\u5b9a\u4e3aconst\uff0c\u5982\u6b64\u4fbf\u80fd\u8fdb\u5236\u7528\u6237\u5bf9\u5143\u7d20key\u7684\u8d4b\u503c\u3002</p> <p>map\u5143\u7d20\u7684key\u5fc5\u987b\u72ec\u7acb\u65e0\u4e8c\uff0c\u56e0\u6b64\u5176insert\u4f7f\u7528\u7684\u662frb_tree\u7684<code>_M_insert_unique()</code>\uff0c\u800cmultimap\u5143\u7d20\u7684key\u53ef\u4ee5\u91cd\u590d\uff0c\u56e0\u6b64\u5176insert\u4f7f\u7528\u7684\u662frb_tree\u7684<code>_M_insert_equal()</code>\u3002</p> <p>\u5bf9\u4e8e\u672c\u8282\uff0c\u6211\u4eec\u5c06\u4ece\u4e0b\u9762\u51e0\u4e2a\u5185\u5bb9\u9610\u8ff0\uff1a</p> <ul> <li>map\u7684key\u4e3akey,value\u4e3akey+data,\u4e0eset\u662f\u4e0d\u540c\u7684\uff0cset\u662fkey\u5c31\u662fvalue\uff0cvalue\u5c31\u662fkey\u3002</li> <li>map\u7684key\u4e0d\u53ef\u4fee\u6539,map\u4e0emultimap\u7684\u63d2\u5165\u8c03\u7528\u51fd\u6570\u4e0d\u540c\uff0c\u5f71\u54cd\u4e86\u5176key\u662f\u5426\u5bf9\u5e94value\u3002</li> <li>initializer_list\u4f7f\u7528</li> <li>map\u6709<code>[]</code>\u64cd\u4f5c\u7b26\uff0c\u800cmultimap\u6ca1\u6709<code>[]</code>\u64cd\u4f5c\u7b26\u3002</li> </ul>"},{"location":"src_analysis/stl/map_multimap/#1map","title":"1.map","text":"<p>key\u4e3akey\uff0cvalue\u4e3akey+data</p> <p>\u4e0b\u9762map\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230value_type\u4e3a\u4e00\u4e2apair\u3002</p> <pre><code>template &lt;typename _Key, typename _Tp, typename _Compare = std::less&lt;_Key&gt;,\ntypename _Alloc = std::allocator&lt;std::pair&lt;const _Key, _Tp&gt; &gt; &gt;\nclass map\n{\npublic:\ntypedef _Key                                          key_type;\ntypedef _Tp                                           mapped_type;\ntypedef std::pair&lt;const _Key, _Tp&gt;                    value_type;\ntypedef _Compare                                      key_compare;\ntypedef _Alloc                                        allocator_type;\nprivate:\n// key\u4e3akey,value\u4e3akey+data\ntypedef _Rb_tree&lt;key_type, value_type, _Select1st&lt;value_type&gt;,\nkey_compare, _Pair_alloc_type&gt; _Rep_type;\n\n/// The actual tree structure.\n_Rep_type _M_t;\n};\n</code></pre> <p></p> <p>\u4e0a\u8ff0\u9ed8\u8ba4\u7684\u4eff\u51fd\u6570\u4e3a<code>_Select1st</code>\uff0c\u6211\u4eec\u5728<code>stl_function</code>\u4e2d\u770b\u5230\u6e90\u7801\u5982\u4e0b\uff1a</p> <pre><code>template&lt;typename _Pair&gt;\nstruct _Select1st\n: public unary_function&lt;_Pair, typename _Pair::first_type&gt;\n{\ntypename _Pair::first_type&amp;\noperator()(_Pair&amp; __x) const\n{ return __x.first; }\n};\n</code></pre> <p>\u6211\u4eec\u770b\u5230\u4e0a\u8ff0\u7684<code>_Select1st</code>\u4e3a\u4e00\u4e2astruct\uff0c\u600e\u4e48\u80fd\u8bf4\u5b83\u662f\u4eff\u51fd\u6570\u5462\uff1f \u56e0\u4e3a\u91cc\u9762\u91cd\u8f7d\u4e86\u4e00\u4e2a()\u64cd\u4f5c\u7b26\uff0c\u54c8\u54c8\uff5e</p> <p>\u4e0b\u9762\u6211\u4eec\u6765\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a\uff1a</p> <pre><code>template&lt;typename _T1&gt;\nstruct mySelect1st\n: public unary_function&lt;_T1, typename _T1::first_type&gt;\n{\ntemplate&lt;typename _T2&gt;\ntypename _T2::first_type&amp;\noperator()(_T2&amp; __x) const\n{ return __x.first; }\n};\nint main() {\ntypedef pair&lt;const int,int&gt; value_type;\n_Rb_tree&lt;int, value_type, mySelect1st&lt;value_type&gt;, less&lt;int&gt;&gt; it;\nit._M_insert_unique(make_pair(1,3));\nit._M_insert_unique(make_pair(3,6));\nfor(auto each:it)\ncout&lt;&lt;each.first&lt;&lt;\" \"&lt;&lt;each.second&lt;&lt;endl;\n}\n</code></pre> <p>key\u4e0d\u80fd\u6539\uff0cdata\u53ef\u4ee5\u6539</p> <p>\u4e0a\u8ff0\u6e90\u7801\u4e2d\uff1a\u81ea\u52a8\u4e3akey\u6dfb\u52a0\u4e00\u4e2aconst\uff0c\u6240\u4ee5key\u4e0d\u80fd\u6539\u3002</p> <pre><code>typedef std::pair&lt;const _Key, _Tp&gt;                    value_type;\n</code></pre>"},{"location":"src_analysis/stl/map_multimap/#2insert","title":"2.insert","text":"<p>insert\u91cc\u9762\u91c7\u7528<code>_M_insert_unique</code></p> <p>insert\u7684\u51e0\u79cd\u65b9\u6cd5\uff1a</p> <p>\uff081\uff09 \u63d2\u5165 pair</p> <pre><code>std::pair&lt;iterator, bool&gt; insert(const value_type&amp; __x)\n{ return _M_t._M_insert_unique(__x); }\n</code></pre> <p>map\u91cc\u9762</p> <p>\uff082\uff09 \u5728\u6307\u5b9a\u4f4d\u7f6e\uff0c\u63d2\u5165pair</p> <pre><code>iterator insert(iterator __position, const value_type&amp; __x)\n{ return _M_t._M_insert_equal_(__position, __x); }\n</code></pre> <p>\uff083\uff09 \u4ece\u4e00\u4e2a\u8303\u56f4\u8fdb\u884c\u63d2\u5165</p> <pre><code>template&lt;typename _InputIterator&gt;\nvoid\ninsert(_InputIterator __first, _InputIterator __last)\n{ _M_t._M_insert_equal(__first, __last); }\n</code></pre> <p>\uff084\uff09\u4ecelist\u4e2d\u63d2\u5165</p> <pre><code>void\ninsert(initializer_list&lt;value_type&gt; __l)\n{ this-&gt;insert(__l.begin(), __l.end()); }\n</code></pre> <p>\u9488\u5bf9\u6700\u540e\u4e00\u4e2ainsert\uff0c\u91cc\u9762\u6709\u4e2a<code>initializer_list</code>\uff0c\u4e3e\u4e2a\u4f8b\u5b50\u5927\u5bb6\u5c31\u77e5\u9053\u4e86\u3002</p>"},{"location":"src_analysis/stl/map_multimap/#3initializer_list","title":"3.initializer_list\u4f7f\u7528","text":"<p>\u5b9e\u9645\u7f16\u7a0b\u5b9e\u8df5 </p> <pre><code>vector&lt;int&gt; v={1,2,3};   // \u5e95\u5c42\u8c03\u7528vector\u7684\u6784\u9020\u51fd\u6570\nv={2,5,6};               // \u5e95\u5c42\u8c03\u7528vector\u7684=\u64cd\u4f5c\u7b26\ninitializer_list&lt;int&gt; ll={4,5,6};\nv.insert(v.begin(),ll);  // \u5e95\u5c42\u8c03\u7528\u4e0b\u9762insert\u51fd\u6570\nfor(auto x:v) cout&lt;&lt;x&lt;&lt;\" \";\ncout&lt;&lt;endl;\nvector&lt;int&gt; vv(ll);      // \u5e95\u5c42\u8c03\u7528vector\u7684\u6784\u9020\u51fd\u6570\nvector&lt;string&gt; city{\"Berlin\", \"New York\", \"London\", \"Cairo\",\"Tokyo\", \"Cologne\"};\n</code></pre> <p>\u9488\u5bf9\u8fd9\u4e2avector\u521d\u59cb\u5316\uff0c\u5927\u5bb6\u5f88\u719f\u6089\u4e86\uff0c\u4e3a\u4f55\u53ef\u4ee5\u8fd9\u6837\u521d\u59cb\u5316\u5462\uff1f \u6211\u4eec\u770b\u4e00\u4e0bvector\u6e90\u7801\uff1a</p> <pre><code> vector&amp;\noperator=(initializer_list&lt;value_type&gt; __l)\n{\nthis-&gt;assign(__l.begin(), __l.end());\nreturn *this;\n}\n\niterator\ninsert(const_iterator __position, initializer_list&lt;value_type&gt; __l)\n{ return this-&gt;insert(__position, __l.begin(), __l.end()); }\n\nvector(initializer_list&lt;value_type&gt; __l,\nconst allocator_type&amp; __a = allocator_type())\n: _Base(__a)\n{\n_M_range_initialize(__l.begin(), __l.end(),\nrandom_access_iterator_tag());\n}\n</code></pre> <p>\u56e0\u4e3a\u5b83\u7684\u6784\u9020\u51fd\u6570\u91cc\u9762\uff0c\u53c2\u6570\u6709\u4e2a<code>initializer_list</code>,\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u9488\u5bf9\u8fd9\u4e2a\u5bf9map\u8fdb\u884c\u4f7f\u7528\u3002 \u4f46\u662fmap\u6ca1\u6709\u7c7b\u4f3c\u7684\u6784\u9020\uff0c\u5b83\u4e5f\u5e94\u7528\u5728map\u6784\u9020\u51fd\u6570\uff0cinsert\u4e0e<code>=</code>\u5904\uff0c\u8ddf\u4e0a\u9762\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u4e09\u5904\uff0c\u54c8\u54c8\uff5e</p> <p>\u4f7f\u7528<code>initializer_list</code>\u4e09\u5904\uff1a</p> <pre><code>// map\u6784\u9020\nmap(initializer_list&lt;value_type&gt; __l, const allocator_type&amp; __a)\n: _M_t(_Compare(), _Pair_alloc_type(__a))\n{ _M_t._M_insert_unique(__l.begin(), __l.end()); }\n// =\u64cd\u4f5c\u7b26\u91cd\u8f7d\nmap&amp;\noperator=(initializer_list&lt;value_type&gt; __l)\n{\nthis-&gt;clear();\nthis-&gt;insert(__l.begin(), __l.end());\nreturn *this;\n}\n// insert\u63d2\u5165\nvoid\ninsert(std::initializer_list&lt;value_type&gt; __list)\n{ insert(__list.begin(), __list.end()); }\n</code></pre> <p>\u5b9e\u9645\u7f16\u7a0b\u5b9e\u8df5</p> <p>map\u4f7f\u7528<code>initializer_list</code>(set\u4f7f\u7528\u4e00\u6837)\uff1a</p> <pre><code>// \u8fd9\u91cc\u8981\u6ce8\u610f\uff0cpair\u7684first\u53c2\u6570\u5fc5[\u987b\u662fconst\ninitializer_list&lt;pair&lt;const strin[g,int&gt;&gt; l = {{\"hello\", 1}, {\"world\", 2}};\nmap&lt;string,int&gt; mm(l);  // map\u6784\u9020\u51fd\u6570\nmap&lt;string, int&gt; m2{{\"hello\", 1}, {\"world\", 2}}; // map\u6784\u9020\u51fd\u6570\nmap&lt;string, int&gt; m1={{\"hello\", 1}, {\"world\", 2}};   // map\u6784\u9020\u51fd\u6570\nm1 = {{\"h\", 1}, {\"w\", 3}};             // \u5e95\u5c42\u8c03\u7528map\u7684=\u64cd\u4f5c\u7b26\nmap&lt;string, int&gt; mp;\nmp.insert(l);       // insert\u63d2\u5165[\n</code></pre> <p>\u4e0a\u8ff0\u4f1a\u5f15\u51fa\u53e6\u4e00\u4e2a\u95ee\u9898\uff1a</p> <pre><code>map&lt;string, int&gt; m1={{\"hello\", 1}, {\"world\", 2}};   // map\u6784\u9020\u51fd\u6570\nm1 = {{\"h\", 1}, {\"w\", 3}};             // \u5e95\u5c42\u8c03\u7528map\u7684=\u64cd\u4f5c\u7b26\n</code></pre> <p>\u8fd9\u4e24\u4e2a\u4e3a\u4f55\u4e00\u4e2a\u8c03\u7528\u7684\u6784\u9020\uff0c\u4e00\u4e2a\u8c03\u7528=\u64cd\u4f5c\u7b26\u5462\uff1f</p> <p>\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\uff0c\u5b9a\u4e49\u53ca\u8d4b\u503c\u7684\u65f6\u5019\u5c31\u76f4\u63a5\u8c03\u7528\u6784\u9020\uff0c\u540e\u9762\u518d\u6b21\u8d4b\u503c\uff0c\u5c31\u662f\u5148\u8c03\u7528\u62f7\u8d1d\u6784\u9020(\u6709\u53ef\u80fd\u4f1a\u88ab\u7f16\u8bd1\u5668\u4f18\u5316)\uff0c\u518d\u8c03\u7528=\u64cd\u4f5c\u7b26\u3002</p> <p>\u5b9e\u4f8b\u5206\u6790</p> <p>\u4e0b\u9762\u7528\u4e00\u4e2a\u5177\u4f53\u5b9e\u4f8b\u6765\u5206\u6790\u4e00\u4e0b\uff1a</p> <pre><code>template &lt;typename _Tp&gt;\nclass Foo\n{\npublic:\nFoo(initializer_list&lt;_Tp&gt; &amp;list)\n{\ncout &lt;&lt; \"Foo(initializer_list&lt;_Tp&gt; &amp;list)\"&lt;&lt; endl;\n}\n\nFoo(int)\n{\ncout &lt;&lt; \"Foo(int )\"&lt;&lt; endl;\n}\n\nFoo(const Foo&amp; f)\n{\ncout &lt;&lt; \"\u8c03\u7528\u4e86\u62f7\u8d1d\u6784\u9020\u51fd\u6570\"&lt;&lt; endl;\n}\nFoo&amp; operator=(initializer_list&lt;_Tp&gt; __l)\n{\ncout&lt;&lt;\"\u8c03\u7528\u4e86=\u64cd\u4f5c\u7b26\u91cd\u8f7d\"&lt;&lt;endl;\nreturn *this;\n}\n\n};\n</code></pre> <p>\u8c03\u7528\uff1a</p> <pre><code>Foo&lt;int&gt; foo=ll;\nfoo={1,2};\n</code></pre> <p>\u7f16\u8bd1\u5668\u672a\u88ab\u4f18\u5316\u7684\u7ed3\u679c\uff1a</p> <pre><code>Foo(initializer_list&lt;_Tp&gt; &amp;list)\n\u8c03\u7528\u4e86=\u64cd\u4f5c\u7b26\u91cd\u8f7d\n</code></pre> <p>\u6211\u4eec\u901a\u8fc7\u7981\u7528\u7f16\u8bd1\u5668\u4f18\u5316\uff1a<code>g++ -o rb  rbtree.cpp  -std=c++11 -fno-elide-constructors</code></p> <pre><code>Foo(initializer_list&lt;_Tp&gt; &amp;list)\n\u8c03\u7528\u4e86\u62f7\u8d1d\u6784\u9020\u51fd\u6570\n\u8c03\u7528\u4e86=\u64cd\u4f5c\u7b26\u91cd\u8f7d\n</code></pre>"},{"location":"src_analysis/stl/map_multimap/#4multimap","title":"4.multimap","text":"<p>\u540cmap\u4e00\u6837multimap\u4e0d\u5141\u8bb8\u4fee\u6539key\u3002\u4f46\u662f\u63d2\u5165\u4f7f\u7528\u7684\u662f<code>_M_insert_equal</code>\u3002</p> <pre><code>template &lt;typename _Key, typename _Tp,\ntypename _Compare = std::less&lt;_Key&gt;,\ntypename _Alloc = std::allocator&lt;std::pair&lt;const _Key, _Tp&gt; &gt; &gt;\nclass multimap\n{\npublic:                                      typedef std::pair&lt;const _Key, _Tp&gt; value_type;   }\n</code></pre> <p>\u4e0b\u9762\u4f7f\u7528multimap\u4e0erbtree\u4e24\u79cd\u65b9\u5f0f\u6765\u8054\u7cfb\u3002</p> <pre><code>multimap&lt;int, string&gt; c;\nc.insert(make_pair(1,\"asdqw\"));\nc.insert(make_pair(1,\"qweq\"));\n\nfor(auto each:c) cout&lt;&lt;each.first&lt;&lt;\" \"&lt;&lt;each.second&lt;&lt;endl;\n\ntypedef pair&lt;const int,string&gt; valueT;\n_Rb_tree&lt;int, valueT, _Select1st&lt;valueT&gt;, less&lt;int&gt;&gt; mulm;\nmulm._M_insert_equal(make_pair(2,\"abc\"));\nmulm._M_insert_equal(make_pair(2,\"cde\"));\nfor(auto each:mulm)\ncout&lt;&lt;each.first&lt;&lt;\" \"&lt;&lt;each.second&lt;&lt;endl;\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>1 asdqw\n1 qweq\n2 abc\n2 cde\n</code></pre>"},{"location":"src_analysis/stl/map_multimap/#5mapmultimap","title":"5.map\u4e0emultimap\u7684\u91cd\u8981\u64cd\u4f5c\u7b26","text":"<p>map\u4e0emultimap<code>[]</code>\u64cd\u4f5c\u7b26\uff0cmap\u7684<code>[]</code>\u64cd\u4f5c\u7b26\u8fd4\u56de\u4f20\u9012\u7ed9map\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002</p> <p>\u4f20\u9012\u7ed9<code>[]</code>\u4e00\u4e2akey\uff0c\u5982\u679c\u67e5\u627e\u5230\uff0c\u5c31\u662fvalue\uff0c\u5426\u5219\u5c31\u662f\u9ed8\u8ba4\u503c0\u3002</p> <pre><code>mapped_type&amp;\noperator[](const key_type&amp; __k)\n{\niterator __i = lower_bound(__k);// \u627e\u5230__k\u7b2c\u4e00\u4e2a\u3002\n// __i-&gt;first is greater than or equivalent to __k.\nif (__i == end() || key_comp()(__k, (*__i).first))\n#if __cplusplus &gt;= 201103L\n__i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,\nstd::tuple&lt;const key_type&amp;&gt;(__k),\nstd::tuple&lt;&gt;());\n#else\n__i = insert(__i, value_type(__k, mapped_type()));\n#endif\nreturn (*__i).second;  // \u8fd4\u56dekey\u7684value\uff0c\u6b64value\u4e3a\u4f20\u9012\u8fdbmap\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002\n}\n</code></pre> <p>\u4f46\u662fmultimap\u6ca1\u6709<code>[]</code>\u64cd\u4f5c\u7b26\uff01\uff01\uff01</p> <p>\u6211\u4eec\u601d\u8003\u4e00\u4e0b\uff0c\u56e0\u4e3amultimap\u4f1a\u6839\u636ekey\uff0c\u6709\u53ef\u80fd\u4f1a\u5bf9\u5e94\u591a\u4e2avalue\uff0c\u90a3\u5982\u679c\u6211\u4eec\u901a\u8fc7<code>[]</code>\u83b7\u53d6\u5bf9\u5e94key\u7684value\uff0c\u6b64\u65f6\u5230\u5e95\u83b7\u53d6\u7684\u662f\u54ea\u4e2avalue\u5462\uff0c\u6240\u4ee5\u5728STL\u6e90\u7801\u4e2d\u6ca1\u6709\u91cd\u8f7d\u8fd9\u4e2a\u64cd\u4f5c\u7b26\uff01</p>"},{"location":"src_analysis/stl/myhashtable/","title":"\u4ece0\u52301\u6253\u7262\u7b97\u6cd5\u57fa\u7840\u4e4b\u624b\u5199\u4e00\u4e2a\u54c8\u5e0c\u8868","text":""},{"location":"src_analysis/stl/myhashtable/#0","title":"0.\u5bfc\u8bed","text":"<p>\u76ee\u7684\uff1a\u624b\u5199\u5b9e\u73b0\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u91c7\u7528\u62c9\u94fe\u6cd5\u6784\u5efa\uff0c\u6bcf\u4e2ahash(key)\u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u7ea2\u9ed1\u6811\u3002</p> <p>\u770b\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u4f46\u53ef\u4ee5\u5b66\u5230\u5f88\u591a\u4e1c\u897f\u3002\u5b9e\u73b0\u8bed\u8a00\uff1aC++\u3002</p> <p>\u4e3a\u4e86\u6253\u7262\u7b97\u6cd5\u57fa\u7840\uff0cgithub\u5f00\u4e86\u4e2a\u4ed3\u5e93\uff0c\u6765\u5b8c\u6210\u540e\u9762\u7b97\u6cd5\u57fa\u7840\u7684\u5e94\u7528\u4e0e\u5b9e\u73b0\uff0c\u5730\u5740\uff1a</p> <p>https://github.com/Light-City/algPratice</p> <p>\u4e5f\u53ef\u4ee5\u70b9\u51fb\u539f\u6587\u9605\u8bfb\u3002</p>"},{"location":"src_analysis/stl/myhashtable/#1","title":"1.\u7b80\u6613\u7248\u54c8\u5e0c\u8868","text":"<p>\u6211\u4eec\u5c06\u54c8\u5e0c\u8868\u5c01\u88c5\u5728\u4e00\u4e2a\u7c7b\u4e2d,\u5b8c\u6210\u904d\u5386\u7684\u5b9a\u4e49\u4e0e\u58f0\u660e\u4ee5\u53ca\u6784\u9020\u3001\u6790\u6784\u7684\u5b9e\u73b0\uff1a</p> <pre><code>template&lt;typename Key, typename Value&gt;\nclass HashTable {\nprivate:\nconst static int upperTol = 3;\nconst static int lowerTol = 1;\nconst static int initCapacity = 1;\nmap&lt;Key, Value&gt; **hashtable;\nint M;\nint size;\npublic:\n/**\n     * \u4f20\u53c2\u6784\u9020\n     * @param M\n     */\nHashTable(int M) : M(M), size(0) {\n// \u8fd9\u91cc\u7684\u62ec\u53f7\u662f\u4e3a\u4e86\u521d\u59cb\u5316\u4e3a0,\u8fd9\u5c31\u53ef\u4ee5\u4e0d\u7528\u5199\u4e0b\u9762\u7684\u4ee3\u7801,\u5f53\u7136\u5728\u540e\u9762add\u4e4b\u7c7b\u7684\u64cd\u4f5c,\u5c31\u4e0d\u9700\u8981\u52a8\u6001\u5206\u914d\u5185\u5b58.\n// this-&gt;hashtable = new map&lt;Key, Value&gt; *[M]();\nthis-&gt;hashtable = new map&lt;Key, Value&gt; *[M];\nfor (int i = 0; i &lt; M; i++) {\nthis-&gt;hashtable[i] = new map&lt;Key, Value&gt;;\n}\n}\n\n/**\n     * \u9ed8\u8ba4\u6784\u9020\n     */\nHashTable() {\nHashTable(initCapacity);\n}\n\n/**\n     * \u6790\u6784\u51fd\u6570,\u91ca\u653e\u5185\u5b58\n     */\n~HashTable() {\nfree(M);\n}\nprivate:\n/**\n     * \u91ca\u653e\u5185\u5b58\n     * @param M\n     */\nvoid free(int M) {\nfor (int i = 0; i &lt; M; i++) {\nif (hashtable[i])\ndelete hashtable[i];\n}\ndelete[]hashtable;\n\n};\n</code></pre> <p>\u5bf9\u4e8e\u54c8\u5e0c\u8868\u5b9e\u73b0\uff0c\u91cc\u9762\u6709\u4e00\u4e2a\u6bd4\u8f83\u91cd\u8981\u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u8fd9\u91cc\u6211\u4eec\u5148\u81ea\u5df1\u5b9a\u4e49\u4e00\u4e2a\uff1a</p> <pre><code>/**\n* \u54c8\u5e0c\u51fd\u6570\n* @param key\n* @return\n*/\nint hashFunc(Key key) {\nstd::hash&lt;Key&gt; h;\nreturn (h(key) &amp; 0x7fffffff) % M;\n}\n</code></pre> <p>\u8fd9\u91cc\u4f7f\u7528std\u7684hash\u5f97\u5230\u503c\u4e4b\u540e\uff0c\u5c06\u5176<code>&amp;</code>\u4e0a<code>0x7fffffff</code>\uff0c\u53bb\u6389\u9ad8\u4f4d\u7684\u8d1f\u53f7\uff0c\u8f6c\u4e3a\u6b63\u6570\uff0c\u7136\u540e\u4f59\u4e0aM\u3002</p> <p>\u73b0\u5728\u6709\u4e86\u8fd9\u4e9b\u6211\u4eec\u6765\u5b9e\u73b0\u4e00\u4e0b\u5b83\u7684\u589e\u5220\u6539\u67e5\u3002</p> <p>\u589e\u64cd\u4f5c</p> <p>\u5e95\u5c42\u91c7\u7528\u7684\u662f\u7ea2\u9ed1\u6811,\u63d2\u5165\u662f\u4f7f\u7528insert\u65b9\u6cd5\uff0c\u901a\u8fc7\u6784\u9020\u4e00\u4e2apair\u6765\u5b8c\u6210\u3002 \u800c\u5f53key\u5b58\u5728\u7684\u65f6\u5019\uff0c\u66f4\u65b0\u503c\u5373\u53ef\uff0c\u5bf9\u4e8e\u66f4\u65b0\u8fd9\u4e00\u5757\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528insert\u662f\u4e0d\u8d77\u4f5c\u7528\u7684\uff0c\u6bd4\u5982\u4e0b\u9762\u6d4b\u8bd5\uff1a</p> <pre><code> map&lt;string,int&gt; m{{\"a\",1},{\"b\",2}};\nfor(auto i:m) cout&lt;&lt;i.first&lt;&lt;\" \"&lt;&lt;i.second&lt;&lt;\" \";\ncout&lt;&lt;endl;\nm.insert({{\"a\",2}});\nfor(auto i:m) cout&lt;&lt;i.first&lt;&lt;\" \"&lt;&lt;i.second&lt;&lt;\" \";\ncout&lt;&lt;endl;\nm[\"a\"]=2;\nfor(auto i:m) cout&lt;&lt;i.first&lt;&lt;\" \"&lt;&lt;i.second&lt;&lt;\" \";\ncout&lt;&lt;endl;\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>a 1 b 2 a 1 b 2 a 2 b 2 </code></pre> <p>\u56e0\u6b64\uff0c\u5982\u679c\u8981\u4fee\u6539key\u5bf9\u5e94\u7684value\uff0c\u53ef\u4ee5\u901a\u8fc7<code>[]</code>\u6765\u4fee\u6539\uff0c\u8fd8\u53ef\u4ee5\u5148\u5220\u9664\uff0c\u518d\u63d2\u5165\uff0c\u8fd9\u91cc\u5c31\u7528\u8fd9\u4e2a\u65b9\u6cd5\u3002</p> <pre><code>/**\n* \u6dfb\u52a0\u65b0\u5143\u7d20\n* @param key\n* @param value\n*/\nvoid add(Key key, Value value) {\n// \u62c9\u94fe\u6cd5\u51fa\u6765\u7684map\u5982\u679c\u4e3a\u7a7a,\u5c31\u52a8\u6001\u5206\u914d\u4e00\u4e2amap,\u7136\u540e\u8fdb\u884c\u63d2\u5165\n// \u5982\u679ckey\u4e0d\u5b58\u5728\u5c31\u770b\u5185\u5b58\u662f\u5426\u5b58\u5728,\u4e0d\u5b58\u5728,\u5c31\u5206\u914d,\u5b58\u5728\u5c31\u63d2\u5165\nif (hashtable[hashFunc(key)] == NULL || hashtable[hashFunc(key)]-&gt;count(key) == 0) {\nif (hashtable[hashFunc(key)] == NULL)\nhashtable[hashFunc(key)] = new map&lt;Key, Value&gt;;\nhashtable[hashFunc(key)]-&gt;insert(make_pair(key, value));\nsize++;\nif (size &gt;= maxCapacity())\nresize(2 * M);\n} else {\n// \u5426\u5219,\u4fee\u6539value.\nhashtable[hashFunc(key)]-&gt;erase(key);\nhashtable[hashFunc(key)]-&gt;insert(make_pair(key, value));\n}\n}\n</code></pre> <p>\u5220\u64cd\u4f5c</p> <p>\u5982\u679ckey\u5b58\u5728\uff0c\u5c31\u5220\u9664\uff0csize--\uff0c\u5426\u5219\u8fd4\u56de\u5931\u8d25\u6807\u8bb0\u3002</p> <pre><code>/**\n* \u79fb\u9664Key\n* @param key\n* @return 0 success -1 fail\n*/\nValue remove(Key key) {\nValue ret = -1;\n// \u662f\u5426\u5305\u542bkey,\u82e5\u5305\u542bkey,\u5219\u76f4\u63a5\u5220\u9664\nif (contains(key)) {\nhashtable[hashFunc(key)]-&gt;erase(key);\nsize--;\n//            if (size == 0) delete hashtable[hashFunc(key)];       // \u53ef\u4ee5\u6dfb\u52a0\u8fd9\u884c\u6765\u52a8\u6001\u51cf\u5c11\u5185\u5b58\nret = 0;\n// initCapacity \u4fdd\u8bc1\u4e0d\u4f1a\u8d8a\u754c\nif (size &lt; minCapacity() &amp;&amp; M / 2 &gt;= initCapacity) resize(M / 2);\n}\nreturn ret;\n}\n</code></pre> <p>\u6539\u64cd\u4f5c</p> <p>\u524d\u9762\u63d0\u5230\u8fc7\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u653e\u4ee3\u7801\u3002</p> <pre><code>/**\n* \u91cd\u8bbevalue\n* @param key\n* @param value\n*/\nvoid set(Key key, Value value) {\n// key\u4e0d\u5b58\u5728\nif (!contains(key))\nhrow \"key not exists!\";\n// \u4fee\u6539value\nhashtable[hashFunc(key)]-&gt;erase(key);\nhashtable[hashFunc(key)]-&gt;insert(make_pair(key, value));\n}\n</code></pre> <p>\u67e5\u64cd\u4f5c</p> <p>\u83b7\u53d6key\u5bf9\u5e94\u7684value\u3002</p> <pre><code>/**\n* \u83b7\u53d6key\u5bf9\u5e94\u7684value\n* @param key\n* @return\n*/\nValue get(Key key) {\nif (contains(key))\nreturn hashtable[hashFunc(key)]-&gt;at(key);\nreturn 0;\n}\n</code></pre> <p>\u6700\u540e\uff0c\u4e0a\u9762\u6709<code>contains</code>\u4e0e<code>resize</code>\u7b49\u51fd\u6570\u672a\u63d0\u3002</p> <p>key\u5b58\u5728\u4e0e\u5426</p> <p>\u9996\u5148contains\u51fd\u6570\u5b9e\u73b0\uff0c\u5c31\u662f\u5224\u65adkey\u5b58\u5728\u4e0e\u5426\uff1a</p> <pre><code>/**\n    * \u662f\u5426\u5305\u542bkey\n    * @param key\n    * @return\n    */\nbool contains(Key key) {\nreturn hashtable[hashFunc(key)] == NULL || this-&gt;hashtable[hashFunc(key)]-&gt;count(key) == 0 ? false : true;\n}\n</code></pre> <p>\u83b7\u53d6size</p> <pre><code>/**\n* \u83b7\u53d6\u54c8\u5e0c\u8868\u5143\u7d20\u4e2a\u6570\n* @return\n*/\nint getSize() {\nreturn size;\n}\n</code></pre> <p>\u6700\u5927\u5bb9\u91cf\u4e0e\u6700\u5c0f\u5bb9\u91cf</p> <pre><code>/**\n    * \u6700\u5927\u5bb9\u91cf\n    * @return\n    */\nValue maxCapacity() {\nreturn M * upperTol;\n}\n\n/**\n    * \u6700\u5c0f\u5bb9\u91cf\n    * @return\n    */\nValue minCapacity() {\nreturn M * lowerTol;\n}\n</code></pre> <p>resize\u51fd\u6570</p> <p>\u5b8c\u6210\u52a8\u6001\u8c03\u6574\u5185\u5b58\uff0c\u5c06\u539f\u6765\u5185\u5b58\u4e2d\u7684\u5185\u5bb9\u62f7\u8d1d\u5230\u65b0\u5206\u914d\u7684\u7a7a\u95f4\uff0c\u91ca\u653e\u539f\u7a7a\u95f4\uff01</p> <pre><code>/**\n* \u52a8\u6001\u8c03\u6574\u5185\u5b58,\u4fdd\u8bc1\u65f6\u95f4\u590d\u6742\u5ea6O(1)\u67e5\u627e\n* \u628a\u6269\u5bb9\u540e\u7684\u64cd\u4f5c,\u5e73\u644a\u5230\u524d\u9762\u6bcf\u6b21\u64cd\u4f5c,\u65f6\u95f4\u590d\u6742\u5ea6O(2),\u90a3\u5c31\u662fO(1)\u4e86\n* @param newM\n*/\nvoid resize(int newM) {\ncout &lt;&lt; \"resize \" &lt;&lt; newM &lt;&lt; endl;\nmap&lt;Key, Value&gt; **newHashTable = new map&lt;Key, Value&gt; *[newM];\nfor (int i = 0; i &lt; newM; i++) {\nnewHashTable[i] = new map&lt;Key, Value&gt;;\n}\nint oldM = M;\nthis-&gt;M = newM;\nfor (int i = 0; i &lt; oldM; i++) {\nmap&lt;Key, Value&gt; m = *(hashtable[i]);\nfor (auto p:m)\nnewHashTable[hashFunc(p.first)]-&gt;insert(make_pair(p.first, p.second));\n}\n\nfree(oldM);\nthis-&gt;hashtable = newHashTable;\n}\n</code></pre> <p>\u91cd\u8f7d&lt;&lt; \u64cd\u4f5c\u7b26</p> <p>\u58f0\u660e\uff1a</p> <pre><code>private:\ntemplate&lt;typename K, typename V&gt;\n// \u91cd\u8f7d&lt;&lt;\u64cd\u4f5c\u7b26\nfriend ostream &amp;operator&lt;&lt;(ostream &amp;out, HashTable&lt;K, V&gt; &amp;hashTable);\n</code></pre> <p>\u5b9a\u4e49\uff1a</p> <pre><code>template&lt;typename K, typename V&gt;\nostream &amp;operator&lt;&lt;(ostream &amp;out, HashTable&lt;K, V&gt; &amp;hashTable) {\nhashTable.print();\nreturn out;\n}\n</code></pre> <p>\u81f3\u6b64\uff0c\u4e0a\u8ff0\u54c8\u5e0c\u8868\u5b9e\u73b0\u5b8c\u6bd5\uff0c\u73b0\u5728\u6765\u6d4b\u8bd5\uff1a</p> <pre><code>#include \"hash.h\"\n#include &lt;vector&gt;\nint main() {\n\nvector&lt;string&gt; words{\"java\", \"c++\", \"c\", \"c++\", \"c#\", \"python\", \"ruby\", \"python\",\n\"c\", \"c\", \"c++\", \"java\", \"c++\", \"rust\", \"python\"};\nHashTable&lt;string, int&gt; ht(1);\nfor (string word : words) {\nif (ht.contains(word)) {\nht.set(word, ht.get(word) + 1);\n} else {\nht.add(word, 1);\n}\n}\ncout&lt;&lt;ht;\ncout&lt;&lt;\"size=\"&lt;&lt;ht.getSize()&lt;&lt;\",maxCapacity=\"&lt;&lt;ht.maxCapacity()&lt;&lt;\",minCapacity=\"&lt;&lt;ht.minCapacity()&lt;&lt;endl;\nstring w=\"c++\";\nht.remove(w);\nif (ht.contains(w))\ncout &lt;&lt; \"\" &lt;&lt; w &lt;&lt; \": \" &lt;&lt; ht.get(w) &lt;&lt; endl;\nelse\ncout &lt;&lt; \"No word \" &lt;&lt; w &lt;&lt; \" in words\" &lt;&lt; endl;\ncout&lt;&lt;ht;\nht.remove(\"c#\");\nht.remove(\"java\");\nht.remove(\"c\");\ncout&lt;&lt;\"size=\"&lt;&lt;ht.getSize()&lt;&lt;\",maxCapacity=\"&lt;&lt;ht.maxCapacity()&lt;&lt;\",minCapacity=\"&lt;&lt;ht.minCapacity()&lt;&lt;endl;\ncout&lt;&lt;ht;\n\nreturn 0;\n}\n</code></pre> <p>\u8f93\u51fa\u7ed3\u679c\uff1a</p> <pre><code>resize 2\nresize 4\n{c#:1,java:2,ruby:1,c:3,rust:1,python:3,c++:4}\nsize=7,maxCapacity=12,minCapacity=4\nNo word c++ in words\n{c#:1,java:2,ruby:1,c:3,rust:1,python:3}\nresize 2\nsize=3,maxCapacity=6,minCapacity=2\n{python:3,ruby:1,rust:1}\n</code></pre> <p>\u81f3\u6b64\uff0c\u5b8c\u6210\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u54c8\u5e0c\u8868\u3002</p>"},{"location":"src_analysis/stl/myhashtable/#1_1","title":"1.\u4f18\u5316\u54c8\u5e0c\u8868","text":"<p>\u5728gcc2.9\u7248\u672c\u4e2d\uff0c\u5e95\u5c42\u7684\u54c8\u5e0c\u8868\u662f\u4ee5\u7d20\u6570\u4f5c\u4e3a\u5bb9\u91cf\u52a8\u6001\u4fee\u6539\u7684\uff0c\u56e0\u6b64\u8fd9\u91cc\u7684\u4f18\u5316\u4ece\u8fd9\u91cc\u51fa\u53d1\uff1a</p> <p>\u7c7b\u5185\u90e8\u5f00\u5934\u6dfb\u52a0\u4e0b\u9762\u6570\u7ec4\uff1a</p> <pre><code>// \u7d20\u6570\u6570\u7ec4\nconst vector&lt;int&gt; capacity = {53, 97, 193, 389, 769, 1543, 3079, 6151, 12289, 24593, 49157, 98317,\n196613, 393241, 786433, 1572869, 3145739, 6291469, 12582917, 25165843,\n50331653, 100663319, 201326611, 402653189, 805306457, 1610612741};\n</code></pre> <p>\u53bb\u6389\u5e26\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff0c\u4fee\u6539\u9ed8\u8ba4\u6784\u9020\u4e3a\uff1a</p> <pre><code>/**\n* \u9ed8\u8ba4\u6784\u9020\n* @param M\n*/\nHashTable()  {\nM = capacity[capacityIndex], size = 0;\n// \u8fd9\u91cc\u7684\u62ec\u53f7\u662f\u4e3a\u4e86\u521d\u59cb\u5316\u4e3a0,\u8fd9\u5c31\u53ef\u4ee5\u4e0d\u7528\u5199\u4e0b\u9762\u7684\u4ee3\u7801,\u5f53\u7136\u5728\u540e\u9762add\u4e4b\u7c7b\u7684\u64cd\u4f5c,\u5c31\u4e0d\u9700\u8981\u52a8\u6001\u5206\u914d\u5185\u5b58.\n// this-&gt;hashtable = new map&lt;Key, Value&gt; *[M]();\nthis-&gt;hashtable = new map&lt;Key, Value&gt; *[M];\nfor (int i = 0; i &lt; M; i++) {\nthis-&gt;hashtable[i] = new map&lt;Key, Value&gt;;\n}\n}\n</code></pre> <p>\u4fee\u6539add\u51fd\u6570\uff1a \u5728size++\u540e\u6dfb\u52a0\u4e0b\u9762\u4ee3\u7801\uff1a</p> <pre><code>if (size &gt;= maxCapacity() &amp;&amp; capacityIndex + 1 &lt; capacity.size()) {\ncapacityIndex++;\nresize(capacity[M]);\n}\n</code></pre> <p>\u6bcf\u6b21resize\u4ececapacity\u4e2d\u53d6\u503c\u3002</p> <p>remove\u51fd\u6570\u4fee\u6539</p> <p>\u5728size--\u540e\u4fee\u6539\uff1a</p> <pre><code>if (size &lt; minCapacity() &amp;&amp; capacityIndex - 1 &gt;= 0) {\ncapacityIndex--;\nresize(capacityIndex);\n}\n</code></pre> <p>\u81f3\u6b64\uff0c\u54c8\u5e0c\u8868\u5b8c\u6210\uff01\u6d4b\u8bd5\u4ee3\u7801\u540c\u4e0a\u3002</p>"},{"location":"src_analysis/stl/queue_stack/","title":"C++ STL\u6e90\u7801\u5256\u6790\u4e4b\u5bb9\u5668\u914d\u63a5\u5668stack\u4e0equeue\u3001priority_queue","text":""},{"location":"src_analysis/stl/queue_stack/#0","title":"0.\u5bfc\u8bed","text":"<p>\u4e3a\u4f55stack\u4e0equeue\u4e0d\u88ab\u79f0\u4e3a\u5bb9\u5668\u5462\uff1f</p> <p>\u4e0b\u9762\u672c\u8282\u5e26\u7740\u8fd9\u4e2a\u95ee\u9898\u6765\u6df1\u5165\u6e90\u7801\u5206\u6790\u3002</p>"},{"location":"src_analysis/stl/queue_stack/#1stack","title":"1.stack","text":"<p>\u5728stack\u7684\u6e90\u7801\u4e2d\u6211\u4eec\u5173\u6ce8\u4e24\u70b9\uff1a - \u9ed8\u8ba4<code>_Sequence</code>\u4e3a<code>deque</code> - \u5185\u90e8\u51fd\u6570\u5b9e\u73b0\u662f\u8c03\u7528<code>_Sequence</code>\u5bf9\u5e94\u5bb9\u5668\u7684\u51fd\u6570\u3002</p> <p></p> <pre><code>template&lt;typename _Tp, typename _Sequence = deque&lt;_Tp&gt; &gt;\nclass stack\n{\n\npublic:\ntypedef typename _Sequence::value_type                value_type;\ntypedef typename _Sequence::reference                 reference;\ntypedef typename _Sequence::const_reference           const_reference;\ntypedef typename _Sequence::size_type                 size_type;\ntypedef          _Sequence                            container_type;\n\nprotected:\n//  See queue::c for notes on this name.\n_Sequence c;\n\npublic:\nreference\ntop()\n{\n__glibcxx_requires_nonempty();\nreturn c.back();\n}\nvoid\npush(const value_type&amp; __x)\n{ c.push_back(__x); }\n}\n</code></pre> <p>\u6d4b\u8bd5stack\u5e95\u5c42\u5bb9\u5668</p> <p>\u5bf9\u4e8estack\u6765\u8bf4\uff0c\u5e95\u5c42\u5bb9\u5668\u53ef\u4ee5\u662f<code>vector</code>\u3001<code>deque</code>\u3001<code>list</code>\uff0c\u4f46\u4e0d\u53ef\u4ee5\u662f<code>map</code>\u3001<code>set</code>\u3002 \u7531\u4e8e\u7f16\u8bd1\u5668\u4e0d\u4f1a\u505a\u5168\u9762\u6027\u68c0\u67e5\uff0c\u5f53\u8c03\u7528\u51fd\u6570\u4e0d\u5b58\u5728\u7684\u65f6\u5019\uff0c\u5c31\u7f16\u8bd1\u4e0d\u901a\u8fc7\uff0c\u6240\u4ee5\u5bf9\u4e8e\u50cfset\u867d\u7136\u4e0d\u80fd\u4f5c\u4e3a\u5e95\u5c42\u5bb9\u5668\uff0c\u4f46\u5982\u679c\u5177\u6709\u67d0\u4e9b\u51fd\u6570\uff0c\u8c03\u7528\u4ecd\u7136\u662f\u6210\u529f\u7684\uff0c\u76f4\u5230\u8c03\u7528\u7684\u51fd\u6570\u4e0d\u5b58\u5728\u3002</p> <pre><code>int test_stack() {\ncout&lt;&lt;\"============test_stack=============\"&lt;&lt;endl;\nclock_t timeStart = clock();\nstack&lt;int, list&lt;int&gt;&gt; c;\nfor (long i = 0; i &lt; 100000; i++)\nc.push(i+1);\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.top()= \" &lt;&lt; c.top() &lt;&lt; endl;\nc.pop();\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.top()= \" &lt;&lt; c.top() &lt;&lt; endl;\ncout &lt;&lt; \"use stack milli-seconds : \" &lt;&lt; (clock() - timeStart) &lt;&lt; endl;\ntimeStart=clock();\nstack&lt;int, deque&lt;int&gt;&gt; c1;\nfor (long i = 0; i &lt; 100000; i++)\nc1.push(i+1);\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c1.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.top()= \" &lt;&lt; c1.top() &lt;&lt; endl;\nc1.pop();\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c1.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.top()= \" &lt;&lt; c1.top() &lt;&lt; endl;\ncout &lt;&lt; \"use stack milli-seconds : \" &lt;&lt; (clock() - timeStart) &lt;&lt; endl;\n\n// vector\u53ef\u4ee5\u4f5c\u4e3astack\u7684\u5e95\u5c42\u5bb9\u5668\nstack&lt;int, vector&lt;int&gt;&gt; c2;\nfor (long i = 0; i &lt; 100000; i++)\nc2.push(i+1);\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c2.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.top()= \" &lt;&lt; c2.top() &lt;&lt; endl;\nc2.pop();\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c2.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.top()= \" &lt;&lt; c2.top() &lt;&lt; endl;\ncout &lt;&lt; \"use stack milli-seconds : \" &lt;&lt; (clock() - timeStart) &lt;&lt; endl;\n}\n</code></pre>"},{"location":"src_analysis/stl/queue_stack/#2queue","title":"2.queue","text":"<p>\u5728queue\u7684\u6e90\u7801\u4e2d\u6211\u4eec\u5173\u6ce8\u4e24\u70b9\uff1a - \u9ed8\u8ba4<code>_Sequence</code>\u4e3a<code>deque</code> - \u5185\u90e8\u51fd\u6570\u5b9e\u73b0\u662f\u8c03\u7528<code>_Sequence</code>\u5bf9\u5e94\u5bb9\u5668\u7684\u51fd\u6570\u3002</p> <pre><code>template&lt;typename _Tp, typename _Sequence = deque&lt;_Tp&gt; &gt;\nclass queue\n{\npublic:\ntypedef typename _Sequence::value_type                value_type;\ntypedef typename _Sequence::reference                 reference;\ntypedef typename _Sequence::const_reference           const_reference;\ntypedef typename _Sequence::size_type                 size_type;\ntypedef          _Sequence                            container_type;\n\nprotected:\n\n_Sequence c;\n\npublic:\n\nvoid push(const value_type&amp; __x)\n{ c.push_back(__x); }\n\nvoid pop()\n{ __glibcxx_requires_nonempty();\nc.pop_front();\n}\n}\n</code></pre> <p>\u5176\u5bf9\u5e94\u7684UML\u7c7b\u56fe\u5982\u4e0b\uff1a</p> <p></p> <p>\u540c\u7406\uff0c\u4f18\u5148\u961f\u5217\u5219\u662f\u4f7f\u7528<code>vector</code>\u4f5c\u4e3a\u9ed8\u8ba4\u5bb9\u5668\u3002</p> <pre><code>template&lt;typename _Tp, typename _Sequence = vector&lt;_Tp&gt;,\ntypename _Compare  = less&lt;typename _Sequence::value_type&gt; &gt;\nclass priority_queue\n{\npublic:\ntypedef typename _Sequence::value_type                value_type;\ntypedef typename _Sequence::reference                 reference;\ntypedef typename _Sequence::const_reference           const_reference;\ntypedef typename _Sequence::size_type                 size_type;\ntypedef          _Sequence                            container_type;\n\nprotected:\n//  See queue::c for notes on these names.\n_Sequence  c;\n_Compare   comp;\n\npublic:\nreference\ntop() {\n__glibcxx_requires_nonempty();\nreturn c.front();\n}\n\nvoid\npush(const value_type&amp; __x)\n{\nc.push_back(__x);\nstd::push_heap(c.begin(), c.end(), comp);\n}\n\n}\n</code></pre> <p></p> <p>\u6d4b\u8bd5\u8fd9\u4e24\u4e2a\u5bb9\u5668\u914d\u63a5\u5668\u652f\u6301\u7684\u5e95\u5c42\u5bb9\u5668\uff1a</p> <p>queue</p> <p>\u5bf9\u4e8equeue\u5e95\u5c42\u5bb9\u5668\u53ef\u4ee5\u662f<code>deque</code>\uff0c\u4e5f\u53ef\u4ee5\u662f<code>list</code>\uff0c\u4f46\u4e0d\u80fd\u662f<code>vector</code>,<code>map</code>,<code>set</code>\uff0c\u4f7f\u7528\u9ed8\u8ba4\u7684deque\u6548\u7387\u5728\u63d2\u5165\u65b9\u9762\u6bd4\u5176\u4ed6\u5bb9\u5668\u4f5c\u4e3a\u5e95\u5c42\u8981\u5feb\uff01</p> <pre><code>int test_queue() {\ncout&lt;&lt;\"============test_queue=============\"&lt;&lt;endl;\nclock_t timeStart = clock();\nqueue&lt;int, list&lt;int&gt;&gt; c;\nfor (long i = 0; i &lt; 100000; i++) {\nc.push(i+1);\n}\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.front()= \" &lt;&lt; c.front() &lt;&lt; endl;\nc.pop();\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.front()= \" &lt;&lt; c.front() &lt;&lt; endl;\ncout &lt;&lt; \"use list milli-seconds : \" &lt;&lt; (clock() - timeStart) &lt;&lt; endl;\n\ntimeStart=clock();\nqueue&lt;int, deque&lt;int&gt;&gt; c1;\nfor (long i = 0; i &lt; 100000; i++) {\nc1.push(i+1);\n}\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c1.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.front()= \" &lt;&lt; c1.front() &lt;&lt; endl;\nc1.pop();\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c1.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.front()= \" &lt;&lt; c1.front() &lt;&lt; endl;\n\ncout &lt;&lt; \"use deque milli-seconds : \" &lt;&lt; (clock() - timeStart) &lt;&lt; endl;\n}\n</code></pre> <p>priority_queue</p> <p>\u5bf9\u4e8e\u4f18\u5148\u961f\u5217\u6765\u8bf4\uff0c\u6d4b\u8bd5\u7ed3\u679c\u53d1\u73b0\uff0c\u91c7\u7528<code>deque</code>\u8981\u6bd4\u9ed8\u8ba4\u7684<code>vector</code>\u63d2\u5165\u901f\u5ea6\u5feb\uff01 \u5e95\u5c42\u652f\u6301vector\u3001deque\u5bb9\u5668\uff0c\u4f46\u4e0d\u652f\u6301list\u3001map\u3001set\u3002</p> <pre><code>int test_priority_queue() {\ncout&lt;&lt;\"============test_priority_queue=============\"&lt;&lt;endl;\nclock_t timeStart = clock();\n\npriority_queue&lt;int, deque&lt;int&gt;&gt; c1;\nfor (long i = 0; i &lt; 100000; i++) {\nc1.push(i+1);\n}\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c1.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.top()= \" &lt;&lt; c1.top() &lt;&lt; endl;\nc1.pop();\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c1.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.top()= \" &lt;&lt; c1.top() &lt;&lt; endl;\n\ncout &lt;&lt; \"use deque milli-seconds : \" &lt;&lt; (clock() - timeStart) &lt;&lt; endl;\n\n\npriority_queue&lt;int, vector&lt;int&gt;&gt; c2;\nfor (long i = 0; i &lt; 100000; i++)\nc2.push(i+1);\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c2.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.top()= \" &lt;&lt; c2.top() &lt;&lt; endl;\nc2.pop();\ncout &lt;&lt; \"stack.size()= \" &lt;&lt; c2.size() &lt;&lt; endl;\ncout &lt;&lt; \"stack.top()= \" &lt;&lt; c2.top() &lt;&lt; endl;\ncout &lt;&lt; \"use stack milli-seconds : \" &lt;&lt; (clock() - timeStart) &lt;&lt; endl;\n}\n</code></pre> <p>\u56e0\u6b64\uff0cstack\u3001queue\u3001priority_queue\u4e0d\u88ab\u79f0\u4e3a\u5bb9\u5668\uff0c \u628a\u5b83\u79f0\u4e3a\u5bb9\u5668\u914d\u63a5\u5668\u3002</p>"},{"location":"src_analysis/stl/rb_tree/","title":"C++ STL\u6e90\u7801\u5256\u6790\u4e4b\u7ea2\u9ed1\u6811","text":""},{"location":"src_analysis/stl/rb_tree/#0","title":"0.\u5bfc\u8bed","text":"<p>\u5728STL\u6e90\u7801\u4e2d\u6709\u4e24\u6bb5\u8bdd\uff0c\u7b80\u5355\u7ffb\u8bd1\u540e\u5982\u4e0b\uff1a</p> <p>STL\u4e2dRed-black tree\uff08\u7ea2\u9ed1\u6811\uff09class,\u7528\u6765\u5f53\u505aSLT\u5173\u7cfb\u5f0f\u5bb9\u5668\uff08\u5982set,multiset,map,  multimap\uff09.\u91cc\u9762\u6240\u7528\u7684insertion\u548cdeletion\u65b9\u6cd5\u4ee5 \u300aIntroduction to Algorithms\u300b\u4e00\u4e66\u4e3a\u57fa\u7840,\u4f46\u662f\u6709\u4ee5\u4e0b\u4e24\u70b9\u4e0d\u540c: </p> <p>(1)header\u4e0d\u4ec5\u6307\u5411root,\u4e5f\u6307\u5411\u7ea2\u9ed1\u6811\u7684\u6700\u5de6\u8282\u70b9,\u4ee5\u4fbf\u7528\u5e38\u6570\u65f6\u95f4\u5b9e\u73b0begin(),\u5e76\u4e14\u4e5f\u6307\u5411\u7ea2\u9ed1\u6811\u7684\u6700\u53f3\u8fb9\u8282\u70b9,\u4ee5\u4fbf  set\u76f8\u5173\u6cdb\u578b\u7b97\u6cd5\uff08\u5982set_union\u7b49\u7b49\uff09\u53ef\u4ee5\u6709\u7ebf\u6027\u65f6\u95f4\u8868\u73b0.</p> <p>(2)\u5f53\u8981\u5220\u9664\u7684\u8282\u70b9\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u65f6\uff0c\u5176\u540e\u7ee7\u8282\u70b9\u8fde\u63a5\u5230\u5176\u4f4d\u7f6e\uff0c\u800c\u4e0d\u662f\u88ab\u590d\u5236\uff0c\u56e0\u6b64\uff0c\u552f\u4e00\u4f7f\u65e0\u6548\u7684\u8fed\u4ee3\u5668\u662f\u5f15\u7528\u5df2\u5220\u9664\u8282\u70b9\u7684\u8fed\u4ee3\u5668\u3002</p> <p>\u4e0a\u8ff0\u8bdd\u7ffb\u8bd1\u6210\u56fe\uff0c\u5982\u4e0b\uff0c\u76f8\u6bd4\u4e8e\u666e\u901a\u7684\u7ea2\u9ed1\u6811\u591a\u4e86\u4e00\u4e2aheader\u8282\u70b9\uff0c\u5e76\u4e14\u4e3a\u7ea2\u8272\u3002\u666e\u901a\u7684\u7ea2\u9ed1\u6811\u662f\u4ee5100\u8282\u70b9\u5f00\u59cb\u7684\uff0c\u4e14\u6ee1\u8db3\u4e0b\u9762\u4e94\u6761\u6027\u8d28\uff1a - \u6bcf\u4e2a\u8282\u70b9\u6216\u662f\u7ea2\u8272\u7684,\u6216\u662f\u9ed1\u8272\u7684. - \u6839\u8282\u70b9\u662f\u9ed1\u8272\u7684. - \u6bcf\u4e2a\u53f6\u8282\u70b9\uff08NULL\uff09\u662f\u9ed1\u8272\u7684. - \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u662f\u7ea2\u8272\u7684\uff0c\u5219\u5b83\u7684\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u90fd\u662f\u9ed1\u8272\u7684. - \u5bf9\u6bcf\u4e2a\u8282\u70b9\uff0c\u4ece\u8be5\u8282\u70b9\u5230\u5176\u6240\u6709\u540e\u4ee3\u53f6\u8282\u70b9\u7684\u7b80\u5355\u8def\u5f84\u4e0a\uff0c\u5747\u5305\u542b\u76f8\u540c\u6570\u76ee\u7684\u9ed1\u8272\u8282\u70b9.</p> <p>\u5f53\u7136\u8fd9\u91cc\u7684rb_tree\u4e5f\u662f\u4e00\u6837\u6ee1\u8db3\u8fd9\u51e0\u6761\u6027\u8d28\uff0c\u8fed\u4ee3\u5668\u7684begin\u6307\u5411\u7ea2\u9ed1\u6811\u6839\u8282\u70b9\uff0c\u4e5f\u5c31\u662fheader\u7684\u7236\u4eb2\uff0c\u800cend\u6307\u5411header\u8282\u70b9\u3002</p> <p>\u3002 \u56fe\u4e2d\u7701\u7565\u53f7\u8868\u793a\u8282\u70b9\u6ca1\u6709\u753b\u5b8c\uff0c\u8fd8\u6709\u5176\u4ed6\u8282\u70b9\uff0c\u6240\u4ee5\u7701\u7565\u3002</p>"},{"location":"src_analysis/stl/rb_tree/#1","title":"1.\u7ea2\u9ed1\u6811\u8282\u70b9\u57fa\u7c7b","text":"<p>\u7ea2\u9ed1\u6811\u57fa\u7c7b\uff0c\u975e\u5e38\u7b80\u5355\uff0c\u5728\u6587\u4ef6\u5f00\u5934\u5b9a\u4e49\u4e86\u989c\u8272\u6807\u8bb0\u3002</p> <p>\u57fa\u7c7b\u4e2d\u5305\u542b\u4e86\u6307\u5411\u81ea\u5df1\u7684\u6307\u9488\uff0c\u5206\u522b\u5b9a\u4e49\u4e86left\u3001right\u3001parent\uff0c\u540c\u65f6\u5305\u542b\u4e86\u4e00\u4e2a\u989c\u8272\u6807\u8bb0\u5e38\u91cf\uff0c\u800c\u91cc\u9762\u6709\u4e24\u4e2a\u6838\u5fc3\u51fd\u6570\uff0c\u76ee\u7684\u662f\u83b7\u53d6\u7ea2\u9ed1\u6811\u4e2d\u6700\u5c0f\u8282\u70b9\u4e0e\u6700\u5927\u8282\u70b9\u3002 \u6211\u4eec\u77e5\u9053\u5bf9\u4e8e\u4e8c\u5206\u641c\u7d22\u6811\u83b7\u53d6\u6700\u5c0f\u8282\u70b9\u5c31\u662f\u5de6\u5b50\u6811\u4e00\u76f4\u5f80\u4e0b\u641c\uff0c\u6700\u5927\u8282\u70b9\u5c31\u662f\u53f3\u5b50\u6811\u4e00\u76f4\u5f80\u4e0b\u641c\u5373\u53ef\u3002</p> <pre><code>// \u989c\u8272\u6807\u8bb0\nenum _Rb_tree_color { _S_red = false, _S_black = true };\n\n// \u57fa\u7c7b\nstruct _Rb_tree_node_base\n{\n// typedef\u91cd\u547d\u540d\ntypedef _Rb_tree_node_base* _Base_ptr;\n\n// \u989c\u8272\n_Rb_tree_color  _M_color;\n// \u6307\u5411\u7236\u4eb2\n_Base_ptr       _M_parent;\n// \u6307\u5411\u5de6\u5b69\u5b50\n_Base_ptr       _M_left;\n// \u6307\u5411\u53f3\u5b69\u5b50\n_Base_ptr       _M_right;\n\n// \u6c42\u7ea2\u9ed1\u6811\u7684\u6700\u5c0f\u8282\u70b9\nstatic _Base_ptr\n_S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT\n{\nwhile (__x-&gt;_M_left != 0) __x = __x-&gt;_M_left;\nreturn __x;\n}\n\n// \u6c42\u7ea2\u9ed1\u6811\u6700\u5927\u8282\u70b9\nstatic _Base_ptr\n_S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT\n{\nwhile (__x-&gt;_M_right != 0) __x = __x-&gt;_M_right;\nreturn __x;\n}\n\n};\n</code></pre>"},{"location":"src_analysis/stl/rb_tree/#2","title":"2.\u7ea2\u9ed1\u6811\u8282\u70b9","text":"<p>\u7ea2\u9ed1\u6811\u8282\u70b9\u7ee7\u627f\u81ea\u7ea2\u9ed1\u6811\u57fa\u7c7b\u3002</p> <pre><code>template&lt;typename _Val&gt;\nstruct _Rb_tree_node : public _Rb_tree_node_base\n{\ntypedef _Rb_tree_node&lt;_Value&gt;* _Link_type;//\u8282\u70b9\u6307\u9488,\u6307\u5411\u6570\u636e\u8282\u70b9\n_Value _M_value_field;//\u8282\u70b9\u6570\u636e\u57df,\u5373\u5173\u952e\u5b57\n};\n</code></pre>"},{"location":"src_analysis/stl/rb_tree/#3","title":"3.\u7ea2\u9ed1\u6811\u8fed\u4ee3\u5668","text":"<p>\u7ea2\u9ed1\u6811\u8fed\u4ee3\u5668\u91cc\u9762\u6709\u4e00\u4e2a\u7ea2\u9ed1\u6811\u57fa\u7c7b\u6210\u5458\uff0c\u7136\u540e\u901a\u8fc7\u8be5\u6210\u5458\u8fdb\u884c\u8fed\u4ee3\u5668\u7684\u76f8\u5173\u64cd\u4f5c\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8be5\u8fed\u4ee3\u5668\u5c5e\u4e8e<code>bidirectional_iterator_tag</code>\u3002</p> <p>\u91cc\u9762\u4e5f\u5305\u542b\u4e86\u8403\u53d6\u673a\u76f8\u5173\u9700\u8981\u7684typedef\u3002</p> <pre><code>template&lt;typename _Tp&gt;\nstruct _Rb_tree_iterator\n{\ntypedef _Tp  value_type;\ntypedef _Tp&amp; reference;\ntypedef _Tp* pointer;\n\ntypedef bidirectional_iterator_tag iterator_category;\ntypedef ptrdiff_t                  difference_type;\n\ntypedef _Rb_tree_iterator&lt;_Tp&gt;        _Self;\ntypedef _Rb_tree_node_base::_Base_ptr _Base_ptr;\ntypedef _Rb_tree_node&lt;_Tp&gt;*           _Link_type;\n\n_Base_ptr _M_node;\n};   </code></pre> <p>\u83b7\u53d6\u6570\u636e</p> <pre><code>reference\noperator*() const _GLIBCXX_NOEXCEPT\n{ return *static_cast&lt;_Link_type&gt;(_M_node)-&gt;_M_valptr(); }\n\npointer\noperator-&gt;() const _GLIBCXX_NOEXCEPT\n{ return static_cast&lt;_Link_type&gt; (_M_node)-&gt;_M_valptr(); }\n</code></pre> <p>\u91cd\u8f7d++\u64cd\u4f5c\u7b26</p> <pre><code>_Self&amp;\noperator++() _GLIBCXX_NOEXCEPT\n{\n_M_node = _Rb_tree_increment(_M_node);\nreturn *this;\n}\n</code></pre> <p>\u800c<code>_Rb_tree_increment</code>\u5e95\u5c42\u662f<code>local_Rb_tree_increment</code>\uff0c\u5982\u4e0b\u5b9e\u73b0\uff1a</p> <pre><code>static _Rb_tree_node_base *\nlocal_Rb_tree_increment( _Rb_tree_node_base* __x ) throw ()\n{\nif ( __x-&gt;_M_right != 0 )       /* \u5b58\u5728\u53f3\u5b50\u6811,\u90a3\u4e48\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8282\u70b9 */\n{\n__x = __x-&gt;_M_right;\nwhile ( __x-&gt;_M_left != 0 )\n__x = __x-&gt;_M_left;\n}else  {                        /* \u4e0d\u5b58\u5728\u53f3\u5b50\u6811,\u90a3\u4e48\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a\u81ea\u5e95\u5f80\u4e0a\u641c\u7d22,\u5f53\u524d\u8282\u70b9\u4e3a\u7236\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u7684\u65f6\u5019,\u7236\u8282\u70b9\u5c31\u662f\u540e\u7ee7\u8282\u70b9\uff1b */\n/* \u7b2c\u4e8c\u79cd\u60c5\u51b5:_x\u4e3aheader\u8282\u70b9\u4e86,\u90a3\u4e48_x\u5c31\u662f\u6700\u540e\u7684\u540e\u7ee7\u8282\u70b9. \u7b80\u8a00\u4e4b_x\u4e3a\u6700\u5c0f\u8282\u70b9\u4e14\u5f80\u4e0a\u56de\u6eaf,\u4e00\u76f4\u4e3a\u7236\u8282\u70b9\u7684\u53f3\u5b69\u5b50,\u76f4\u5230_x\u53d8\u4e3a\u7236\u8282\u70b9,_y\u4e3a\u5176\u53f3\u5b69\u5b50 */\n_Rb_tree_node_base *__y = __x-&gt;_M_parent;\nwhile ( __x == __y-&gt;_M_right )\n{\n__x = __y;\n__y = __y-&gt;_M_parent;\n}\nif ( __x-&gt;_M_right != __y )\n__x = __y;\n}\nreturn (__x);\n}\n</code></pre> <p>\u91cd\u8f7d--\u64cd\u4f5c\u7b26\uff1a</p> <pre><code>_Self&amp;\noperator--() _GLIBCXX_NOEXCEPT\n{\n_M_node = _Rb_tree_decrement(_M_node);\nreturn *this;\n}\n</code></pre> <p>\u540c\u7406\uff0c\u800c<code>_Rb_tree_decrement</code>\u5e95\u5c42\u662f<code>local_Rb_tree_decrement</code>\uff0c\u5982\u4e0b\u5b9e\u73b0\uff1a</p> <pre><code>static _Rb_tree_node_base *\nlocal_Rb_tree_decrement( _Rb_tree_node_base * __x )\nthrow ()\n{\n/* header\u8282\u70b9 */\nif ( __x-&gt;_M_color ==\n_S_red\n&amp;&amp; __x\n-&gt;_M_parent-&gt;_M_parent == __x )\n__x = __x-&gt;_M_right;\nelse if ( __x-&gt;_M_left != 0 ) /* \u5de6\u8282\u70b9\u4e0d\u4e3a\u7a7a,\u8fd4\u56de\u5de6\u5b50\u6811\u4e2d\u6700\u5927\u7684\u8282\u70b9 */\n{\n_Rb_tree_node_base *__y = __x-&gt;_M_left;\nwhile ( __y-&gt;_M_right != 0 )\n__y = __y-&gt;_M_right;\n__x = __y;\n}else  {\n/* \u81ea\u5e95\u5411\u4e0a\u627e\u5230\u5f53\u524d\u8282\u70b9\u4e3a\u5176\u7236\u8282\u70b9\u7684\u53f3\u5b69\u5b50,\u90a3\u4e48\u7236\u8282\u70b9\u5c31\u662f\u524d\u9a71\u8282\u70b9 */\n_Rb_tree_node_base *__y = __x-&gt;_M_parent;\nwhile ( __x == __y-&gt;_M_left )\n{\n__x = __y;\n__y = __y-&gt;_M_parent;\n}\n__x = __y;\n}\nreturn\n(__x);\n}\n</code></pre> <p>\u91cd\u8f7d==\u4e0e!=\u64cd\u4f5c\u7b26\uff0c\u76f4\u63a5\u5224\u65ad\u8282\u70b9\u6307\u9488\u662f\u5426\u76f8\u7b49\u3002</p> <pre><code>bool\noperator==(const _Self&amp; __x) const _GLIBCXX_NOEXCEPT\n{ return _M_node == __x._M_node; }\n\nbool\noperator!=(const _Self&amp; __x) const _GLIBCXX_NOEXCEPT\n{ return _M_node != __x._M_node; }\n</code></pre> <p>\u5176\u4ed6\u91cd\u8981\u51fd\u6570\uff0c\u9ed1\u8282\u70b9\u7edf\u8ba1\uff1a</p> <pre><code>unsigned int\n_Rb_tree_black_count(const _Rb_tree_node_base *__node,\nconst _Rb_tree_node_base *__root) throw() {\nif (__node == 0)\nreturn 0;\nunsigned int __sum = 0;\ndo {\nif (__node-&gt;_M_color == _S_black)\n++__sum;\nif (__node == __root)\nbreak;\n__node = __node-&gt;_M_parent;\n} while (1);\nreturn __sum;\n}\n</code></pre> <p>\u540e\u9762\u6765\u9610\u8ff0\u6700\u91cd\u8981\u7684\u63d2\u5165\u64cd\u4f5c\u3002</p>"},{"location":"src_analysis/stl/rb_tree/#4","title":"4.\u7ea2\u9ed1\u6811\u64cd\u4f5c","text":"<p>\u6bd4\u8f83\u91cd\u8981\u7684\u662f\uff0c\u91cc\u9762\u4f7f\u7528\u8282\u70b9\u57fa\u7c7b\u6765\u58f0\u660e\u4e86\u4e00\u4e2a\u6307\u9488\u3002\u8fd8\u5305\u542b\u4e86\u4e00\u4e2a<code>_Rb_tree_impl</code>\u7528\u6765\u5bf9\u7ea2\u9ed1\u6811\u521d\u59cb\u5316\u64cd\u4f5c\u4e0e\u5185\u5b58\u7ba1\u7406\u64cd\u4f5c\u3002\u91cc\u9762\u8fd8\u5305\u542b\u4e86\u4e24\u79cd\u8fed\u4ee3\u5668\uff0c\u4e00\u4e2arbtree\uff0c\u53e6\u4e00\u4e2a\u662freverse\uff0c\u8bf4\u660e\u652f\u6301rbegin,rend\u64cd\u4f5c\u3002</p> <pre><code>template&lt;typename _Key, typename _Val, typename _KeyOfValue,\ntypename _Compare, typename _Alloc = allocator&lt;_Val&gt; &gt;\nclass _Rb_tree\n{\n\nprotected:\ntypedef _Rb_tree_node_base*         _Base_ptr;\n\ntemplate&lt;typename _Key_compare, bool _Is_pod_comparator = __is_pod(_Key_compare)&gt;\nstruct _Rb_tree_impl : public _Node_allocator\n{\n_Key_compare      _M_key_compare;\n_Rb_tree_node_base    _M_header;\nsize_type         _M_node_count; // Keeps track of size of tree.\n\n_Rb_tree_impl()\n: _Node_allocator(), _M_key_compare(), _M_header(),\n_M_node_count(0)\n{ _M_initialize(); }\n\n_Rb_tree_impl(const _Key_compare&amp; __comp, const _Node_allocator&amp; __a)\n: _Node_allocator(__a), _M_key_compare(__comp), _M_header(),\n_M_node_count(0)\n{ _M_initialize(); }\n\nprivate:\nvoid\n_M_initialize()\n{\nthis-&gt;_M_header._M_color = _S_red;\nthis-&gt;_M_header._M_parent = 0;\nthis-&gt;_M_header._M_left = &amp;this-&gt;_M_header;\nthis-&gt;_M_header._M_right = &amp;this-&gt;_M_header;\n}  };\npublic: typedef _Rb_tree_iterator&lt;value_type&gt;       iterator;\ntypedef std::reverse_iterator&lt;iterator&gt;     reverse_iterator; private:\n_Rb_tree_impl&lt;_Compare&gt; _M_impl;\n};\n</code></pre> <p>\u83b7\u53d6\u7ea2\u9ed1\u6811\u6839\u8282\u70b9\u3001\u6700\u5de6\u4e0e\u6700\u53f3\u8282\u70b9</p> <p>\u56de\u5230\u4e00\u5f00\u59cb\u7684\u56fe\uff1a \u3002</p> <pre><code>// \u56fe\u4e2d100 \u8282\u70b9\n_Base_ptr&amp;\n_M_root() _GLIBCXX_NOEXCEPT\n{ return this-&gt;_M_impl._M_header._M_parent; }\n\n// \u56fe\u4e2dmost left\u6807\u8bb0\n_Base_ptr&amp;\n_M_leftmost() _GLIBCXX_NOEXCEPT\n{ return this-&gt;_M_impl._M_header._M_left; }\n\n\n// \u56fe\u4e2dmost right\u6807\u8bb0\n_Base_ptr&amp;\n_M_rightmost() _GLIBCXX_NOEXCEPT\n{ return this-&gt;_M_impl._M_header._M_right; }\n_Link_type\n\n// \u56fe\u4e2dbegin()\u6807\u8bb0\n_M_begin() _GLIBCXX_NOEXCEPT\n{ return static_cast&lt;_Link_type&gt;(this-&gt;_M_impl._M_header._M_parent); }\n\n// \u56fe\u4e2dend()\u6807\u8bb0\n_Link_type\n_M_end() _GLIBCXX_NOEXCEPT\n{ return reinterpret_cast&lt;_Link_type&gt;(&amp;this-&gt;_M_impl._M_header); }\n</code></pre> <p>\u6211\u4eec\u518d\u770b\u4ee3\u7801\u662f\u4e0d\u662f\u975e\u5e38\u6e05\u6670\uff01</p>"},{"location":"src_analysis/stl/rb_tree/#5","title":"5.\u7ea2\u9ed1\u6811\u63d2\u5165","text":""},{"location":"src_analysis/stl/rb_tree/#51","title":"5.1 \u65cb\u8f6c\u8fc7\u7a0b","text":"<p>\u5de6\u65cb\u8f6c\u662f\u5c06\u8be5\u8282\u70b9\u7684\u53f3\u8282\u70b9\u8bbe\u7f6e\u4e3a\u5b83\u7684\u7236\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u5c06\u53d8\u6210\u521a\u624d\u53f3\u8282\u70b9\u7684\u5de6\u5b69\u5b50</p> <p>\u76f4\u63a5\u770b\u6e90\u7801\u4e2d\u7684\u56fe\u4e0e\u4ee3\u7801\u5bf9\u6bd4\u5373\u53ef\u3002</p> <p>\u5728<code>tree.cc</code>\u6e90\u7801\u4e2d\u5b9e\u73b0\u51fd\u6570\u4e3a<code>local_Rb_tree_rotate_left</code>\u4e0e<code>local_Rb_tree_rotate_right</code>\u3002 \u4e0b\u9762\u6211\u4eec\u5c06\u6e90\u7801\u8fdb\u884c\u5256\u6790\u6210\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\u7684\u4ee3\u7801\uff0c\u5177\u4f53\u89c1\u6ce8\u91ca\u3002 \u5927\u5bb6\u4f1a\u53d1\u73b0\u51fd\u6570\u540d\u4e0e\u53d8\u91cf\u540d\u4e0e\u6e90\u7801\u4e0d\u540c\uff0c\u662f\u56e0\u4e3a\u4e0b\u9762\u662f\u5f53\u65f6\u81ea\u5df1\u5b9e\u73b0\u7684\uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\u6e90\u7801\u9605\u8bfb\uff0c\u5c31\u76f4\u63a5\u62ff\u6765\u5bf9\u6bd4\u4e86\u3002</p> <pre><code>/**\n* \u5f53\u524d\u8282\u70b9\u7684\u5de6\u65cb\u8f6c\u8fc7\u7a0b\n* \u5c06\u8be5\u8282\u70b9\u7684\u53f3\u8282\u70b9\u8bbe\u7f6e\u4e3a\u5b83\u7684\u7236\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u5c06\u53d8\u6210\u521a\u624d\u53f3\u8282\u70b9\u7684\u5de6\u5b69\u5b50\n* @param _x\n*/\n//    _x                      _y\n//  /   \\     \u5de6\u65cb\u8f6c         /  \\\n// T1   _y   ---------&gt;   _x    T3\n//     / \\              /   \\\n//    T2 T3            T1   T2\nvoid leftRotate(Node *_x) {\n// step1 \u5904\u7406_x\u7684\u53f3\u5b69\u5b50\n// \u53f3\u8282\u70b9\u53d8\u4e3a_x\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9,\u5148\u4fdd\u5b58\u4e00\u4e0b\u53f3\u8282\u70b9\nNode *_y = _x-&gt;right;\n// T2\u53d8\u4e3anode\u7684\u53f3\u8282\u70b9\n_x-&gt;right = _y-&gt;left;\nif (NULL != _y-&gt;left)\n_y-&gt;left-&gt;parent = _x;\n\n// step2 \u5904\u7406_y\u4e0e\u7236\u4eb2\u8282\u70b9\u5173\u7cfb\n_y-&gt;parent = _x-&gt;parent;      // \u539f\u6765_x\u7684\u7236\u4eb2\u53d8\u4e3a_y\u7684\u7236\u4eb2\n// \u8bf4\u660e\u539f\u6765_x\u4e3aroot\u8282\u70b9,\u6b64\u65f6\u9700\u8981\u5c06_y\u8bbe\u4e3a\u65b0root\u8282\u70b9\n// \u6216\u8005\u5224\u65adNULL == _y-&gt;parent\nif (_x == root)\nroot = _y;\nelse if (_x == _x-&gt;parent-&gt;left)    // \u539f_x\u7684\u7236\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u8fde\u63a5\u65b0\u8282\u70b9_y\n_x-&gt;parent-&gt;left = _y;\nelse // \u539f_x\u7684\u7236\u8282\u70b9\u7684\u53f3\u5b69\u5b50\u8fde\u63a5\u65b0\u8282\u70b9_y\n_x-&gt;parent-&gt;right = _y;\n\n// step3 \u5904\u7406_x\u4e0e_y\u5173\u7cfb\n_y-&gt;left = _x;      // _y\u7684\u5de6\u5b69\u5b50\u4e3a_x\n_x-&gt;parent = _y;    // _x\u7684\u7236\u4eb2\u662f_y\n}\n</code></pre> <p>\u540c\u7406\uff0c\u53f3\u65cb\u8f6c\u5982\u4e0b\uff1a</p> <pre><code>//        _x                      _y\n//      /   \\     \u53f3\u65cb\u8f6c         /  \\\n//     _y    T2 -------------&gt;  T0  _x\n//    /  \\                         /  \\\n//   T0  T1                       T1  T2\nvoid rightRotate(Node *_x) {\n// step1 \u5904\u7406_x\u7684\u5de6\u5b69\u5b50\n// \u5de6\u8282\u70b9\u53d8\u4e3a_x\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9,\u5148\u4fdd\u5b58\u4e00\u4e0b\u5de6\u8282\u70b9\nNode *_y = _x-&gt;left;\n// T1\u53d8\u4e3a_x\u7684\u5de6\u5b69\u5b50\n_x-&gt;left = _y-&gt;right;\nif (NULL != _y-&gt;right)\n_y-&gt;right-&gt;parent = _x;\n\n// step2 \u5904\u7406_y\u4e0e\u7236\u8282\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb\n// \u6216\u8005\u5224\u65ad_x-&gt;parent==NULL\nif (_x == root)\nroot = _y;\nelse if (_x == _x-&gt;parent-&gt;right)\n_x-&gt;parent-&gt;right = _y;\nelse\n_x-&gt;parent-&gt;left = _y;\n\n// step3 \u5904\u7406_x\u4e0e_y\u5173\u7cfb\n_y-&gt;right = _x;     // _y\u7684\u53f3\u5b69\u5b50\u4e3a_x\n_x-&gt;parent = _y;    // _x\u7684\u7236\u4eb2\u662f_y\n}\n</code></pre> <p>case 1.1: \u7236\u8282\u70b9\u4e3a\u7ea2\u8272\u4e14\u5176\u53d4\u53d4\u8282\u70b9\u4e5f\u4e3a\u7ea2\u8272\uff0c\u5219\u5c06\u7236\u4eb2\u3001\u53d4\u53d4\u7f6e\u4e3a\u9ed1\u8272\uff0c\u7956\u7236\u7f6e\u4e3a\u7ea2\u8272\u3002</p> <p></p> <p>case 1.2 \u82e5\u65e0\u53d4\u53d4\u8282\u70b9\u6216\u8005\u5176\u53d4\u53d4\u8282\u70b9\u4e3a\u9ed1\u8272\u5206\u4e3a\u4e0b\u9762\u4e24\u79cd\uff1a</p> <p>\u60c5\u51b51.2.1\uff1ax\u7684\u53d4\u53d4\u8282\u70b9y\u662f\u9ed1\u8272\u4e14x\u662f\u4e00\u4e2a\u53f3\u5b69\u5b50</p> <p></p> <p>\u60c5\u51b51.2.2\uff1ax\u7684\u53d4\u53d4\u8282\u70b9y\u662f\u9ed1\u8272\u4e14x\u662f\u4e00\u4e2a\u5de6\u5b69\u5b50</p> <p></p> <p>\u5bf9\u5e94\u6e90\u4ee3\u7801\u4e2d\uff1a</p> <pre><code>_Rb_tree_node_base *const __y = __xpp-&gt;_M_right;    // \u5f97\u5230\u53d4\u53d4\u8282\u70b9\nif (__y &amp;&amp; __y-&gt;_M_color == _S_red)     // case1: \u53d4\u53d4\u8282\u70b9\u5b58\u5728\uff0c\u4e14\u4e3a\u7ea2\u8272\n{\n/**\n        * \u89e3\u51b3\u529e\u6cd5\u662f\uff1a\u989c\u8272\u7ffb\u8f6c\uff0c\u7236\u4eb2\u4e0e\u53d4\u53d4\u7684\u989c\u8272\u90fd\u53d8\u4e3a\u9ed1\u8272,\u7956\u7236\u8282\u70b9\u53d8\u4e3a\u7ea2\u8272,\u7136\u540e\u5f53\u524d\u8282\u70b9\u8bbe\u4e3a\u7956\u7236\uff0c\u4f9d\u6b21\u7f51\u4e0a\u6765\u5224\u65ad\u662f\u5426\u7834\u574f\u4e86\u7ea2\u9ed1\u6811\u6027\u8d28\n        */\n__x-&gt;_M_parent-&gt;_M_color = _S_black;    // \u5c06\u5176\u7236\u8282\u70b9\u6539\u4e3a\u9ed1\u8272\n__y-&gt;_M_color = _S_black;               // \u5c06\u5176\u53d4\u53d4\u8282\u70b9\u6539\u4e3a\u9ed1\u8272\n__xpp-&gt;_M_color = _S_red;               // \u5c06\u5176\u7956\u7236\u8282\u70b9\u6539\u4e3a\u7ea2\u8272\n__x = __xpp;                            // \u4fee\u6539_x,\u5f80\u4e0a\u56de\u6eaf\n} else {        // \u65e0\u53d4\u53d4\u6216\u8005\u53d4\u53d4\u4e3a\u9ed1\u8272\nif (__x == __x-&gt;_M_parent-&gt;_M_right) {          // \u5f53\u524d\u8282\u70b9\u4e3a\u7236\u4eb2\u8282\u70b9\u7684\u53f3\u5b69\u5b50\n__x = __x-&gt;_M_parent;\nlocal_Rb_tree_rotate_left(__x, __root);     // \u4ee5\u7236\u8282\u70b9\u8fdb\u884c\u5de6\u65cb\u8f6c\n}\n// \u65cb\u8f6c\u4e4b\u540e,\u8282\u70b9x\u53d8\u6210\u5176\u7236\u8282\u70b9\u7684\u5de6\u5b69\u5b50\n__x-&gt;_M_parent-&gt;_M_color = _S_black;            // \u5c06\u5176\u7236\u4eb2\u8282\u70b9\u6539\u4e3a\u9ed1\u8272\n__xpp-&gt;_M_color = _S_red;                       // \u5c06\u5176\u7956\u7236\u8282\u70b9\u6539\u4e3a\u7ea2\u8272\nlocal_Rb_tree_rotate_right(__xpp, __root);      // \u4ee5\u7956\u7236\u8282\u70b9\u53f3\u65cb\u8f6c\n}\n</code></pre> <p>\u53e6\u5916\u4e00\u4e2a\u662f\u4e0a\u8ff0\u5bf9\u79f0\u8fc7\u7a0b\uff1a</p> <p>case 2.1: \u7236\u8282\u70b9\u4e3a\u7ea2\u8272\u4e14\u5176\u53d4\u53d4\u8282\u70b9\u4e5f\u4e3a\u7ea2\u8272\uff0c\u5219\u5c06\u7236\u4eb2\u3001\u53d4\u53d4\u7f6e\u4e3a\u9ed1\u8272\uff0c\u7956\u7236\u7f6e\u4e3a\u7ea2\u8272\u3002</p> <p></p> <p>case 2.2 \u82e5\u65e0\u53d4\u53d4\u8282\u70b9\u6216\u8005\u5176\u53d4\u53d4\u8282\u70b9\u4e3a\u9ed1\u8272</p> <p></p> <p>\u60c5\u51b52.2.1\uff1ax\u7684\u53d4\u53d4\u8282\u70b9y\u662f\u9ed1\u8272\u4e14x\u662f\u4e00\u4e2a\u5de6\u5b69\u5b50</p> <p></p> <pre><code>_Rb_tree_node_base *const __y = __xpp-&gt;_M_left; // \u4fdd\u5b58\u53d4\u53d4\u8282\u70b9\nif (__y &amp;&amp; __y-&gt;_M_color == _S_red) {       // \u53d4\u53d4\u8282\u70b9\u5b58\u5728\u4e14\u4e3a\u7ea2\u8272\n__x-&gt;_M_parent-&gt;_M_color = _S_black;    // \u7236\u4eb2\u8282\u70b9\u6539\u4e3a\u9ed1\u8272\n__y-&gt;_M_color = _S_black;               // \u7956\u7236\u8282\u70b9\u6539\u4e3a\u7ea2\u8272\n__xpp-&gt;_M_color = _S_red;\n__x = __xpp;\n} else {        // \u82e5\u65e0\u53d4\u53d4\u8282\u70b9\u6216\u8005\u5176\u53d4\u53d4\u8282\u70b9\u4e3a\u9ed1\u8272\nif (__x == __x-&gt;_M_parent-&gt;_M_left) {   // \u5f53\u524d\u8282\u70b9\u4e3a\u7236\u4eb2\u8282\u70b9\u7684\u5de6\u5b69\u5b50\n__x = __x-&gt;_M_parent;\nlocal_Rb_tree_rotate_right(__x, __root);    // \u4ee5\u7236\u8282\u70b9\u53f3\u65cb\u8f6c\n}\n__x-&gt;_M_parent-&gt;_M_color = _S_black;        // \u7236\u8282\u70b9\u7f6e\u4e3a\u9ed1\u8272\n__xpp-&gt;_M_color = _S_red;                   // \u7956\u7236\u8282\u70b9\u7f6e\u4e3a\u7ea2\u8272\nlocal_Rb_tree_rotate_left(__xpp, __root);   // \u5de6\u65cb\u8f6c\n}\n</code></pre> <p><code>_Rb_tree_insert_and_rebalance</code>\u5b8c\u6574\u89e3\u6790\uff1a</p> <pre><code>void\n_Rb_tree_insert_and_rebalance(const bool __insert_left,\n_Rb_tree_node_base *__x,\n_Rb_tree_node_base *__p,\n_Rb_tree_node_base &amp;__header) throw() {\n_Rb_tree_node_base * &amp;__root = __header._M_parent;\n\n// Initialize fields in new node to insert.\n__x-&gt;_M_parent = __p;\n__x-&gt;_M_left = 0;\n__x-&gt;_M_right = 0;\n__x-&gt;_M_color = _S_red;\n\n// \u5904\u7406__header\u90e8\u5206\n// Insert.\n// Make new node child of parent and maintain root, leftmost and\n// rightmost nodes.\n// N.B. First node is always inserted left.\nif (__insert_left) {\n__p-&gt;_M_left = __x; // also makes leftmost = __x when __p == &amp;__header\n\nif (__p == &amp;__header) {\n__header._M_parent = __x;\n__header._M_right = __x;\n} else if (__p == __header._M_left)\n__header._M_left = __x; // maintain leftmost pointing to min node\n} else {\n__p-&gt;_M_right = __x;\n\nif (__p == __header._M_right)\n__header._M_right = __x; // maintain rightmost pointing to max node\n}\n\n// Rebalance.\nwhile (__x != __root\n&amp;&amp; __x-&gt;_M_parent-&gt;_M_color == _S_red)   // \u82e5\u65b0\u63d2\u5165\u8282\u70b9\u4e0d\u662f\u4e3aRB-Tree\u7684\u6839\u8282\u70b9\uff0c\u4e14\u5176\u7236\u8282\u70b9color\u5c5e\u6027\u4e5f\u662f\u7ea2\u8272,\u5373\u8fdd\u53cd\u4e86\u6027\u8d284.\n{\n_Rb_tree_node_base *const __xpp = __x-&gt;_M_parent-&gt;_M_parent;        // \u7956\u7236\u8282\u70b9\n\nif (__x-&gt;_M_parent == __xpp-&gt;_M_left)   // \u7236\u4eb2\u662f\u7956\u7236\u8282\u70b9\u7684\u5de6\u5b69\u5b50\n{\n_Rb_tree_node_base *const __y = __xpp-&gt;_M_right;    // \u5f97\u5230\u53d4\u53d4\u8282\u70b9\nif (__y &amp;&amp; __y-&gt;_M_color == _S_red)     // case1: \u53d4\u53d4\u8282\u70b9\u5b58\u5728\uff0c\u4e14\u4e3a\u7ea2\u8272\n{\n/**\n                 * \u89e3\u51b3\u529e\u6cd5\u662f\uff1a\u989c\u8272\u7ffb\u8f6c\uff0c\u7236\u4eb2\u4e0e\u53d4\u53d4\u7684\u989c\u8272\u90fd\u53d8\u4e3a\u9ed1\u8272,\u7956\u7236\u8282\u70b9\u53d8\u4e3a\u7ea2\u8272,\u7136\u540e\u5f53\u524d\u8282\u70b9\u8bbe\u4e3a\u7956\u7236\uff0c\u4f9d\u6b21\u7f51\u4e0a\u6765\u5224\u65ad\u662f\u5426\u7834\u574f\u4e86\u7ea2\u9ed1\u6811\u6027\u8d28\n                 */\n__x-&gt;_M_parent-&gt;_M_color = _S_black;    // \u5c06\u5176\u7236\u8282\u70b9\u6539\u4e3a\u9ed1\u8272\n__y-&gt;_M_color = _S_black;               // \u5c06\u5176\u53d4\u53d4\u8282\u70b9\u6539\u4e3a\u9ed1\u8272\n__xpp-&gt;_M_color = _S_red;               // \u5c06\u5176\u7956\u7236\u8282\u70b9\u6539\u4e3a\u7ea2\u8272\n__x = __xpp;                            // \u4fee\u6539_x,\u5f80\u4e0a\u56de\u6eaf\n} else {        // \u65e0\u53d4\u53d4\u6216\u8005\u53d4\u53d4\u4e3a\u9ed1\u8272\nif (__x == __x-&gt;_M_parent-&gt;_M_right) {          // \u5f53\u524d\u8282\u70b9\u4e3a\u7236\u4eb2\u8282\u70b9\u7684\u53f3\u5b69\u5b50\n__x = __x-&gt;_M_parent;\nlocal_Rb_tree_rotate_left(__x, __root);     // \u4ee5\u7236\u8282\u70b9\u8fdb\u884c\u5de6\u65cb\u8f6c\n}\n// \u65cb\u8f6c\u4e4b\u540e,\u8282\u70b9x\u53d8\u6210\u5176\u7236\u8282\u70b9\u7684\u5de6\u5b69\u5b50\n__x-&gt;_M_parent-&gt;_M_color = _S_black;            // \u5c06\u5176\u7236\u4eb2\u8282\u70b9\u6539\u4e3a\u9ed1\u8272\n__xpp-&gt;_M_color = _S_red;                       // \u5c06\u5176\u7956\u7236\u8282\u70b9\u6539\u4e3a\u7ea2\u8272\nlocal_Rb_tree_rotate_right(__xpp, __root);      // \u4ee5\u7956\u7236\u8282\u70b9\u53f3\u65cb\u8f6c\n}\n} else {        // \u7236\u4eb2\u662f\u7956\u7236\u8282\u70b9\u7684\u53f3\u5b69\u5b50\n_Rb_tree_node_base *const __y = __xpp-&gt;_M_left; // \u4fdd\u5b58\u53d4\u53d4\u8282\u70b9\nif (__y &amp;&amp; __y-&gt;_M_color == _S_red) {       // \u53d4\u53d4\u8282\u70b9\u5b58\u5728\u4e14\u4e3a\u7ea2\u8272\n__x-&gt;_M_parent-&gt;_M_color = _S_black;    // \u7236\u4eb2\u8282\u70b9\u6539\u4e3a\u9ed1\u8272\n__y-&gt;_M_color = _S_black;               // \u7956\u7236\u8282\u70b9\u6539\u4e3a\u7ea2\u8272\n__xpp-&gt;_M_color = _S_red;\n__x = __xpp;\n} else {        // \u82e5\u65e0\u53d4\u53d4\u8282\u70b9\u6216\u8005\u5176\u53d4\u53d4\u8282\u70b9\u4e3a\u9ed1\u8272\nif (__x == __x-&gt;_M_parent-&gt;_M_left) {   // \u5f53\u524d\u8282\u70b9\u4e3a\u7236\u4eb2\u8282\u70b9\u7684\u5de6\u5b69\u5b50\n__x = __x-&gt;_M_parent;\nlocal_Rb_tree_rotate_right(__x, __root);    // \u4ee5\u7236\u8282\u70b9\u53f3\u65cb\u8f6c\n}\n__x-&gt;_M_parent-&gt;_M_color = _S_black;        // \u7236\u8282\u70b9\u7f6e\u4e3a\u9ed1\u8272\n__xpp-&gt;_M_color = _S_red;                   // \u7956\u7236\u8282\u70b9\u7f6e\u4e3a\u7ea2\u8272\nlocal_Rb_tree_rotate_left(__xpp, __root);   // \u5de6\u65cb\u8f6c\n}\n}\n}\n//\u82e5\u65b0\u63d2\u5165\u8282\u70b9\u4e3a\u6839\u8282\u70b9,\u5219\u8fdd\u53cd\u6027\u8d282\n//\u53ea\u9700\u5c06\u5176\u91cd\u65b0\u8d4b\u503c\u4e3a\u9ed1\u8272\u5373\u53ef\n__root-&gt;_M_color = _S_black;\n}\n</code></pre>"},{"location":"src_analysis/stl/rb_tree/#52","title":"5.2\u63d2\u5165\u603b\u7ed3","text":"<p>\u6839\u636e\u4e0a\u8ff0\u63d2\u5165\u8fc7\u7a0b\u4e0e\u6e90\u7801\u5206\u6790\uff0c\u6211\u4eec\u5f97\u51fa\u4e0b\u9762\u4e09\u79cd\uff1a \u5047\u8bbeP\u4ee3\u7801\u7236\u4eb2\u8282\u70b9\uff0cN\u4ee3\u8868\u5f53\u524d\u65b0\u63d2\u5165\u8282\u70b9\uff0cU\u4ee3\u8868\u53d4\u53d4\u8282\u70b9\uff0cG\u4ee3\u8868\u7956\u7236\u8282\u70b9\u3002</p> <p>case 1:U\u4e3a\u7ea2\u8272\uff0cP\u3001N\u4e5f\u90fd\u4e3a\u7ea2\u8272\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u989c\u8272\uff0c\u81ea\u5e95\u5411\u4e0a\u9012\u5f52\u8c03\u6574\uff0c\u4e0b\u6b21N\u5c31\u53d8\u5473G\uff0c\u5f80\u4e0a\u5224\u65ad\u5373\u53ef\u3002\u5982\u679c\u78b0\u5de7\u5c06\u6839\u8282\u70b9\u67d3\u6210\u4e86\u7ea2\u8272, \u53ef\u4ee5\u5728\u7b97\u6cd5\u7684\u6700\u540e\u5f3a\u5236root\u6539\u4e3a\u9ed1\u3002</p> <p></p> <p>case 2:U\u4e3a\u9ed1\u8272\uff0c\u8003\u8651N\u662fP\u7684\u5de6\u5b69\u5b50\u8fd8\u662f\u53f3\u5b69\u5b50\u3002</p> <p>case2.1 \u5982\u679c\u662f\u53f3\u5b69\u5b50,\u5148\u8fdb\u884c\u5de6\u65cb\u8f6c\uff0c\u518d\u8fdb\u5165\u4e0b\u4e00\u79cd\u60c5\u51b5\u3002</p> <p></p> <p>case2.2 \u53ef\u80fd\u662f\u4e0a\u8ff0\u60c5\u51b5\u53d8\u5316\u800c\u6765\uff0c\u4f46\u4e0d\u4e00\u5b9a\u662f\uff01\u7b56\u7565\u4e3a\uff1a\u53f3\u65cb\u8f6c\uff0c\u6539\u53d8\u989c\u8272\u3002</p> <p></p> <p>\u7ecf\u8fc7\u4e0a\u8ff0\u6e90\u7801\u7684\u5206\u6790\u5f97\u77e5\uff0c\u7ea2\u9ed1\u6811\u63d2\u5165\u4e3a\u955c\u50cf\u53d8\u6362\uff0c\u53e6\u4e00\u79cd\u60c5\u51b5\u521a\u597d\u76f8\u53cd\u3002</p> <p>\u5220\u9664\u64cd\u4f5c\uff0c\u6bd4\u8f83\u590d\u6742\uff0c\u8fd9\u91cc\u5c31\u6682\u65f6\u6ca1\u5206\u6790\u4e86\uff0c\u540e\u9762\u8865\u4e0a\u3002\u3002\u3002</p>"},{"location":"src_analysis/stl/rb_tree/#6","title":"6.\u4f7f\u7528","text":"<p>\u524d\u9762\u8bf4\u4e86\u90a3\u4e48\u591a\uff0c\u5982\u4f55\u4f7f\u7528\u5462\uff1f</p> <p>\u5f15\u5165\u5934\u6587\u4ef6\uff1a</p> <pre><code>#include&lt;map&gt;\u6216\u8005&lt;set&gt;\n</code></pre> <p>\u7c7b\u5b9a\u4e49\uff1a</p> <pre><code>_Rb_tree&lt;int, int, _Identity&lt;int&gt;, less&lt;int&gt;&gt; itree;\n</code></pre> <p>\u7136\u540e\u8c03\u7528\u76f8\u5e94\u51fd\u6570\u5373\u53ef\u3002</p>"},{"location":"src_analysis/stl/set_multiset/","title":"STL\u4e4bset\u4e0emultiset\u90a3\u4e9b\u4e8b","text":"<p>set/multiset\u4ee5rb_tree\u4e3a\u5e95\u5c42\u7ed3\u6784\uff0c\u56e0\u6b64\u6709\u5143\u7d20\u81ea\u52a8\u6392\u5e8f\u7279\u6027\u3002\u6392\u5e8f\u7684\u4f9d\u636e\u662fkey\uff0c\u800cset/multiset\u5143\u7d20\u7684value\u548ckey\u5408\u4e8c\u4e3a\u4e00\uff1avalue\u5c31\u662fkey\u3002</p> <p>\u6211\u4eec\u65e0\u6cd5\u4f7f\u7528set/multiset\u7684iterators\u6539\u53d8\u5143\u7d20\u503c(\u56e0\u4e3akey\u6709\u5176\u4e25\u8c28\u6392\u5217\u89c4\u5219)\u3002 set/multiset\u7684iterator\u662f\u5176\u5e95\u90e8RB tree\u7684const-iterator\uff0c\u5c31\u662f\u4e3a\u4e86\u7981\u6b62\u7528\u6237\u5bf9\u5143\u7d20\u8d4b\u503c\u3002</p> <p>set\u5143\u7d20\u7684key\u5fc5\u987b\u72ec\u4e00\u65e0\u4e8c\uff0c\u56e0\u6b64\u5176insert\u4f7f\u7528\u7684\u662frb_tree\u7684<code>_M_insert_unique()</code>\uff0c\u800cmultiset\u5143\u7d20\u7684key\u53ef\u4ee5\u91cd\u590d\uff0c\u56e0\u6b64\u5176insert\u4f7f\u7528\u7684\u662frb_tree\u7684<code>_M_insert_equal()</code>\u3002</p>"},{"location":"src_analysis/stl/set_multiset/#1set","title":"1.set","text":"<p>\u9488\u5bf9set\u6e90\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u6545\u4ece\u4e0b\u9762\u51e0\u4e2a\u95ee\u9898\u51fa\u53d1\u3002</p> <p>\u7b2c\u4e00\u4e2a\u95ee\u9898\uff1akey\u662fvalue,value\u4e5f\u662fkey\u3002</p> <p>\u5177\u4f53\u4ee3\u7801\u518d\u7b2c\u4e8c\u4e2a\u95ee\u9898\u4e2d\u4f1a\u6709\uff0c\u8fd9\u91cc\u7ed9\u51fa\u6211\u4eec\u901a\u5e38\u5199\u4ee3\u7801\u540e\u5185\u90e8\u903b\u8f91\uff0c\u6211\u4eec\u770b\u5230\u91cc\u9762\u6709\u4e2a\u7ea2\u9ed1\u6811\uff0c\u800c\u7ea2\u9ed1\u6811\u7684\u5b9a\u4e49key\u4e0evalue\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u56de\u7b54\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002(\u6e90\u7801\u4e2dtypedef\u90fd\u662f\u6765\u81eakey)\u3002</p> <pre><code>template&lt;typename _Key, typename _Compare = std::less&lt;_Key&gt;,\ntypename _Alloc = std::allocator&lt;_Key&gt; &gt;\nclass set\n{\n// concept requirements\ntypedef typename _Alloc::value_type                   _Alloc_value_type;\n\npublic:\n// typedefs:\n//@{\n/// Public typedefs.\ntypedef _Key     key_type;\ntypedef _Key     value_type; // value\u4e5f\u662fkey\ntypedef _Compare key_compare;\ntypedef _Compare value_compare;\ntypedef _Alloc   allocator_type;\n//@}\n\nprivate:\n\ntypedef _Rb_tree&lt;key_type, value_type, _Identity&lt;value_type&gt;,\nkey_compare, _Key_alloc_type&gt; _Rep_type;\n_Rep_type _M_t;  // Red-black tree representing set.\n};\n</code></pre> <p></p> <p>\u7b2c\u4e8c\u4e2a\u95ee\u9898\uff1a\u65e0\u6cd5\u4f7f\u7528\u8fed\u4ee3\u5668\u6539\u53d8\u5143\u7d20\u503c\u3002</p> <p>\u65e0\u6cd5\u4f7f\u7528\u8fed\u4ee3\u5668\u6539\u53d8\u5143\u7d20\u503c\u6211\u4eec\u770b\u540e\u9762\u8fed\u4ee3\u5668\uff0c\u53d1\u73b0\u5168\u90e8\u7528\u7684\u662f<code>const_iterator</code>\uff0c\u6240\u4ee5\u7b2c\u4e8c\u4e2a\u95ee\u9898\u4e5f\u56de\u7b54\u5b8c\u6bd5\u3002</p> <pre><code>template&lt;typename _Key, typename _Compare = std::less&lt;_Key&gt;,\ntypename _Alloc = std::allocator&lt;_Key&gt; &gt;\nclass set\n{\nprivate:\n\ntypedef _Rb_tree&lt;key_type, value_type, _Identity&lt;value_type&gt;,\nkey_compare, _Key_alloc_type&gt; _Rep_type;\n_Rep_type _M_t;  // Red-black tree representing set.\n\npublic:\ntypedef typename _Rep_type::const_iterator            iterator;\ntypedef typename _Rep_type::const_iterator            const_iterator;\ntypedef typename _Rep_type::const_reverse_iterator    reverse_iterator;\ntypedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;\n};\n</code></pre> <p>\u7ecf\u8fc7\u524d\u9762\u5206\u6790\uff0c\u8ba9\u6211\u4eec\u60f3\u8d77\u4e86queue\u3001priority_queue\u3001stack\uff0c\u4ed6\u4eec\u90fd\u4f7f\u7528\u7684\u662f\u5e95\u5c42\u7684\u5bb9\u5668\uff0c\u6240\u4ee5\u79f0\u4e3a\u5bb9\u5668\u9002\u914d\u5668\uff0c\u800cset\u4e5f\u662f\u4f7f\u7528\u5e95\u5c42\u7684\u5bb9\u5668\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u88ab\u79f0\u4e3acontainer adapter,\u5373\u5bb9\u5668\u9002\u914d\u5668\u3002</p> <p>\u7b2c\u4e09\u4e2a\u95ee\u9898\uff1a\u63d2\u5165\u662f\u552f\u4e00\u7684key\u3002</p> <p>\u5e95\u90e8\u8c03\u7528\u7684\u662f<code>_M_insert_unique</code>\u3002</p> <pre><code>template&lt;typename _InputIterator&gt;\nset(_InputIterator __first, _InputIterator __last)\n: _M_t()\n{ _M_t._M_insert_unique(__first, __last); }\n</code></pre> <p>\u6211\u4eec\u6765\u7b80\u5355\u770b\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\u5b9e\u73b0\uff1a \u4e0b\u9762<code>_M_get_insert_unique_pos</code>\u8fd4\u56de\u7684\u662f\u4e2apair\uff0c\u5982\u679c\u63d2\u5165\u7684key\u76f8\u540c\u5219pair\u7684second\u4e3a0\uff0c\u6839\u636e\u662f\u5426\u4e3a0\u53ef\u4ee5\u5224\u65ad\u662f\u5426key\u91cd\u590d\uff0c\u5728\u4e0b\u9762\u4ee3\u7801\u4e2d\u5224\u65ad\u65f6\u5019\uff0c\u5f53second\u4e0d\u4e3a0\uff0c\u4e5f\u5c31\u662f\u4e0d\u91cd\u590d\u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u63d2\u5165\uff0c\u6b64\u65f6\u76f4\u63a5\u6784\u9020\u4e00\u4e2asecond\u4e3atrue\u7684pair,\u5426\u5219\u6784\u9020\u4e00\u4e2asecond\u4e3afalse\u7684pair\u3002</p> <pre><code>template&lt;typename _Key, typename _Val, typename _KeyOfValue,\ntypename _Compare, typename _Alloc&gt;\n#if __cplusplus &gt;= 201103L\ntemplate&lt;typename _Arg&gt;\n#endif\npair&lt;typename _Rb_tree&lt;_Key, _Val, _KeyOfValue,\n_Compare, _Alloc&gt;::iterator, bool&gt;\n_Rb_tree&lt;_Key, _Val, _KeyOfValue, _Compare, _Alloc&gt;::\n_M_insert_unique( _Arg &amp;&amp; __v )\n\n{\ntypedef pair&lt;iterator, bool&gt; _Res;\npair&lt;_Base_ptr, _Base_ptr&gt; __res\n= _M_get_insert_unique_pos( _KeyOfValue() ( __v ) );\n\nif ( __res.second )\nreturn(_Res( _M_insert_( __res.first, __res.second,\n_GLIBCXX_FORWARD( _Arg, __v ) ),\ntrue ) );\n\nreturn(_Res( iterator( static_cast&lt;_Link_type&gt;(__res.first) ), false ) );\n}\n</code></pre> <p>\u6211\u4eec\u518d\u770b\u770b\u4e0a\u9762\u63d0\u5230\u7684\u51fd\u6570\uff1a</p> <pre><code>template&lt;typename _Key, typename _Val, typename _KeyOfValue,typename _Compare, typename _Alloc&gt;\npair&lt;typename _Rb_tree&lt;_Key, _Val, _KeyOfValue,\n_Compare, _Alloc&gt;::_Base_ptr,typename _Rb_tree&lt;_Key, _Val, _KeyOfValue,Compare, _Alloc&gt;::_Base_ptr&gt;\n_Rb_tree&lt;_Key, _Val, _KeyOfValue, _Compare, _Alloc&gt;::\n_M_get_insert_unique_pos(const key_type&amp; __k)\n{\n// typedef pair\ntypedef pair&lt;_Base_ptr, _Base_ptr&gt; _Res;\n// _x\u8868\u793a\u5f53\u524d\u8282\u70b9,_y\u8868\u793a_x\u7684\u7236\u8282\u70b9\n_Link_type __x = _M_begin();\n_Link_type __y = _M_end();\nbool __comp = true;\n\n// \u5bfb\u627e\u63d2\u5165\u70b9\nwhile (__x != 0)\n{\n__y = __x;\n// __k&lt;__x\u662f\u5426\u4e3atrue\n__comp = _M_impl._M_key_compare(__k, _S_key(__x));\n// __k&lt;__x\u5c31\u5f80\u5de6\u5b69\u5b50\u67e5\u627e\uff0c\u5426\u5219\u53f3\u5b69\u5b50\u67e5\u627e\n__x = __comp ? _S_left(__x) : _S_right(__x);\n}\niterator __j = iterator(__y);\n// __k&lt;__y\uff0c\u5f80__y\u7684\u5de6\u5b69\u5b50\u63d2\u5165\u8282\u70b9\u5373\u53ef\uff0c\u4e0d\u662f\u505a\u63d2\u5165\uff0c\u662f\u627e\u5230\u4f4d\u7f6e\u5373\u53ef\u3002\nif (__comp)\n{\n// \u7279\u6b8a\u4f4d\u7f6e\nif (__j == begin())\nreturn _Res(__x, __y);\nelse\n--__j;  // \u5de6\u5b69\u5b50 \u8fd9\u91cc\u8c03\u7528\u4e86--\u64cd\u4f5c\u7b26\n}\n// __j&lt;__k\uff0c\u8fd4\u56de\u5f53\u524d\u8282(__x=0)\u70b9\u4e0e\u7236\u8282\u70b9\nif (_M_impl._M_key_compare(_S_key(__j._M_node), __k))\nreturn _Res(__x, __y);\n// _j&gt;=__k,\u63d2\u5165\u5931\u8d25\nreturn _Res(__j._M_node, 0);\n}\n</code></pre> <p>\u4e0a\u8ff0pair\u7684\u4f7f\u7528\u7ed9\u4e86\u6211\u4e00\u4e2a\u542f\u53d1\uff0c\u7adf\u7136\u53ef\u4ee5\u8fd9\u6837\u7528\uff0c\u90a3\u4e48\u6211\u4eec\u6765\u5b66\u4e60\u4e00\u4e0b\uff1a</p> <pre><code>cout&lt;&lt;\"flag: \"&lt;&lt;itree._M_insert_unique(5).second&lt;&lt;endl;  // \u5b66\u4e60\u8fd4\u56de\u503c\ntypedef pair&lt;int ,bool&gt; _Res;    // \u4e5f\u6765\u7528\u4e00\u4e0btypedef\u540e\u7684pair\ncout&lt;&lt;_Res(1,true).first&lt;&lt;endl;  // \u76f4\u63a5\u5305\u88f9\n_Res r=make_pair(2,false);    // \u5b9a\u4e49\u65b0\u5bf9\u8c61\ncout&lt;&lt;r.first&lt;&lt;endl;   // \u8f93\u51fa\u7ed3\u679c\n</code></pre>"},{"location":"src_analysis/stl/set_multiset/#2multiset","title":"2.multiset","text":"<p>\u540c\u7406,multiset\u4e0eset\u5b9a\u4e49\u57fa\u672c\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\uff0c\u5728\u4e8e\u63d2\u5165\u4f7f\u7528\u7684\u662f\u53e6\u4e00\u4e2a\u51fd\u6570,\u8fd9\u6837\u624d\u4f7f\u5b83\u80fd\u591f\u5b8c\u6210\u91cd\u590dkey\u7684\u63d2\u5165\uff01</p> <pre><code> template&lt;typename _InputIterator&gt;\nmultiset(_InputIterator __first, _InputIterator __last)\n: _M_t()\n{ _M_t._M_insert_equal(__first, __last); }\n</code></pre> <p>\u4e0b\u9762\u6765\u5206\u6790\u4e00\u4e0b<code>_M_insert_equal</code>:</p> <pre><code>typename _Rb_tree&lt;_Key, _Val, _KeyOfValue, _Compare, _Alloc&gt;::iterator\n_Rb_tree&lt;_Key, _Val, _KeyOfValue, _Compare, _Alloc&gt;::\n_M_insert_equal(_Arg&amp;&amp; __v)\n{\npair&lt;_Base_ptr, _Base_ptr&gt; __res = _M_get_insert_equal_pos(_KeyOfValue()(__v));\nreturn _M_insert_(__res.first, __res.second, _GLIBCXX_FORWARD(_Arg, __v));\n}\n</code></pre> <p>\u6211\u4eec\u7ee7\u7eed\u8ffd\u8e2a\u4e0a\u8ff0\u7684<code>_M_get_insert_equal_pos</code>\u51fd\u6570\uff1a</p> <pre><code>template&lt;typename _Key, typename _Val, typename _KeyOfValue,\ntypename _Compare, typename _Alloc&gt;\npair&lt;typename _Rb_tree&lt;_Key, _Val, _KeyOfValue,\n_Compare, _Alloc&gt;::_Base_ptr,\ntypename _Rb_tree&lt;_Key, _Val, _KeyOfValue,\n_Compare, _Alloc&gt;::_Base_ptr&gt;\n_Rb_tree&lt;_Key, _Val, _KeyOfValue, _Compare, _Alloc&gt;::\n_M_get_insert_equal_pos(const key_type&amp; __k)\n{\ntypedef pair&lt;_Base_ptr, _Base_ptr&gt; _Res;\n_Link_type __x = _M_begin();\n_Link_type __y = _M_end();\nwhile (__x != 0)\n{\n__y = __x;\n__x = _M_impl._M_key_compare(__k, _S_key(__x)) ?\n_S_left(__x) : _S_right(__x);\n}\nreturn _Res(__x, __y);\n}\n</code></pre> <p>\u6211\u4eec\u5bf9\u6bd4multiset\u4e0eset\u7684\u8fd9\u51e0\u4e2a\u51fd\u6570\u53d1\u73b0\uff0c\u8fd4\u56de\u7684pair\u6709\u7740\u663e\u8457\u7684\u5dee\u5f02\uff0c\u4e4b\u524d\u7684set\u9700\u8981\u8fd4\u56de\u6700\u7ec8\u662f\u5426\u63d2\u5165\u6210\u529f\uff0c\u56e0\u4e3akey\u4e0d\u53ef\u91cd\u590d\uff0c\u800cmultiset\u4e0d\u9700\u8981\u8fd4\u56de\u662f\u5426\u63d2\u5165\u6210\u529f\uff0c\u6240\u4ee5pair\u4e2d\u4e0d\u5b58\u5728bool\u7c7b\u578b\uff0c\u6545\u5b83\u662f\u76f4\u63a5\u8fd4\u56de\u7684\u63d2\u5165\u70b9\u6240\u6784\u6210\u7684pair\uff0c\u56e0\u6b64\uff0c\u4e0e\u4e4b\u524d\u76f8\u6bd4\u8f83\u800c\u8a00\uff0c\u4e0d\u7ba1\u4f60\u6709\u591a\u5c11\u4e2akey\uff0c\u91cd\u590d\u5982\u4f55\uff0c\u90fd\u53ef\u4ee5\u63d2\u5165\u8fdb\u53bb\u3002</p>"},{"location":"src_analysis/stl/traits/","title":"C++ STL \u6e90\u7801\u5256\u6790\u4e4b Traits \u7f16\u7a0b\u6280\u6cd5","text":""},{"location":"src_analysis/stl/traits/#0","title":"0.\u5bfc\u8bed","text":"<p>\u5728 STL \u7f16\u7a0b\u4e2d\uff0c\u5bb9\u5668\u548c\u7b97\u6cd5\u662f\u72ec\u7acb\u8bbe\u8ba1\u7684\uff0c\u5373\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u662f\u72ec\u7acb\u8bbe\u8ba1\u7684\uff0c\u8fde\u63a5\u5bb9\u5668\u548c\u7b97\u6cd5\u7684\u6865\u6881\u5c31\u662f\u8fed\u4ee3\u5668\u4e86\uff0c\u8fed\u4ee3\u5668\u4f7f\u5176\u72ec\u7acb\u8bbe\u8ba1\u6210\u4e3a\u53ef\u80fd\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u4e0a\u56fe\u7ed9\u51fa\u4e86 STL \u7684\u76ee\u6807\u5c31\u662f\u8981\u628a\u6570\u636e\u548c\u7b97\u6cd5\u5206\u5f00\uff0c\u5206\u522b\u5bf9\u5176\u8fdb\u884c\u8bbe\u8ba1\uff0c\u4e4b\u540e\u901a\u8fc7\u4e00\u79cd\u540d\u4e3a iterator \u7684\u4e1c\u897f\uff0c\u628a\u8fd9\u4e8c\u8005\u518d\u7c98\u63a5\u5230\u4e00\u8d77\u3002</p> <p>\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\uff0c\u5173\u4e8e iterator \u7684\u63cf\u8ff0\u4e3a\uff1a\u4e00\u79cd\u80fd\u591f\u987a\u5e8f\u8bbf\u95ee\u5bb9\u5668\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u65b9\u6cd5\uff0c\u4f7f\u7528\u8be5\u65b9\u6cd5\u4e0d\u80fd\u66b4\u9732\u5bb9\u5668\u5185\u90e8\u7684\u8868\u8fbe\u65b9\u5f0f\u3002\u800c\u7c7b\u578b\u8403\u53d6\u6280\u672f\u5c31\u662f\u4e3a\u4e86\u8981\u89e3\u51b3\u548c iterator \u6709\u5173\u7684\u95ee\u9898\u7684\u3002</p> <p>\u5b83\u5c06\u8303\u578b\u7b97\u6cd5(find, count, find_if)\u7528\u4e8e\u67d0\u4e2a\u5bb9\u5668\u4e2d,\u6700\u91cd\u8981\u7684\u662f\u8981\u7ed9\u7b97\u6cd5\u63d0\u4f9b\u4e00\u4e2a\u8bbf\u95ee\u5bb9\u5668\u5143\u7d20\u7684\u5de5\u5177\uff0citerator \u5c31\u626e\u6f14\u7740\u8fd9\u4e2a\u91cd\u8981\u7684\u89d2\u8272\u3002</p> <p>\u800c\u5728\u7b97\u6cd5\u4e2d\u6211\u4eec\u53ef\u80fd\u4f1a\u5b9a\u4e49\u7b80\u5355\u7684\u4e2d\u95f4\u53d8\u91cf\u6216\u8005\u8bbe\u5b9a\u7b97\u6cd5\u7684\u8fd4\u56de\u53d8\u91cf\u7c7b\u578b\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u77e5\u9053\u8fed\u4ee3\u5668\u6240\u6307\u5143\u7d20\u7684\u7c7b\u578b\u662f\u4ec0\u4e48\uff0c\u4f46\u662f\u7531\u4e8e\u6ca1\u6709 typeof \u8fd9\u7c7b\u5224\u65ad\u7c7b\u578b\u7684\u51fd\u6570,\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u83b7\u53d6\uff0c\u90a3\u8be5\u5982\u4f55\u662f\u597d\uff1f\u672c\u6587\u5c31\u6765\u5177\u4f53\u9610\u8ff0\u3002</p> <p>\u5bf9\u4e8e\u8fed\u4ee3\u5668\u6765\u8bf4\u5c31\u662f\u4e00\u79cd\u667a\u80fd\u6307\u9488\uff0c\u56e0\u6b64\uff0c\u5b83\u4e5f\u5c31\u62e5\u6709\u4e86\u4e00\u822c\u6307\u9488\u7684\u6240\u6709\u7279\u70b9\u2014\u2014\u80fd\u591f\u5bf9\u5176\u8fdb\u884c*\u548c-&gt;\u64cd\u4f5c\u3002\u4f46\u662f\u5728\u904d\u5386\u5bb9\u5668\u7684\u65f6\u5019\uff0c\u4e0d\u53ef\u907f\u514d\u7684\u8981\u5bf9\u904d\u5386\u7684\u5bb9\u5668\u5185\u90e8\u6709\u6240\u4e86\u89e3\uff0c\u6240\u4ee5\uff0c\u5e72\u8106\u628a\u8fed\u4ee3\u5668\u7684\u5f00\u53d1\u5de5\u4f5c\u4ea4\u7ed9\u5bb9\u5668\u7684\u8bbe\u8ba1\u8005\u597d\u4e86\uff0c\u5982\u6b64\u4ee5\u6765\uff0c\u6240\u6709\u5b9e\u73b0\u7ec6\u8282\u53cd\u800c\u5f97\u4ee5\u5c01\u88c5\u8d77\u6765\u4e0d\u88ab\u4f7f\u7528\u8005\u770b\u5230\uff0c\u8fd9\u6b63\u662f\u4e3a\u4ec0\u4e48\u6bcf\u4e00\u79cd STL \u5bb9\u5668\u90fd\u63d0\u4f9b\u6709\u4e13\u5c5e\u8fed\u4ee3\u5668\u7684\u7f18\u6545\u3002</p> <p>\u800c Traits \u5728<code>bits/stl_iterator_base_types.h</code>\u4e2d\uff1a</p> <pre><code>template&lt;class _Tp&gt;\nstruct iterator_traits&lt;_Tp*&gt;\n{\ntypedef ptrdiff_t difference_type;\ntypedef typename _Tp::value_type value_type;\ntypedef typename _Tp::pointer pointer;\ntypedef typename _Tp::reference reference;\ntypedef typename _Tp::iterator_category iterator_category;\n};\n</code></pre> <p>\u770b\u7684\u4e00\u8138\u61f5\u903c\u5427\uff0c\u6ca1\u4e8b\uff0c\u770b\u5b8c\u672c\u8282\uff0c\u5165\u95e8 STL\uff0c\u54c8\u54c8~</p>"},{"location":"src_analysis/stl/traits/#1template","title":"1.template \u53c2\u6570\u63a8\u5bfc","text":"<p>\u9996\u5148\uff0c\u5728\u7b97\u6cd5\u4e2d\u8fd0\u7528\u8fed\u4ee3\u5668\u65f6\uff0c\u5f88\u53ef\u80fd\u4f1a\u7528\u5230\u5176\u76f8\u5e94\u578b\u522b\uff08associated type\uff09\uff08\u8fed\u4ee3\u5668\u6240\u6307\u4e4b\u7269\u7684\u578b\u522b\uff09\u3002\u5047\u8bbe\u7b97\u6cd5\u4e2d\u6709\u5fc5\u8981\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\uff0c\u4ee5\"\u8fed\u4ee3\u5668\u6240\u6307\u5bf9\u8c61\u7684\u578b\u522b\"\u4e3a\u578b\u522b\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f</p> <p>\u89e3\u51b3\u65b9\u6cd5\u662f\uff1a\u5229\u7528 function template \u7684\u53c2\u6570\u63a8\u5bfc\u673a\u5236\u3002</p> <p>\u4f8b\u5982\uff1a</p> <p>\u5982\u679c T \u662f\u67d0\u4e2a\u6307\u5411\u7279\u5b9a\u5bf9\u8c61\u7684\u6307\u9488\uff0c\u90a3\u4e48\u5728 func \u4e2d\u9700\u8981\u6307\u9488\u6240\u6307\u5411\u5bf9\u8c61\u7684\u578b\u522b\u7684\u65f6\u5019\uff0c\u600e\u4e48\u529e\u5462\uff1f\u8fd9\u4e2a\u8fd8\u6bd4\u8f83\u5bb9\u6613\uff0c\u6a21\u677f\u7684\u53c2\u6570\u63a8\u5bfc\u673a\u5236\u53ef\u4ee5\u5b8c\u6210\u4efb\u52a1\uff0c</p> <pre><code>template &lt;class I&gt;\ninline\nvoid func(I iter) {\nfunc_impl(iter, *iter); // \u4f20\u5165iter\u548citer\u6240\u6307\u7684\u503c\uff0cclass\u81ea\u52a8\u63a8\u5bfc\n}\n</code></pre> <p>\u901a\u8fc7\u6a21\u677f\u7684\u63a8\u5bfc\u673a\u5236\uff0c\u6211\u4eec\u8f7b\u800c\u6613\u4e3e\u7684\u6216\u5f97\u4e86\u6307\u9488\u6240\u6307\u5411\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\u3002</p> <pre><code>template &lt;class I, class T&gt;\nvoid func_impl(I iter, T t) {\nT tmp; // \u8fd9\u91cc\u5c31\u662f\u8fed\u4ee3\u5668\u6240\u6307\u7269\u7684\u7c7b\u522b\n// ... \u529f\u80fd\u5b9e\u73b0\n}\n\nint main() {\nint i;\nfunc(&amp;i);\n}\n</code></pre> <p>\u4f46\u662f\uff0c\u51fd\u6570\u7684\"template \u53c2\u6570\u63a8\u5bfc\u673a\u5236\"\u63a8\u5bfc\u7684\u53ea\u662f\u53c2\u6570\uff0c\u65e0\u6cd5\u63a8\u5bfc\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u3002\u4e07\u4e00\u9700\u8981\u63a8\u5bfc\u51fd\u6570\u7684\u4f20\u56de\u503c\uff0c\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f15\u51fa\u4e0b\u9762\u7684\u65b9\u6cd5\u3002</p>"},{"location":"src_analysis/stl/traits/#2","title":"2.\u58f0\u660e\u5185\u5d4c\u578b\u522b","text":"<p>\u8fed\u4ee3\u5668\u6240\u6307\u5bf9\u8c61\u7684\u578b\u522b\uff0c\u79f0\u4e4b\u4e3a\u8fed\u4ee3\u5668\u7684 value type\u3002</p> <p>\u5c3d\u7ba1\u5728 func_impl \u4e2d\u6211\u4eec\u53ef\u4ee5\u628a T \u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u4f46\u662f\u95ee\u9898\u662f\u7528\u6237\u9700\u8981\u8c03\u7528\u7684\u662f func\u3002</p> <pre><code>template &lt;class I, class T&gt;\nT func_impl(I iter, T t) {\nT tmp; // \u8fd9\u91cc\u5c31\u662f\u8fed\u4ee3\u5668\u6240\u6307\u7269\u7684\u7c7b\u522b\n// ... \u529f\u80fd\u5b9e\u73b0\n}\ntemplate &lt;class T&gt;\n(*T) func(T t) { // !!!Wrong code\nreturn func_impl(t, *t); // forward the task to func_impl\n}\nint main() {\nint i  =10;\ncout&lt;&lt;func(&amp;i)&lt;&lt;endl; // !!! Can\u2019t pass compile\n}\n</code></pre> <p>\u5982\u679c\u53bb\u7f16\u8bd1\u4e0a\u8ff0\u4ee3\u7801\uff0c\u7f16\u8bd1\u5931\u8d25\uff01</p> <p>\u8fd9\u4e2a\u95ee\u9898\u89e3\u51b3\u8d77\u6765\u4e5f\u4e0d\u96be\uff0c\u58f0\u660e\u5185\u5d4c\u578b\u522b\u4f3c\u4e4e\u662f\u4e2a\u597d\u4e3b\u610f\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u3002\u53ea\u8981\u505a\u4e00\u4e2a iterator\uff0c\u7136\u540e\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u4e3a\u5176\u6307\u5411\u7684\u5bf9\u8c61\u7c7b\u578b\u5236\u5b9a\u4e00\u4e2a\u522b\u540d\uff0c\u5c31\u597d\u4e86\uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a</p> <pre><code>template &lt;class T&gt;\nstruct MyIter {\ntypedef T value_type; // \u5185\u5d4c\u578b\u522b\u58f0\u660e\nT* ptr;\nMyIter(T* p = 0) : ptr(p) {}\nT&amp; operator*() const { return *ptr; }\n};\n\ntemplate &lt;class I&gt;\ntypename I::value_type\nfunc(I ite) {\nstd::cout &lt;&lt; \"class version\" &lt;&lt; std::endl;\nreturn *ite;\n}\nint main() {\n// ...\nMyIter&lt;int&gt; ite(new int(8));\ncout &lt;&lt; func(ite);  // \u8f93\u51fa8\n}\n</code></pre> <p>\u5f88\u6f02\u4eae\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u770b\u4e0a\u53bb\u4e00\u5207\u90fd\u5f88\u5b8c\u7f8e\u3002\u4f46\u662f\uff0c\u5b9e\u9645\u4e0a\u8fd8\u662f\u6709\u95ee\u9898\uff0c\u56e0\u4e3a func \u5982\u679c\u662f\u4e00\u4e2a\u6cdb\u578b\u7b97\u6cd5\uff0c\u90a3\u4e48\u5b83\u4e5f\u7edd\u5bf9\u8981\u63a5\u53d7\u4e00\u4e2a\u539f\u751f\u6307\u9488\u4f5c\u4e3a\u8fed\u4ee3\u5668\uff0c\u4f46\u662f\u663e\u7136\uff0c\u4f60\u65e0\u6cd5\u8ba9\u4e0b\u9762\u7684\u4ee3\u7801\u7f16\u8bd1\u901a\u8fc7\uff1a</p> <pre><code>int *p = new int(5);\ncout&lt;&lt;func(p)&lt;&lt;endl; // error\n</code></pre> <p>\u6211\u4eec\u7684 func \u65e0\u6cd5\u652f\u6301\u539f\u751f\u6307\u9488\uff0c\u8fd9\u663e\u7136\u662f\u4e0d\u80fd\u63a5\u53d7\u7684\u3002\u6b64\u65f6\uff0ctemplate partial specialization \u5c31\u6d3e\u4e0a\u4e86\u7528\u573a\u3002</p>"},{"location":"src_analysis/stl/traits/#3-traits","title":"3.\u6551\u4e16\u4e3b Traits","text":"<p>\u524d\u9762\u4e5f\u63d0\u5230\u4e86\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528<code>typename I::value_type</code>\uff0c\u7b97\u6cd5\u5c31\u65e0\u6cd5\u63a5\u6536\u539f\u751f\u6307\u9488\uff0c\u56e0\u4e3a\u539f\u751f\u6307\u9488\u6839\u672c\u5c31\u6ca1\u6709 value_type \u8fd9\u4e2a\u5185\u5d4c\u7c7b\u578b\u3002</p> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u52a0\u5165\u4e00\u4e2a\u4e2d\u95f4\u5c42\u5bf9\u5176\u8fdb\u884c\u5224\u65ad\uff0c\u770b\u5b83\u662f\u4e0d\u662f\u539f\u751f\u6307\u9488\uff0c\u6ce8\u610f\uff0c\u8fd9\u5c31\u662f traits \u6280\u6cd5\u7684\u5999\u5904\u6240\u5728\u3002</p> <p>\u5982\u679c\u6211\u4eec\u53ea\u4f7f\u7528\u4e0a\u9762\u7684\u505a\u6cd5\uff0c\u4e5f\u5c31\u662f\u5185\u5d4c value_type\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6ca1\u6709 value_type \u7684\u6307\u9488\uff0c\u6211\u4eec\u53ea\u80fd\u5bf9\u5176\u8fdb\u884c\u504f\u7279\u5316\uff0c\u8fd9\u79cd\u504f\u7279\u5316\u662f\u9488\u5bf9\u53ef\u8c03\u7528\u51fd\u6570 func \u7684\u504f\u7279\u5316\uff0c\u5047\u5982 func \u6709 100 \u4e07\u884c\u884c\u4ee3\u7801\uff0c\u90a3\u4e48\u5c31\u4f1a\u9020\u6210\u6781\u5927\u7684\u89c6\u89c9\u6c61\u67d3\u3002</p> <p>\uff081\uff09\u51fd\u6570\u504f\u7279\u5316</p> <p>\u51fd\u6570\u504f\u7279\u5316\uff1a</p> <pre><code>template &lt;class T&gt;\nstruct MyIter {\ntypedef T value_type; // \u5185\u5d4c\u578b\u522b\u58f0\u660e\nT* ptr;\nMyIter(T* p = 0) : ptr(p) {}\nT&amp; operator*() const { return *ptr; }\n};\n\ntemplate &lt;class I&gt;\ntypename I::value_type\nfunc(I ite) {\nstd::cout &lt;&lt; \"class version\" &lt;&lt; std::endl;\nreturn *ite;\n}\ntemplate &lt;class I&gt;\nI\nfunc(I* ite) {\nstd::cout &lt;&lt; \"pointer version\" &lt;&lt; std::endl;\nreturn *ite;\n}\ntemplate &lt;class I&gt;\nI func(const I* ite) {\nstd::cout &lt;&lt; \"const pointer version\" &lt;&lt; std::endl;\nreturn *ite;\n}\nint main() {\n// ...\nMyIter&lt;int&gt; ite(new int(8));\ncout &lt;&lt; func(ite)&lt;&lt;endl;\nint *p = new int(52);\ncout&lt;&lt;func(p)&lt;&lt;endl;\nconst int k = 3;\ncout&lt;&lt;func(&amp;k)&lt;&lt;endl;\n}\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>class version\n8\npointer version\n52\nconst pointer version\n3\n</code></pre> <p>\uff082\uff09\u52a0\u5165\u4e2d\u95f4\u5c42</p> <p>\u5728 STL \u4e2d Traits \u662f\u4ec0\u4e48\u5462\uff1f\u770b\u4e0b\u56fe\uff1a</p> <p></p> <p>\u5229\u7528\u4e00\u4e2a\u4e2d\u95f4\u5c42<code>iterator_traits</code>\u56fa\u5b9a\u4e86<code>func</code>\u7684\u5f62\u5f0f\uff0c\u4f7f\u5f97\u91cd\u590d\u7684\u4ee3\u7801\u5927\u91cf\u51cf\u5c11\uff0c\u552f\u4e00\u8981\u505a\u7684\u5c31\u662f\u7a0d\u7a0d\u7279\u5316\u4e00\u4e0b iterator_tartis \u4f7f\u5176\u652f\u6301 pointer \u548c const pointer:)</p> <pre><code>#include &lt;iostream&gt;\n\ntemplate &lt;class T&gt;\nstruct MyIter {\ntypedef T value_type; // \u5185\u5d4c\u578b\u522b\u58f0\u660e\nT* ptr;\nMyIter(T* p = 0) : ptr(p) {}\nT&amp; operator*() const { return *ptr; }\n};\n// class type\ntemplate &lt;class T&gt;\nstruct iterator_traits {\ntypedef typename T::value_type value_type;\n};\n// \u504f\u7279\u53161\ntemplate &lt;class T&gt;\nstruct iterator_traits&lt;T*&gt; {\ntypedef T value_type;\n};\n// \u504f\u7279\u53162\ntemplate &lt;class T&gt;\nstruct iterator_traits&lt;const T*&gt; {\ntypedef T value_type;\n};\n\ntemplate &lt;class I&gt;\ntypename iterator_traits&lt;I&gt;::value_type\n// \u9996\u5148\u8be2\u95eeiterator_traits&lt;I&gt;::value_type,\u5982\u679c\u4f20\u9012\u7684I\u4e3a\u6307\u9488,\u5219\u8fdb\u5165\u7279\u5316\u7248\u672c,iterator_traits\u76f4\u63a5\u56de\u7b54;\u5982\u679c\u4f20\u9012\u8fdb\u6765\u7684I\u4e3aclass type,\u5c31\u53bb\u8be2\u95eeT::value_type.\nfunc(I ite) {\nstd::cout &lt;&lt; \"normal version\" &lt;&lt; std::endl;\nreturn *ite;\n}\nint main() {\n// ...\nMyIter&lt;int&gt; ite(new int(8));\nstd::cout &lt;&lt; func(ite)&lt;&lt;std::endl;\nint *p = new int(52);\nstd::cout&lt;&lt;func(p)&lt;&lt;std::endl;\nconst int k = 3;\nstd::cout&lt;&lt;func(&amp;k)&lt;&lt;std::endl;\n}\n</code></pre> <p>\u4e0a\u8ff0\u7684\u8fc7\u7a0b\u662f\u9996\u5148\u8be2\u95ee<code>iterator_traits&lt;I&gt;::value_type</code>\uff0c\u5982\u679c\u4f20\u9012\u7684 I \u4e3a\u6307\u9488,\u5219\u8fdb\u5165\u7279\u5316\u7248\u672c,<code>iterator_traits</code>\u76f4\u63a5\u56de\u7b54<code>T</code>;\u5982\u679c\u4f20\u9012\u8fdb\u6765\u7684<code>I</code>\u4e3a<code>class type</code>,\u5c31\u53bb\u8be2\u95ee<code>T::value_type</code>.</p> <p>\u4e0a\u8ff0\u7684\u901a\u4fd7\u89e3\u91ca\u4e3a\u7b97\u6cd5(func)\u95ee iterator_traits(\u6211)\uff0c\u4f46\u662f iterator_traits(\u6211)\u53d1\u73b0\u624b\u4e0a\u662f\u6307\u9488\u7684\u65f6\u5019\uff0c\u5c31\u7531\u6211\u6765\u66ff\u5b83\u56de\u7b54\u3002\u5982\u679c\u662f class type\uff0citerator_traits(\u6211)\u5c31\u7ee7\u7eed\u95ee(\u4ed6---T::value_type)\u3002</p> <p>\u603b\u7ed3\uff1a\u901a\u8fc7\u5b9a\u4e49\u5185\u5d4c\u7c7b\u578b\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u77e5\u6653 iterator \u6240\u6307\u5143\u7d20\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7 traits \u6280\u6cd5\uff0c\u6211\u4eec\u5c06\u51fd\u6570\u6a21\u677f\u5bf9\u4e8e\u539f\u751f\u6307\u9488\u548c\u81ea\u5b9a\u4e49 iterator \u7684\u5b9a\u4e49\u90fd\u7edf\u4e00\u8d77\u6765\uff0c\u6211\u4eec\u4f7f\u7528 traits \u6280\u6cd5\u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3\u539f\u751f\u6307\u9488\u548c\u81ea\u5b9a\u4e49 iterator \u4e4b\u95f4\u7684\u4e0d\u540c\u6240\u9020\u6210\u7684\u4ee3\u7801\u5197\u4f59\uff0c\u8fd9\u5c31\u662f traits \u6280\u6cd5\u7684\u5999\u5904\u6240\u5728\u3002</p> <p>\u5b66\u4e60\u4e66\u7c4d\uff1a</p> <p>\u4faf\u6377\u300a STL \u6e90\u7801\u5256\u6790\u300b</p> <p>\u5b66\u4e60\u6587\u7ae0\uff1a</p> <p>https://juejin.im/post/5b1a43fb51882513bf1795c6</p> <p>https://www.cnblogs.com/mangoyuan/p/6446046.html</p> <p>http://www.cppblog.com/nacci/archive/2005/11/03/911.aspx</p>"},{"location":"src_analysis/stl/typename/","title":"typename","text":"<p>STL\u5e95\u5c42\u6e90\u7801\u6709\u4e0b\u9762\u51e0\u884c,typedef\u4e0etypename\u8054\u7528,\u8fd9\u51e0\u4e2a\u770b\u7740\u597d\u590d\u6742,\u7a76\u7adf\u5565\u610f\u601d,\u6211\u4eec\u4eca\u5929\u4e00\u8d77\u6765\u5256\u6790!</p> <pre><code>template&lt;typename _Iterator&gt;\nstruct iterator_traits\n{\ntypedef typename _Iterator::iterator_category iterator_category;\ntypedef typename _Iterator::value_type        value_type;\ntypedef typename _Iterator::difference_type   difference_type;\ntypedef typename _Iterator::pointer           pointer;\ntypedef typename _Iterator::reference         reference;\n};\n</code></pre>"},{"location":"src_analysis/stl/typename/#typename_1","title":"typename\u7684\u5e38\u89c1\u7528\u6cd5","text":"<p>\u9996\u5148\u5b66\u4e60\u4e00\u4e0btypename\u7684\u5e38\u89c1\u7528\u6cd5:</p> <pre><code>template &lt;typename T&gt;\nint compare(const T &amp;a, const T &amp;b)\n{\nreturn a&gt;b?a:b;\n}\n</code></pre> <p>\u4e0a\u8ff0\u53ea\u662f\u4e2a\u6848\u4f8b\u7a0b\u5e8f,\u5982\u679c\u60f3\u5199\u7684\u6bd4\u8f83\u5b8c\u6574\u6bd4\u8f83\u5927\u5c0f,\u8fd8\u5f97\u8003\u8651\u7279\u5316\u7248\u672c,\u4e5f\u8bb8\u4f60\u4f1a\u60f3\u5230\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u7684<code>typename</code>\u6362\u6210<code>class</code>\u4e5f\u4e00\u6837\u53ef\u4ee5\uff0c\u4e0d\u9519\uff01\u90a3\u4e48\u8fd9\u91cc\u4fbf\u6709\u4e86\u7591\u95ee\uff0c\u8fd9\u4e24\u79cd\u65b9\u5f0f\u6709\u533a\u522b\u4e48\uff1f\u67e5\u770bC++ Primer\u4e4b\u540e\uff0c\u53d1\u73b0\u4e24\u8005\u5b8c\u5168\u4e00\u6837.</p>"},{"location":"src_analysis/stl/typename/#_1","title":"\u7c7b\u4f5c\u7528\u57df","text":"<p>\u5728\u7c7b\u5916\u90e8\u8bbf\u95ee\u7c7b\u4e2d\u7684\u540d\u79f0\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f5c\u7528\u57df\u64cd\u4f5c\u7b26\uff0c\u5f62\u5982<code>MyClass::name</code>\u7684\u8c03\u7528\u901a\u5e38\u5b58\u5728\u4e09\u79cd\uff1a\u9759\u6001\u6570\u636e\u6210\u5458\u3001\u9759\u6001\u6210\u5458\u51fd\u6570\u548c\u5d4c\u5957\u7c7b\u578b\uff1a</p> <pre><code>struct MyClass {\nstatic int A; //\u9759\u6001\u6210\u5458\nstatic int B(){cout&lt;&lt;\"B()\"&lt;&lt;endl; return 100;} //\u9759\u6001\u51fd\u6570\ntypedef int C;  //\u5d4c\u5957\u7c7b\u578b\nstruct A1 { //\u5d4c\u5957\u7c7b\u578b\nstatic int s;\n};\n};\n</code></pre> <p>\u8c03\u7528\u7684\u65f6\u5019,\u53ef\u4ee5\u76f4\u63a5\u8c03:</p> <pre><code>cout&lt;&lt;MyClass::A&lt;&lt;endl;\ncout&lt;&lt;MyClass::B()&lt;&lt;endl;\nMyClass:C c;\n...\n</code></pre>"},{"location":"src_analysis/stl/typename/#_2","title":"\u5b8c\u6574\u4f8b\u5b50\u5c1d\u8bd5","text":"<p>\u8ba9\u6211\u4eec\u56de\u5230\u4e00\u4e2atypename\u7684\u4f8b\u5b50:</p> <pre><code>template &lt;class T&gt;\nvoid foo() {\nT::iterator * iter;\n// ...\n}\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u7684\u76ee\u7684\u662f\u4ec0\u4e48\uff1f\u591a\u6570\u4eba\u7b2c\u4e00\u53cd\u5e94\u53ef\u80fd\u662f\uff1a\u4f5c\u8005\u60f3\u5b9a\u4e49\u4e00\u4e2a\u6307\u9488<code>iter</code>\uff0c\u5b83\u6307\u5411\u7684\u7c7b\u578b\u662f\u5305\u542b\u5728\u7c7b\u4f5c\u7528\u57df<code>T</code>\u4e2d\u7684<code>iterator</code>\u3002\u53ef\u80fd\u5b58\u5728\u8fd9\u6837\u4e00\u4e2a\u5305\u542b<code>iterator</code>\u7c7b\u578b\u7684\u7ed3\u6784\uff1a</p> <pre><code>struct MyIterator {\nstruct iterator {\n\n};\n};\n</code></pre> <p>\u8c03\u7528\u5982\u4e0b:</p> <pre><code>foo&lt;MyIterator&gt;();\n</code></pre> <p>\u8fd9\u6837\u4e00\u6765\uff0c<code>iter</code>\u90a3\u884c\u4ee3\u7801\u5c31\u5f88\u660e\u663e\u4e86\uff0c\u5b83\u662f\u4e00\u4e2a<code>MyIterator::iterator</code>\u7c7b\u578b\u7684\u6307\u9488\u3002\u6211\u4eec\u731c\u6d4b\u662f\u8fd9\u6837\u7684,\u73b0\u5b9e\u662f\u4e0d\u662f\u5462?</p> <p>\u53ef\u662f\uff0c\u5982\u679c\u662f\u50cf<code>T::iterator</code>\u8fd9\u6837\u5462\uff1f<code>T</code>\u662f\u6a21\u677f\u4e2d\u7684\u7c7b\u578b\u53c2\u6570\uff0c\u5b83\u53ea\u6709\u7b49\u5230\u6a21\u677f\u5b9e\u4f8b\u5316\u65f6\u624d\u4f1a\u77e5\u9053\u662f\u54ea\u79cd\u7c7b\u578b\uff0c\u66f4\u4e0d\u7528\u8bf4\u5185\u90e8\u7684<code>iterator</code>\u3002\u901a\u8fc7\u524d\u9762\u7c7b\u4f5c\u7528\u57df\u7684\u4ecb\u7ecd\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c<code>T::iterator</code>\u5b9e\u9645\u4e0a\u53ef\u4ee5\u662f\u4ee5\u4e0b\u4e09\u79cd\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u7c7b\u578b\uff1a</p> <ul> <li>\u9759\u6001\u6570\u636e\u6210\u5458</li> <li>\u9759\u6001\u6210\u5458\u51fd\u6570</li> <li>\u5d4c\u5957\u7c7b\u578b</li> </ul> <p>\u524d\u9762\u4f8b\u5b50\u4e2d\u7684<code>ContainsAType::iterator</code>\u662f\u5d4c\u5957\u7c7b\u578b\uff0c\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\u3002\u53ef\u5982\u679c\u662f\u9759\u6001\u6570\u636e\u6210\u5458\u5462\uff1f\u5982\u679c\u5b9e\u4f8b\u5316<code>foo</code>\u6a21\u677f\u51fd\u6570\u7684\u7c7b\u578b\u662f\u50cf\u8fd9\u6837\u7684\uff1a</p> <pre><code>struct MyIterator {\nstatic int iterator;\n};\n</code></pre> <p>\u90a3\u4e48\uff0c<code>T::iterator * iter;</code>\u88ab\u7f16\u8bd1\u5668\u5b9e\u4f8b\u5316\u4e3a<code>MyIterator::iterator * iter;</code>\uff0c\u8fd9\u662f\u4ec0\u4e48\uff1f\u524d\u9762\u662f\u4e00\u4e2a\u9759\u6001\u6210\u5458\u53d8\u91cf\u800c\u4e0d\u662f\u7c7b\u578b\uff0c\u90a3\u4e48\u8fd9\u4fbf\u6210\u4e86\u4e00\u4e2a\u4e58\u6cd5\u8868\u8fbe\u5f0f\uff0c\u53ea\u4e0d\u8fc7<code>iter</code>\u5728\u8fd9\u91cc\u6ca1\u6709\u5b9a\u4e49\uff0c\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\uff1a</p> <pre><code>error: no type named \u2018iterator\u2019 in \u2018struct MyIterator\u2019\n</code></pre>"},{"location":"src_analysis/stl/typename/#typename_2","title":"typename","text":"<p>\u5bf9\u4e8e\u7528\u4e8e\u6a21\u677f\u5b9a\u4e49\u7684\u4f9d\u8d56\u4e8e\u6a21\u677f\u53c2\u6570\u7684\u540d\u79f0\uff0c\u53ea\u6709\u5728\u5b9e\u4f8b\u5316\u7684\u53c2\u6570\u4e2d\u5b58\u5728\u8fd9\u4e2a\u7c7b\u578b\u540d\uff0c\u6216\u8005\u8fd9\u4e2a\u540d\u79f0\u524d\u4f7f\u7528\u4e86<code>typename</code>\u5173\u952e\u5b57\u6765\u4fee\u9970\uff0c\u7f16\u8bd1\u5668\u624d\u4f1a\u5c06\u8be5\u540d\u79f0\u5f53\u6210\u662f\u7c7b\u578b\u3002\u9664\u4e86\u4ee5\u4e0a\u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u7edd\u4e0d\u4f1a\u88ab\u5f53\u6210\u662f\u7c7b\u578b\u3002</p> <p>\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u60f3\u76f4\u63a5\u544a\u8bc9\u7f16\u8bd1\u5668<code>T::iterator</code>\u662f\u7c7b\u578b\u800c\u4e0d\u662f\u53d8\u91cf\uff0c\u53ea\u9700\u7528<code>typename</code>\u4fee\u9970\uff1a</p> <pre><code>template &lt;class T&gt;\nvoid foo() {\ntypename T::iterator * iter;\n}\n</code></pre> <p>\u8fd9\u6837\u7f16\u8bd1\u5668\u5c31\u53ef\u4ee5\u786e\u5b9a<code>T::iterator</code>\u662f\u4e00\u4e2a\u7c7b\u578b\uff0c\u800c\u4e0d\u518d\u9700\u8981\u7b49\u5230\u5b9e\u4f8b\u5316\u65f6\u671f\u624d\u80fd\u786e\u5b9a\uff0c\u56e0\u6b64\u6d88\u9664\u4e86\u524d\u9762\u63d0\u5230\u7684\u6b67\u4e49\u3002</p>"},{"location":"src_analysis/stl/typename/#_3","title":"\u5256\u6790\u6e90\u7801","text":"<p>\u56de\u5230STL\u6e90\u7801</p> <pre><code>template&lt;typename _Iterator&gt;\nstruct iterator_traits\n{\ntypedef typename _Iterator::iterator_category iterator_category;\ntypedef typename _Iterator::value_type        value_type;\ntypedef typename _Iterator::difference_type   difference_type;\ntypedef typename _Iterator::pointer           pointer;\ntypedef typename _Iterator::reference         reference;\n};\n</code></pre> <p>\u770b\u5230\u4e0a\u9762\u7684,\u6211\u4eec\u5c31\u4e00\u4e0b\u5b50\u6e05\u695a\u4e86,\u65e0\u975e\u5c31\u662f\u4f7f\u7528typename\u544a\u8bc9\u7f16\u8bd1\u5668<code>_Iterator::iterator_category</code>\u662f\u4e00\u4e2a\u7c7b\u578b,\u7136\u540e\u4f7f\u7528typedef\u91cd\u547d\u540d\u4e00\u4e0b,\u5176\u4f59\u7c7b\u4f3c!</p>"},{"location":"src_analysis/stl/unordered_map/","title":"C++ STL\u6e90\u7801\u5256\u6790\u4e4bunordered_map\u3001unordered_multimap\u3001unordered_set\u3001unordered_multiset","text":""},{"location":"src_analysis/stl/unordered_map/#0","title":"0.\u5bfc\u8bed","text":"<p>\u524d\u9762\u5b66\u5230\u4e86hashtable\uff0c\u800c\u8fd9\u8282\u662fhashtable\u7684\u5bb9\u5668\u9002\u914d\u5668\uff1aunordered_map\u3002</p> <p>\u6240\u4ee5\u65e0\u5e8fmap\u7684\u5e95\u5c42\u5bb9\u5668\u91c7\u7528hashtable\u3002</p> <p>unordered_map\u4e0eunordered_multimap\u7684\u6e90\u7801\u5728<code>unordered_map.h</code>\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u3002</p>"},{"location":"src_analysis/stl/unordered_map/#1unordered_mapunordered_multimap","title":"1.unordered_map\u4e0eunordered_multimap\u672c\u8d28\u533a\u522b","text":"<p>\u5148\u6765\u770b\u4e00\u4e0bunordered_map\u6e90\u7801\uff1a</p> <pre><code>template&lt;class _Key, class _Tp,\nclass _Hash = hash&lt;_Key&gt;,\nclass _Pred = std::equal_to&lt;_Key&gt;,\nclass _Alloc = std::allocator&lt;std::pair&lt;const _Key, _Tp&gt; &gt; &gt;\nclass unordered_map\n{\ntypedef __umap_hashtable&lt;_Key, _Tp, _Hash, _Pred, _Alloc&gt;  _Hashtable;\n_Hashtable _M_h;\n};\n</code></pre> <p>\u53bb\u770b\u5e95\u5c42\u5bb9\u5668\u7684<code>__umap_hashtable</code>\u7684\u58f0\u660e\uff1a</p> <pre><code>template&lt;bool _Cache&gt;\nusing __umap_traits = __detail::_Hashtable_traits&lt;_Cache, false, true&gt;;\n\ntemplate&lt;typename _Key,\ntypename _Tp,\ntypename _Hash = hash&lt;_Key&gt;,\ntypename _Pred = std::equal_to&lt;_Key&gt;,\ntypename _Alloc = std::allocator&lt;std::pair&lt;const _Key, _Tp&gt; &gt;,\ntypename _Tr = __umap_traits&lt;__cache_default&lt;_Key, _Hash&gt;::value&gt;&gt;\nusing __umap_hashtable = _Hashtable&lt;_Key, std::pair&lt;const _Key, _Tp&gt;,\n_Alloc, __detail::_Select1st,\n_Pred, _Hash,\n__detail::_Mod_range_hashing,\n__detail::_Default_ranged_hash,\n__detail::_Prime_rehash_policy, _Tr&gt;;\n</code></pre> <p>\u53ef\u4ee5\u5f97\u5230\u4e0b\u9762\u7ed3\u8bba: hashtable\u7684\u6a21\u677f\u53c2\u6570\uff1a</p> <pre><code>template&lt;typename _Key, typename _Value, typename _Alloc,\ntypename _ExtractKey, typename _Equal,\ntypename _H1, typename _H2, typename _Hash,\ntypename _RehashPolicy, typename _Traits&gt;\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cunordered_map\u91c7\u7528\uff1a - H1\u4e3ahash - H2\u4e3a_Mod_range_hashing - _Hash\u4e3a_Default_ranged_hash - _RehashPolicy\u4e3a_Prime_rehash_policy - _Traits\u4e3a_Tr \u5bf9\u4e8e\u6700\u540e\u7684_Tr,\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u6b63\u662f\u56e0\u4e3a\u8fd9\u4e2a\u53c2\u6570\uff0c\u624d\u6709undered_multimap\u3002 \u5177\u4f53\u5206\u6790\u770b\u4e0b\u9762\uff1a <p>_Tr\u5982\u4e0b\uff1a</p> <pre><code>typename _Tr = __umap_traits&lt;__cache_default&lt;_Key, _Hash&gt;::value&gt;&gt;\n</code></pre> <p>_Tr\u4f7f\u7528\u4e86<code>__umap_traits</code>\uff0c\u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\u770b\uff1a</p> <pre><code>template&lt;bool _Cache&gt;\nusing __umap_traits = __detail::_Hashtable_traits&lt;_Cache, false, true&gt;;\n</code></pre> <p>\u53ef\u4ee5\u5bf9\u6bd4\u4e0a\u8ff0\u4e24\u4e2a\u53d1\u73b0__umap_traits\u91cc\u9762\u6709\u4e00\u4e32__cache_default\uff0c\u6211\u4eec\u518d\u770b\u4e00\u4e0b\u6a21\u677f\u53c2\u6570\u4e3abool\u7c7b\u578b\uff0c\u6545\u53ef\u4ee5\u6253\u5370\u51fa\u6765\u662ffalse\u8fd8\u662ftrue\uff0c\u7ecf\u8fc7\u5b9e\u6d4b\uff0c\u4e3afalse\uff0c\u8868\u793a\u4e0d\u7f13\u5b58hash code\u3002</p> <pre><code>template&lt;typename _Tp, typename _Hash&gt;\nusing __cache_default\n=  __not_&lt;__and_&lt;__is_fast_hash&lt;_Hash&gt;,\n__detail::__is_noexcept_hash&lt;_Tp, _Hash&gt;&gt;&gt;;\n</code></pre> <p>\u7ee7\u7eed\u770b<code>__umap_traits</code>\uff0c\u8fd9\u4e2a\u5b9e\u9645\u4e0a\u662f\u8c03\u7528<code>_Hashtable_traits</code>\uff0c\u6211\u4eec\u7ee7\u7eed\u5f80\u4e0b\uff1a</p> <pre><code>template&lt;bool _Cache_hash_code, bool _Constant_iterators, bool _Unique_keys&gt;\nstruct _Hashtable_traits\n{\nusing __hash_cached = __bool_constant&lt;_Cache_hash_code&gt;;\nusing __constant_iterators = __bool_constant&lt;_Constant_iterators&gt;;\nusing __unique_keys = __bool_constant&lt;_Unique_keys&gt;;\n};\n</code></pre> <p>\u770b\u5230\u6709\u4e09\u4e2ausing\uff0c\u7406\u89e3\u4e3a\u4e09\u4e2atypedef\uff0c\u4f9d\u6b21\u8868\u793a\uff1ahash code\u7f13\u5b58\u4e0e\u5426\uff0c\u662f\u5426\u662f\u5e38\u8fed\u4ee3\u5668\uff0c\u662f\u5426\u662f\u552f\u4e00\u7684key\uff0c\u518d\u5f80\u4e0a\u56de\u5934\u770b\uff0c\u4f20\u9012\u8fdb\u6765\u7684\u662f\u4e09\u4e2a\u6a21\u677f\u53c2\u6570\uff0c\u5206\u522b\u662ffalse,false,true\uff0c\u4e5f\u9a8c\u8bc1\u4e86unordered_map\u662f\u552f\u4e00\u7684key\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684undered_multimap\u5c31\u662f\u4e0d\u552f\u4e00\u7684key\uff0c\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u4e3afalse\u3002\u6211\u4eec\u7ffb\u9605\u5230\u76f8\u5e94\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>/// Base types for unordered_multimap.\ntemplate&lt;bool _Cache&gt;\nusing __ummap_traits = __detail::_Hashtable_traits&lt;_Cache, false, false&gt;;\n</code></pre> <p>\u5c0f\u7ed3\uff0c\u5728\u4e0a\u9762\u5206\u6790\uff0c\u6211\u4eec\u77e5\u9053\u4e86unordered_map\u4e0eunordered_multimap\u7684\u672c\u8d28\u533a\u522b\uff0c\u4e5f\u53d1\u73b0\u4e86\u5982\u4f55\u5728\u5e95\u5c42\u6e90\u7801\u4e0a\u7528\u4e00\u4e2a\u5bb9\u5668\u5b9e\u73b0\u4e24\u4e2a\u5bb9\u5668\u9002\u914d\u5668\uff01</p>"},{"location":"src_analysis/stl/unordered_map/#2undered_setunordered_multiset","title":"2.undered_set\u4e0eunordered_multiset\u672c\u8d28\u533a\u522b","text":"<p>\u5206\u6790\u540c\u524d\u9762\u4e00\u6837\uff0c\u5148\u770bundered_set:</p> <pre><code>template&lt;class _Value,\nclass _Hash = hash&lt;_Value&gt;,\nclass _Pred = std::equal_to&lt;_Value&gt;,\nclass _Alloc = std::allocator&lt;_Value&gt; &gt;\nclass unordered_set\n{\ntypedef __uset_hashtable&lt;_Value, _Hash, _Pred, _Alloc&gt;  _Hashtable;\n_Hashtable _M_h;\n}\n\ntemplate&lt;bool _Cache&gt;\nusing __uset_traits = __detail::_Hashtable_traits&lt;_Cache, true, true&gt;;\n\ntemplate&lt;typename _Value,\ntypename _Hash = hash&lt;_Value&gt;,\ntypename _Pred = std::equal_to&lt;_Value&gt;,\ntypename _Alloc = std::allocator&lt;_Value&gt;,\ntypename _Tr = __uset_traits&lt;__cache_default&lt;_Value, _Hash&gt;::value&gt;&gt;\nusing __uset_hashtable = _Hashtable&lt;_Value, _Value, _Alloc,\n__detail::_Identity, _Pred, _Hash,\n__detail::_Mod_range_hashing,\n__detail::_Default_ranged_hash,\n__detail::_Prime_rehash_policy, _Tr&gt;;\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u4f20\u9012\u7ed9<code>_Hashtable_traits</code>\u7684\u662ffalse,true,true\u3002\u5bf9\u4e8eundered_set\u6765\u8bf4\u4f7f\u7528\u7684\u662fconst iterator\u4e0e\u552f\u4e00\u7684key,\u6211\u4eec\u518d\u770b\u4e00\u4e0bunordered_multiset\uff1a</p> <pre><code>template&lt;bool _Cache&gt;\nusing __umset_traits = __detail::_Hashtable_traits&lt;_Cache, true, false&gt;;\n</code></pre> <p>\u518d\u5c06\u4e24\u8005\u5bf9\u6bd4\u4e00\u4e0b\uff0c\u672c\u8d28\u5c31\u662fundered_set\u4e0d\u5141\u8bb8key\u91cd\u590d\uff0c\u800cundered_multiset\u5141\u8bb8key\u91cd\u590d\u3002</p>"},{"location":"src_analysis/stl/unordered_map/#3","title":"3.\u4e09\u5927\u7ed3\u8bba","text":"<p>\u73b0\u5728\uff0c\u6211\u4eec\u6709\u4e86\u524d\u9762\u57fa\u7840\uff0c\u4f9d\u6b21\u5217\u51fa\u524d\u9762\u56db\u4e2a\u5bb9\u5668\u9002\u914d\u5668\uff1a</p> <p>(1) unordered_map</p> <pre><code>template&lt;bool _Cache&gt;\nusing __umap_traits = __detail::_Hashtable_traits&lt;_Cache, false, true&gt;;\n</code></pre> <p>(2) undered_multimap</p> <pre><code>template&lt;bool _Cache&gt;\nusing __umap_traits = __detail::_Hashtable_traits&lt;_Cache, false, false&gt;;\n</code></pre> <p>(3) undered_set</p> <pre><code>template&lt;bool _Cache&gt;\nusing __uset_traits = __detail::_Hashtable_traits&lt;_Cache, true, true&gt;;\n</code></pre> <p>(4) undered_set</p> <pre><code>template&lt;bool _Cache&gt;\nusing __uset_traits = __detail::_Hashtable_traits&lt;_Cache, true, false&gt;;\n</code></pre> <p>\u5bf9\u6bd4\u540e\uff0c\u5f97\u51fa</p> <ul> <li>\u7ed3\u8bba1\uff1aunordered_map\u4e0eundered_set\u4e0d\u5141\u8bb8key\u91cd\u590d,\u800c\u5e26multi\u7684\u5219\u5141\u8bb8key\u91cd\u590d\uff1b</li> <li>\u7ed3\u8bba2\uff1aunordered_map\u4e0eundered_multimap\u91c7\u7528\u7684\u8fed\u4ee3\u5668\u662fiterator\uff0c\u800cundered_set\u4e0eundered_multiset\u91c7\u7528\u7684\u8fed\u4ee3\u5668\u662fconst_iterator\u3002</li> <li>\u7ed3\u8bba3\uff1aunordered_map\u4e0eundered_multimap\u7684key\u662fkey\uff0cvalue\u662fkey+value\uff1b\u800cundered_set\u4e0eundered_multiset\u7684key\u662fValue\uff0cValue\u4e5f\u662fKey\u3002</li> </ul> <p>\u6700\u540e\u4e00\u4e2a\u7ed3\u8bba\u5bf9\u6bd4\u770b\u4e0b\u9762(\u6211\u4eec\u770b\u4f20\u9012\u7ed9hashtable\u7684\u7b2c\u4e00\u4e0e\u7b2c\u4e8c\u4e2a\u53c2\u6570)\uff1a</p> <p>unordered_map\u4e0eundered_multimap\uff1a</p> <pre><code>using __umap_hashtable = _Hashtable&lt;_Key, std::pair&lt;const _Key, _Tp&gt;,\n_Alloc, __detail::_Select1st,\n_Pred, _Hash,\n__detail::_Mod_range_hashing,\n__detail::_Default_ranged_hash,\n__detail::_Prime_rehash_policy, _Tr&gt;;\n</code></pre> <p>undered_set\u4e0eundered_multiset\uff1a</p> <pre><code>template&lt;typename _Value,\ntypename _Hash = hash&lt;_Value&gt;,\ntypename _Pred = std::equal_to&lt;_Value&gt;,\ntypename _Alloc = std::allocator&lt;_Value&gt;,\ntypename _Tr = __uset_traits&lt;__cache_default&lt;_Value, _Hash&gt;::value&gt;&gt;\nusing __uset_hashtable = _Hashtable&lt;_Value, _Value, _Alloc,\n__detail::_Identity, _Pred, _Hash,\n__detail::_Mod_range_hashing,\n__detail::_Default_ranged_hash,\n__detail::_Prime_rehash_policy, _Tr&gt;;\n</code></pre>"},{"location":"src_analysis/stl/unordered_map/#4unordered_map","title":"4.unordered_map\u91cd\u8981\u51fd\u6570","text":"<p>\u521d\u59cb\u5316</p> <p>\u53ef\u4ee5\u5728\u4e0b\u9762\u7684\u6784\u9020\u51fd\u6570\u4e2d\u770b\u5230unordered_map\u7684\u9ed8\u8ba4\u6876\u6570\u4e3a10\u3002</p> <p>\u5728unordered_map\u7684\u5e95\u5c42\u9ed8\u8ba4\u91c7\u7528hasher(),\u4e5f\u5c31\u662fH1,\u4e5f\u5c31\u662fstd::hash</p> <pre><code>unordered_map(size_type __n = 10,\nconst hasher&amp; __hf = hasher(),\nconst key_equal&amp; __eql = key_equal(),\nconst allocator_type&amp; __a = allocator_type())\n: _M_h(__n, __hf, __eql, __a)\n{ }\n</code></pre> <p>\u4e0b\u9762\u6d4b\u8bd5\u662f\u5426\u91c7\u7528\u9ed8\u8ba4\u7684hash\uff1a</p> <pre><code>unordered_map&lt;string,int&gt; um;\nhash&lt;string&gt; h;\ncout&lt;&lt;um.hash_function()(\"hhhhhawq\")&lt;&lt;endl;\ncout&lt;&lt;h(\"hhhhhawq\")&lt;&lt;endl;\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>9074142923776869151\n9074142923776869151\n</code></pre> <p>\u8fdb\u4e00\u6b65\u9a8c\u8bc1\u4e86\u91c7\u7528\u9ed8\u8ba4\u7684hash\u3002</p> <p>\u662f\u5426\u7a7a\u3001\u5927\u5c0f\u3001\u6700\u5927\u5927\u5c0f</p> <pre><code>bool\nempty() const noexcept\n{ return _M_h.empty(); }\n///  Returns the size of the %unordered_map.\nsize_type\nsize() const noexcept\n{ return _M_h.size(); }\n\n///  Returns the maximum size of the %unordered_map.\nsize_type\nmax_size() const noexcept\n{ return _M_h.max_size(); }\n</code></pre> <p>begin\u4e0eend</p> <pre><code>iterator\nbegin() noexcept\n{ return _M_h.begin(); }\niterator\nend() noexcept\n{ return _M_h.end(); }\n</code></pre> <p>insert \u4e94\u79cd\u63d2\u5165\u65b9\u5f0f</p> <pre><code>// value\nstd::pair&lt;iterator, bool&gt;\ninsert(const value_type&amp; __x)\n{ return _M_h.insert(__x); }\n\n// pair \nstd::pair&lt;iterator, bool&gt;\ninsert(_Pair&amp;&amp; __x)\n{ return _M_h.insert(std::forward&lt;_Pair&gt;(__x)); }\n\n// iterator+value\niterator\ninsert(const_iterator __hint, const value_type&amp; __x)\n{ return _M_h.insert(__hint, __x); }\n\n\n// first\u5230last\u8303\u56f4\u63d2\u5165\ntemplate&lt;typename _InputIterator&gt;\nvoid\ninsert(_InputIterator __first, _InputIterator __last)\n{ _M_h.insert(__first, __last); }\n\n// \u521d\u59cb\u5316\u5217\u8868\u63d2\u5165\n\nvoid\ninsert(initializer_list&lt;value_type&gt; __l)\n{ _M_h.insert(__l); }\n</code></pre> <p>\u5220\u9664</p> <p>\u4e09\u79cd\u5220\u9664\u65b9\u5f0f</p> <pre><code>// iterator\niterator\nerase(iterator __position)\n{ return _M_h.erase(__position); }\n\n// key\nsize_type\nerase(const key_type&amp; __x)\n{ return _M_h.erase(__x); }\n\n// first\u5230last\u8303\u56f4\n\niterator\nerase(const_iterator __first, const_iterator __last)\n{ return _M_h.erase(__first, __last); </code></pre> <p>\u6e05\u9664</p> <pre><code>void\nclear() noexcept\n{ _M_h.clear(); }\n</code></pre> <p>hash_function</p> <p>\u5f97\u5230\u8be5unordered_map\u7684hash_function</p> <pre><code>hasher\nhash_function() const\n{ return _M_h.hash_function(); }\n</code></pre> <p>\u4f7f\u7528\uff1a</p> <pre><code>unordered_map&lt;string,int&gt; um;\ncout&lt;&lt;um.hash_function()(\"hhhhhawq\")&lt;&lt;endl; //\u4f20\u9012\u7684\u5185\u5bb9\u8981\u4e0e\u4e0a\u9762key\u7c7b\u578b\u4e00\u81f4\u3002\n</code></pre> <p>key_eq key_eq\u8fd4\u56de\u7684\u662fstd::equal_to \u4f7f\u7528\u5982\u4e0b\uff1a</p> <pre><code>unordered_map&lt;string,int&gt; um;\ncout&lt;&lt;um.key_eq()(\"1\",\"2\")&lt;&lt;endl;\n</code></pre> <p>\u67e5\u627e\u4e0e\u83b7\u53d6value</p> <pre><code>iterator\nfind(const key_type&amp; __x)\n{ return _M_h.find(__x); }\nmapped_type&amp;\noperator[](const key_type&amp; __k)\n{ return _M_h[__k]; }\nmapped_type&amp;\nat(const key_type&amp; __k)\n{ return _M_h.at(__k); }\n</code></pre> <p>\u9664\u4e86\u8fd9\u4e9b\u51fd\u6570\u8fd8\u6709\u83b7\u53d6\u6876\uff0c\u6700\u5927\u6876\u6570\u3001\u52a0\u8f7d\u56e0\u5b50\u3001rehash\u7b49\u7b49\uff0c\u5c31\u662f\u6ca1\u6709\u6392\u5e8f\uff0c\u56e0\u4e3ahashtable\u6ca1\u6709\u63d0\u4f9b\u6392\u5e8f\u529f\u80fd\u3002hashtable\u5728\u67e5\u627e\u3001\u5220\u9664\u548c\u63d2\u5165\u8282\u70b9\u662f\u5e38\u6570\u65f6\u95f4\uff0c\u4f18\u4e8eRB-Tree\u7ea2\u9ed1\u6811\u3002</p> <p>\u540c\u7406\uff0cunordered_set\u3001unordered_multiset\u3001unordered_multimap\u4e0eunordered_map\u4e00\u6837\u7684\u51fd\u6570\uff0c\u6240\u4ee5\u5c31\u4e0d\u9610\u8ff0\u4e86\u3002</p>"},{"location":"src_analysis/stl/vector/","title":"STL\u6e90\u7801\u5256\u6790\u4e4bvector","text":""},{"location":"src_analysis/stl/vector/#0","title":"0.\u5bfc\u8bed","text":"<p>vector\u7684\u6570\u636e\u5b89\u6392\u4ee5\u53ca\u64cd\u4f5c\u65b9\u5f0f\uff0c\u4e0earray\u975e\u5e38\u76f8\u4f3c\u3002\u4e24\u8005\u7684\u552f\u4e00\u5dee\u522b\u5728\u4e8e\u7a7a\u95f4\u7684\u8fd0\u7528\u7684\u7075\u6d3b\u6027\uff0carray\u662f\u9759\u6001\u7684\uff0c\u4e00\u65e6\u914d\u7f6e\u4e86\u5c31\u4e0d\u80fd\u6539\u53d8\uff0c\u800c vector\u662f\u52a8\u6001\u7a7a\u95f4\uff0c\u968f\u7740\u5143\u7d20\u7684\u52a0\u5165\uff0c\u5b83\u7684\u5185\u90e8\u673a\u5236\u4f1a\u81ea\u884c\u6269\u5145\u7a7a\u95f4\u4ee5\u5bb9\u7eb3\u65b0\u5143\u7d20\u3002\u4e0b\u9762\u4e00\u8d77\u6765\u770b\u4e00\u4e0bvector\u7684\"\u5185\u90e8\u673a\u5236\"\uff0c\u600e\u4e48\u6765\u5b9e\u73b0\u7a7a\u95f4\u914d\u7f6e\u7b56\u7565\u7684\u3002</p>"},{"location":"src_analysis/stl/vector/#1vector","title":"1.vector","text":"<p>\u5728<code>_Vector_base</code>\u4e2d\u5f00\u5934\u6709\u4e24\u884c\u6bd4\u8f83\u96be\u7406\u89e3\uff0c\u4e0b\u9762\u4e00\u4e2a\u4e00\u4e2a\u5206\u6790\uff1a</p>"},{"location":"src_analysis/stl/vector/#11-_tp_alloc_type","title":"1.1 _Tp_alloc_type","text":"<p>\u5f00\u5934\u5904\u5b9a\u4e49\uff1a</p> <pre><code> typedef typename __gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template rebind&lt;_Tp&gt;::other _Tp_alloc_type;\n</code></pre> <p>\u5728<code>__gnu_cxx::__alloc_traits</code>\u4e2d\uff1a\u5bf9\u5e94\u6587\u4ef6\u4e3a\uff1a<code>ext/alloc_traits.h</code></p> <pre><code> template&lt;typename _Tp&gt;\nstruct rebind\n{ typedef typename _Base_type::template rebind_alloc&lt;_Tp&gt; other; };\n</code></pre> <p>\u7b49\u4ef7\u4e8e</p> <pre><code>typename __gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template rebind&lt;_Tp&gt;::other \n</code></pre> <p>\u7b49\u4ef7\u4e8e\uff1a</p> <pre><code>typename _Base_type::template rebind_alloc&lt;_Tp&gt;\n</code></pre> <p>\u800c<code>_Base_type</code>\u662f\uff1a</p> <pre><code>typedef std::allocator_traits&lt;_Alloc&gt;           _Base_type;\n</code></pre> <p>\u6240\u4ee5\u4e0a\u8ff0\u7b49\u4ef7\u4e8e\uff1a</p> <pre><code>typename std::allocator_traits&lt;_Alloc&gt;::template rebind_alloc&lt;_Tp&gt;\n</code></pre> <p>\u7ee7\u7eed\u5230<code>allocator_traits</code>\u4e2d\u5bfb\u627e</p> <p>\u627e\u5230\u4e86\uff1a</p> <pre><code>  template&lt;typename _Up&gt;\nusing rebind_alloc = allocator&lt;_Up&gt;;\n</code></pre> <p>\u4e8e\u662f\uff1a</p> <pre><code>std::allocator_traits&lt;_Alloc&gt;::template rebind_alloc&lt;_Tp&gt;\n</code></pre> <p>\u7b49\u4ef7\u4e8e\uff1a</p> <pre><code>allocator&lt;_Tp&gt;\n</code></pre> <p>\u5c0f\u7ed3</p> <pre><code> typedef typename __gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template rebind&lt;_Tp&gt;::other _Tp_alloc_type;\n</code></pre> <p>\u7b49\u4ef7\u4e8e\uff1a</p> <pre><code>typedef allocator&lt;_Tp&gt; _Tp_alloc_type\n</code></pre>"},{"location":"src_analysis/stl/vector/#12-pointer","title":"1.2 pointer","text":"<p>\u800c<code>pointer</code>\uff1a</p> <pre><code> typedef typename __gnu_cxx::__alloc_traits&lt;_Tp_alloc_type&gt;::pointer\npointer;\n</code></pre> <p>\u7b49\u4ef7\u4e8e\uff1a</p> <pre><code> typedef typename __gnu_cxx::__alloc_traits&lt;allocator&lt;_Tp&gt;&gt;::pointer\npointer;\n</code></pre> <p>\u6839\u636e\u4e0b\u9762\u4e24\u884c\uff1a</p> <pre><code>typedef std::allocator_traits&lt;_Alloc&gt;           _Base_type;\ntypedef typename _Base_type::pointer            pointer;\n</code></pre> <p>\u53c8\u7b49\u4ef7\u4e8e\uff1a</p> <pre><code> typedef std::allocator_traits&lt;_Alloc&gt;::pointer\n        pointer;\n</code></pre> <p>\u5728<code>allocator_traits</code>\u4e2d\u627e\u5230\u4e0b\u9762\uff1a</p> <pre><code>  /**\n   * @brief   The allocator's pointer type.\n   *\n   * @c Alloc::pointer if that type exists, otherwise @c value_type*\n  */\ntypedef __pointer pointer;\n</code></pre> <p>\u6ce8\u91ca\u4e2d\u8bf4\u4e86\u5982\u679c\u5b58\u5728\u5c31\u662f<code>Alloc::pointer</code>\uff0c\u5426\u5219\u4e3a<code>value_type *</code>\u3002</p> <p>\u5c0f\u7ed3</p> <pre><code> typedef typename __gnu_cxx::__alloc_traits&lt;_Tp_alloc_type&gt;::pointer\npointer;\n// \u6216\u8005\ntypedef typename __gnu_cxx::__alloc_traits&lt;allocator&lt;_Tp&gt;&gt;::pointer\npointer;\n</code></pre> <p>\u7b49\u4ef7\u4e8e</p> <pre><code>/**\n* @brief   The allocator's pointer type.\n*\n* @c Alloc::pointer if that type exists, otherwise @c value_type*\n*/\ntypedef __pointer pointer;\n</code></pre> <p>\u5982\u679c\u5b58\u5728<code>_Tp_alloc_type::pointer</code>\u4e5f\u5c31\u662f<code>allocator&lt;_Tp&gt;</code>\u5b58\u5728\u5c31\u662f<code>allocator&lt;_Tp&gt;::pointer</code>\uff0c</p> <p>\u8fd9\u4e2a\u770b<code>allocator.h</code>\u6e90\u7801\uff1a</p> <pre><code>typedef _Tp*       pointer;\n</code></pre> <p>\u5426\u5219\u4e3a<code>value_type*</code>\u3002\u800c<code>value_type</code>\u4e3a\uff1a</p> <pre><code>typedef typename _Alloc::value_type value_type;\n</code></pre> <p>\u6240\u4ee5<code>value_type*</code>\u63a8\u5bfc\u51fa\u4e3a\uff1a</p> <pre><code>_Tp::value_type*\n</code></pre>"},{"location":"src_analysis/stl/vector/#13-vector","title":"1.3 vector\u7684\u5185\u5b58\u7ba1\u7406","text":"<p><code>_Vector_base</code>\u4e2d\u6709\u4e00\u4e2a\u5185\u5b58\u7ba1\u7406\u5668<code>_Vector_impl</code>\u7c7b\uff0c\u8be5\u7ed3\u6784\u4f53\u7ee7\u627f<code>allocator</code>(\u6839\u636e\u4e0a\u8ff01.1\u7b49\u4ef7\u6761\u4ef6\u5f97\u51fa)\u3002</p> <pre><code>template&lt;typename _Tp, typename _Alloc&gt;\nstruct _Vector_base {\n//__alloc_traits -&gt; allocator_traits\n// typedef allocator&lt;_Tp&gt; _Tp_alloc_type\ntypedef typename __gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template\nrebind&lt;_Tp&gt;::other _Tp_alloc_type;\n//  _Tp::value_type* or _Tp*\ntypedef typename __gnu_cxx::__alloc_traits&lt;_Tp_alloc_type&gt;::pointer\npointer;\n\nstruct _Vector_impl\n: public _Tp_alloc_type {\npointer _M_start;       // \u4f7f\u7528\u7a7a\u95f4\u8d77\u59cb\u4f4d\u7f6e    \npointer _M_finish;      // \u4f7f\u7528\u7a7a\u95f4\u7ed3\u675f\u4f4d\u7f6e\npointer _M_end_of_storage;   // \u53ef\u4f7f\u7528\u7a7a\u95f4\u7ed3\u675f\u4f4d\u7f6e \n\n_Vector_impl()\n: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0) {}\n\n_Vector_impl(_Tp_alloc_type const &amp;__a)\n\n// vector\u6570\u636e\u4ea4\u6362\uff0c\u53ea\u4ea4\u6362\u5185\u5b58\u5730\u5740\uff0c\u4e0d\u4ea4\u6362\u6570\u636e\nvoid _M_swap_data(_Vector_impl &amp;__x)\n\n_GLIBCXX_NOEXCEPT\n{\nstd::swap(_M_start, __x._M_start);\nstd::swap(_M_finish, __x._M_finish);\nstd::swap(_M_end_of_storage, __x._M_end_of_storage);\n}\n};\n\npublic:\ntypedef _Alloc allocator_type;\n// \u524d\u9762\u6211\u4eec\u77e5\u9053_Vector_impl\u7ee7\u627f\u81eaallocator\u5206\u914d\u5668\uff0c\u800c\u8fd9\u4e2a\u53c8\u662f_Tp_alloc_type\uff0c\u6240\u4ee5\u8fd9\u91cc\u8fd4\u56de\u7684\u5c31\u662f_M_impl\u7684\u57fa\u7c7b\u3002\n_Tp_alloc_type &amp;\n_M_get_Tp_allocator()\n\n_GLIBCXX_NOEXCEPT\n{ return *static_cast&lt;_Tp_alloc_type *&gt;(&amp;this-&gt;_M_impl); }\n\nconst _Tp_alloc_type &amp;\n_M_get_Tp_allocator() const\n\n_GLIBCXX_NOEXCEPT\n{ return *static_cast&lt;const _Tp_alloc_type *&gt;(&amp;this-&gt;_M_impl); }\n\nallocator_type    // \u83b7\u53d6\u4f20\u9012\u8fdb\u6765\u7684\u5206\u914d\u5668      \nget_allocator() const\n\n_GLIBCXX_NOEXCEPT\n{ return allocator_type(_M_get_Tp_allocator()); }\n\n_Vector_base()\n: _M_impl() {}\n\n_Vector_base(const allocator_type &amp;__a)\n\n_GLIBCXX_NOEXCEPT\n: _M_impl(__a) {}\n\n_Vector_base(size_t __n)\n: _M_impl() { _M_create_storage(__n); }\n\n_Vector_base(size_t __n, const allocator_type &amp;__a)\n: _M_impl(__a) { _M_create_storage(__n); }\n\n#if __cplusplus &gt;= 201103L\n_Vector_base(_Tp_alloc_type&amp;&amp; __a) noexcept\n: _M_impl(std::move(__a)) { }\n\n// \u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u53ea\u4ea4\u63623\u4e2a\u6307\u9488\uff0c\u4e0dcopy\u6570\u636e\n_Vector_base(_Vector_base&amp;&amp; __x) noexcept\n: _M_impl(std::move(__x._M_get_Tp_allocator()))\n{ this-&gt;_M_impl._M_swap_data(__x._M_impl); }\n\n_Vector_base(_Vector_base&amp;&amp; __x, const allocator_type&amp; __a)\n: _M_impl(__a)\n{\nif (__x.get_allocator() == __a)\nthis-&gt;_M_impl._M_swap_data(__x._M_impl);\nelse\n{\nsize_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;\n_M_create_storage(__n);\n}\n}\n#endif\n\n~_Vector_base()\n\n_GLIBCXX_NOEXCEPT\n{\n_M_deallocate(this-&gt;_M_impl._M_start, this-&gt;_M_impl._M_end_of_storage\n- this-&gt;_M_impl._M_start);\n}\n\npublic:\n_Vector_impl _M_impl;\n\npointer _M_allocate(size_t __n) {\ntypedef __gnu_cxx::__alloc_traits &lt;_Tp_alloc_type&gt; _Tr;\nreturn __n != 0 ? _Tr::allocate(_M_impl, __n) : 0;  // \u540c_M_deallocate\uff0c\u4e00\u76f4\u5f80\u540e\u8c03\u7528\u7684\u5c31\u662fmalloc\u51fd\u6570\n}\n\nvoid _M_deallocate(pointer __p, size_t __n) {\ntypedef __gnu_cxx::__alloc_traits &lt;_Tp_alloc_type&gt; _Tr; if (__p)\n_Tr::deallocate(_M_impl, __p, __n); // \u6700\u540e\u8c03\u7528allocator_traits\u7684deallocate,\u800c\u8be5\u51fd\u6570\u53c8\u662f\u6839\u636e\u4f20\u9012\u8fdb\u6765\u7684_M_impl\u8fdb\u884cdeallocate,\u4e00\u76f4\u5f80\u540e\uff0c\u6700\u540e\u8c03\u7528\u7684\u5c31\u662ffree\u51fd\u6570\n}\n\nprivate:\nvoid _M_create_storage(size_t __n) {\nthis-&gt;_M_impl._M_start = this-&gt;_M_allocate(__n);\nthis-&gt;_M_impl._M_finish = this-&gt;_M_impl._M_start;\nthis-&gt;_M_impl._M_end_of_storage = this-&gt;_M_impl._M_start + __n;\n}\n};\n</code></pre> <p>\u5c0f\u7ed3\uff1a<code>_Vector_base</code>\u4e13\u95e8\u8d1f\u8d23<code>vector</code>\u7684\u5185\u5b58\u7ba1\u7406\uff0c\u5185\u90e8\u7c7b<code>_M_impl</code>\u901a\u8fc7\u7ee7\u627f<code>_Tp_alloc_type</code>(\u4e5f\u5c31\u662fallocator)\u5f97\u5230\u5185\u5b58\u5206\u914d\u91ca\u653e\u7684\u529f\u80fd\uff0c_M_allocate\u548c_M_deallocate\u5206\u522b\u5206\u914d\u548c\u91ca\u653evector\u6240\u7528\u5185\u5b58\uff0cvector\u53ea\u9700\u8981\u8d1f\u8d23\u5143\u7d20\u6784\u9020\u548c\u6790\u6784\u3002</p> <p>\u5728vector\u4e2d\uff0c\u9ed8\u8ba4\u5185\u5b58\u5206\u914d\u5668\u4e3a<code>std::allocator&lt;_Tp&gt;</code></p> <pre><code>template&lt;typename _Tp, typename _Alloc = std::allocator&lt;_Tp&gt;&gt;\nclass vector : protected _Vector_base&lt;_Tp, _Alloc&gt; {\n}\n</code></pre> <p>vector\u4ee3\u7801\u4e2d\u4f7f\u7528\u57fa\u7c7b\u7684\u5185\u5b58\u51fd\u6570\u53catypedef\u7b49\uff1a</p> <pre><code>template&lt;typename _Tp, typename _Alloc = std::allocator&lt;_Tp&gt;&gt;\nclass vector : protected _Vector_base&lt;_Tp, _Alloc&gt; {\ntypedef _Vector_base&lt;_Tp, _Alloc&gt; _Base;\ntypedef typename _Base::_Tp_alloc_type _Tp_alloc_type;\npublic:\ntypedef typename _Base::pointer pointer;\nprotected:\nusing _Base::_M_allocate;\nusing _Base::_M_deallocate;\nusing _Base::_M_impl;\nusing _Base::_M_get_Tp_allocator;\n}\n</code></pre>"},{"location":"src_analysis/stl/vector/#2vector","title":"2.vector\u8fed\u4ee3\u5668","text":"<p>\u5728vector\u4e2d\u4f7f\u7528\u4e86\u4e24\u79cd\u8fed\u4ee3\u5668\uff0c\u5206\u522b\u662f\u6b63\u5411<code>__normal_iterator</code>\u4e0e\u53cd\u5411\u8fed\u4ee3\u5668<code>reverse_iterator</code>:</p> <p>\u6b63\u5411\uff1a</p> <pre><code>typedef __gnu_cxx::__normal_iterator &lt;pointer, vector&gt; iterator;\ntypedef __gnu_cxx::__normal_iterator &lt;const_pointer, vector&gt; const_iterator;\n</code></pre> <p>\u53cd\u5411\uff1a</p> <pre><code>typedef std::reverse_iterator&lt;const_iterator&gt; const_reverse_iterator;\ntypedef std::reverse_iterator&lt;iterator&gt; reverse_iterator;\n</code></pre> <p><code>__normal_iterator</code>\u4e0e<code>reverse_iterator</code>\u90fd\u5b9a\u4e49\u4e8estl_iterator.h\uff0c\u5c01\u88c5\u4e86vector\u5143\u7d20\u7684\u6307\u9488\u3002</p>"},{"location":"src_analysis/stl/vector/#21","title":"2.1 \u6b63\u5411","text":"<pre><code>template&lt;typename _Iterator, typename _Container&gt;\nclass __normal_iterator\n{\nprotected:\n_Iterator _M_current;\n\ntypedef iterator_traits&lt;_Iterator&gt;      __traits_type;\n\npublic:\ntypedef _Iterator                   iterator_type;\n\n// iterator\u5fc5\u987b\u5305\u542b\u7684\u4e94\u79cdtypedef\ntypedef typename __traits_type::iterator_category iterator_category;\ntypedef typename __traits_type::value_type      value_type;\ntypedef typename __traits_type::difference_type     difference_type;\ntypedef typename __traits_type::reference   reference;\ntypedef typename __traits_type::pointer     pointer;\n\n_GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT\n: _M_current(_Iterator()) { }\n\nexplicit\n__normal_iterator(const _Iterator&amp; __i) _GLIBCXX_NOEXCEPT\n: _M_current(__i) { }\n\n// Allow iterator to const_iterator conversion\ntemplate&lt;typename _Iter&gt;\n__normal_iterator(const __normal_iterator&lt;_Iter,\ntypename __enable_if&lt;\n(std::__are_same&lt;_Iter, typename _Container::pointer&gt;::__value),\n_Container&gt;::__type&gt;&amp; __i) _GLIBCXX_NOEXCEPT\n: _M_current(__i.base()) { }\n\n// Forward iterator requirements\nreference\noperator*() const _GLIBCXX_NOEXCEPT\n{ return *_M_current; }\n\npointer\noperator-&gt;() const _GLIBCXX_NOEXCEPT\n{ return _M_current; }\n\n// \u524d\u7f6e++\n__normal_iterator&amp;\noperator++() _GLIBCXX_NOEXCEPT\n{\n++_M_current;\nreturn *this;\n}\n\n// \u540e\u7f6e++\n__normal_iterator\noperator++(int) _GLIBCXX_NOEXCEPT\n{ return __normal_iterator(_M_current++); }\n\n// \u524d\u7f6e--\n// Bidirectional iterator requirements\n__normal_iterator&amp;\noperator--() _GLIBCXX_NOEXCEPT\n{\n--_M_current;\nreturn *this;\n}\n\n// \u540e\u7f6e--\n__normal_iterator\noperator--(int) _GLIBCXX_NOEXCEPT\n{ return __normal_iterator(_M_current--); }\n\n// \u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u90fd\u8981\u91cd\u8f7d[]\u64cd\u4f5c\u7b26\n// Random access iterator requirements\nreference\noperator[](difference_type __n) const _GLIBCXX_NOEXCEPT\n{ return _M_current[__n]; }\n\n// +=\u64cd\u4f5c\u7b26 \u8df3\u8dc3n\u4e2adifference_type\n__normal_iterator&amp;\noperator+=(difference_type __n) _GLIBCXX_NOEXCEPT\n{ _M_current += __n; return *this; }\n\n// +\u64cd\u4f5c\u7b26 \u8df3\u8dc3n\u4e2adifference_type\n__normal_iterator\noperator+(difference_type __n) const _GLIBCXX_NOEXCEPT\n{ return __normal_iterator(_M_current + __n); }\n\n// -=\u64cd\u4f5c\u7b26 \u540e\u9000n\u4e2adifference_type\n__normal_iterator&amp;\noperator-=(difference_type __n) _GLIBCXX_NOEXCEPT\n{ _M_current -= __n; return *this; }\n\n// -\u64cd\u4f5c\u7b26 \u540e\u9000n\u4e2adifference_type\n__normal_iterator\noperator-(difference_type __n) const _GLIBCXX_NOEXCEPT\n{ return __normal_iterator(_M_current - __n); }\n\nconst _Iterator&amp;\nbase() const _GLIBCXX_NOEXCEPT\n{ return _M_current; }\n};\n</code></pre> <p>_M_current\u662f\u6307\u5411\u8fed\u4ee3\u5668\u4f4d\u7f6e\u7684\u6307\u9488\uff0c\u8fd9\u662f\u4e00\u4e2a\u968f\u673a\u8bbf\u95ee\u578b\u6307\u9488\uff0coperator+\u548coperator-\u7b49\u79fb\u52a8\u64cd\u4f5c\u53ef\u4ee5\u76f4\u63a5\u79fb\u52a8\u5230\u76ee\u7684\u5730\uff0c\u975e\u968f\u673a\u8bbf\u95ee\u578b\u6307\u9488\u53ea\u80fd\u4e00\u6b65\u6b65\u79fb\u52a8\u3002</p>"},{"location":"src_analysis/stl/vector/#22","title":"2.2 \u53cd\u5411","text":"<p>vector\u8fd8\u4f1a\u4f7f\u7528reverse_iterator\uff0c\u5373\u9006\u5e8f\u8fed\u4ee3\u5668\uff0c\u987e\u540d\u601d\u4e49\uff0c\u5176\u79fb\u52a8\u65b9\u5411\u4e0e\u666e\u901a\u8fed\u4ee3\u5668\u76f8\u53cd</p> <pre><code>template&lt;typename _Iterator&gt;\nclass reverse_iterator\n: public iterator&lt;typename iterator_traits&lt;_Iterator&gt;::iterator_category,\ntypename iterator_traits&lt;_Iterator&gt;::value_type,\ntypename iterator_traits&lt;_Iterator&gt;::difference_type,\ntypename iterator_traits&lt;_Iterator&gt;::pointer,\ntypename iterator_traits&lt;_Iterator&gt;::reference&gt;\n{\nprotected:\n_Iterator current;\n\ntypedef iterator_traits&lt;_Iterator&gt;      __traits_type;\n\npublic:\ntypedef _Iterator                   iterator_type;\ntypedef typename __traits_type::difference_type difference_type;\ntypedef typename __traits_type::pointer     pointer;\ntypedef typename __traits_type::reference       reference;\n\n// \u7701\u7565\u4e0d\u91cd\u8981\u7684\u4ee3\u7801\n\n\n// \u8be5\u8fed\u4ee3\u5668\u662f\u4ece\u540e\u9762end()\u5f00\u59cb\uff0c\u9700\u8981\u5f80\u524d\u4e00\u6b65\uff0c\u624d\u53ef\u4ee5\u83b7\u53d6\u5230\u6709\u6548\u7684\u8fed\u4ee3\u5668\u4f4d\u7f6e\nreference\noperator*() const\n{\n_Iterator __tmp = current;\nreturn *--__tmp;\n}\n\n// \u901a\u8fc7\u8c03\u7528\u4e0a\u8ff0*\u64cd\u4f5c\u7b26\u76f4\u63a5\u5b9e\u73b0\npointer\noperator-&gt;() const\n{ return &amp;(operator*()); }\n\n\n// \u524d\u7f6e++\u64cd\u4f5c\u7b26\u5b8c\u6210\u540e\u9000\u4efb\u52a1\nreverse_iterator&amp;\noperator++()\n{\n--current;\nreturn *this;\n}\n\n// \u540e\u7f6e++\nreverse_iterator\noperator++(int)\n{\nreverse_iterator __tmp = *this;\n--current;\nreturn __tmp;\n}\n\n// \u524d\u7f6e--\u64cd\u4f5c\u7b26\u5b8c\u6210\u524d\u8fdb\u4efb\u52a1\nreverse_iterator&amp;\noperator--()\n{\n++current;\nreturn *this;\n}\n\n// \u540e\u7f6e--\nreverse_iterator\noperator--(int)\n{\nreverse_iterator __tmp = *this;\n++current;\nreturn __tmp;\n}\n\n// +\u64cd\u4f5c\u7b26\nreverse_iterator\noperator+(difference_type __n) const\n{ return reverse_iterator(current - __n); }\n\n// +=\u64cd\u4f5c\u7b26\nreverse_iterator&amp;\noperator+=(difference_type __n)\n{\ncurrent -= __n;\nreturn *this;\n}\n\n// -\u64cd\u4f5c\u7b26\nreverse_iterator\noperator-(difference_type __n) const\n{ return reverse_iterator(current + __n); }\n\n// -=\u64cd\u4f5c\u7b26\nreverse_iterator&amp;\noperator-=(difference_type __n)\n{\ncurrent += __n;\nreturn *this;\n}\n\n// []\u64cd\u4f5c\u7b26\nreference\noperator[](difference_type __n) const\n{ return *(*this + __n); }\n};\n</code></pre>"},{"location":"src_analysis/stl/vector/#3vector","title":"3.vector\u7684\u6570\u636e\u7ed3\u6784","text":"<p>vector\u5185\u5b58\u7531_M_impl\u4e2d\u7684M_start\uff0c_M_finish\uff0c_M_end_of_storage\u4e09\u4e2a\u6307\u9488\u7ba1\u7406\uff0c\u6240\u6709\u5173\u4e8e\u5730\u5740\uff0c\u5bb9\u91cf\u5927\u5c0f\u7b49\u64cd\u4f5c\u90fd\u9700\u8981\u7528\u5230\u8fd9\u4e09\u4e2a\u6307\u9488\uff1a</p> <pre><code>iterator begin() _GLIBCXX_NOEXCEPT\n{ return iterator(this-&gt;_M_impl._M_start); }\niterator end() _GLIBCXX_NOEXCEPT\n{ return iterator(this-&gt;_M_impl._M_finish); }\nreverse_iterator  rbegin() noexcept\n{ return reverse_iterator(end()); }\nreverse_iterator rend() noexcept\n{ return reverse_iterator(begin()); }\nsize_type size() const _GLIBCXX_NOEXCEPT\n{ return size_type(this-&gt;_M_impl._M_finish - this-&gt;_M_impl._M_start); }\nsize_type capacity() const _GLIBCXX_NOEXCEPT\n{ return size_type(this-&gt;_M_impl._M_end_of_storage - this-&gt;_M_impl._M_start); }\nbool empty() const _GLIBCXX_NOEXCEPT\n{ return begin() == end(); }\n</code></pre> <p></p> <p>_M_finish\u548c_M_end_of_storage\u4e4b\u95f4\u7684\u7a7a\u95f4\u6ca1\u6709\u6570\u636e\uff0c\u6709\u65f6\u5019\u8fd9\u662f\u4e00\u79cd\u6d6a\u8d39\uff0cc++11\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u6709\u7528\u7684\u51fd\u6570shrink_to_fit()\uff0c\u5c06\u8fd9\u6bb5\u672a\u4f7f\u7528\u7a7a\u95f4\u91ca\u653e\uff0c\u4e3b\u8981\u8c03\u7528\u4e86\u4e0b\u9762\u4ee3\u7801\uff0c</p> <pre><code>template&lt;typename _Alloc&gt;\nbool vector&lt;bool, _Alloc&gt;::\n_M_shrink_to_fit()\n{\nif (capacity() - size() &lt; int(_S_word_bit)) // 64\u4f4d\u7cfb\u7edf\u4e3a64bytes\nreturn false;\n__try\n{\n_M_reallocate(size());\nreturn true;\n}\n__catch(...)\n{ return false; }\n}\n</code></pre> <pre><code> template&lt;typename _Alloc&gt;\nvoid vector&lt;bool, _Alloc&gt;::\n_M_reallocate(size_type __n)\n{\n_Bit_type* __q = this-&gt;_M_allocate(__n);\nthis-&gt;_M_impl._M_finish = _M_copy_aligned(begin(), end(),\niterator(__q, 0));\nthis-&gt;_M_deallocate();\nthis-&gt;_M_impl._M_start = iterator(__q, 0);\nthis-&gt;_M_impl._M_end_of_storage = __q + _S_nword(__n);\n}\n</code></pre> <p>\u800c<code>_M_copy_aligned</code>\u901a\u8fc7\u4e24\u4e2astd::copy\u5b9e\u73b0:</p> <p>\u7b2c\u4e00\u6b21swap\u628a<code>__first</code>\u7684\u6307\u9488\u4e0e<code>__last</code>\u7684\u6307\u9488\u4e4b\u95f4\u7684\u6570\u636e\u62f7\u8d1d\u5230<code>__result</code>\u6307\u9488\u6240\u6307\u5411\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u7b2c\u4e8c\u6b21swap\u83b7\u5f97<code>__last</code>\u7684\u6307\u9488\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u3002</p> <pre><code>iterator\n_M_copy_aligned(const_iterator __first, const_iterator __last,\niterator __result)\n{\n// _Bit_type * _M_p; _Bit_type\u4e3aunsigned long\u7c7b\u578b\n_Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);\nreturn std::copy(const_iterator(__last._M_p, 0), __last,\niterator(__q, 0));\n}\n</code></pre> <p>\u5148\u5206\u914dsize()\u5927\u5c0f\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u7528\u4e8e\u5b58\u50a8<code>begin()</code>\u4e0e<code>end()</code>\u4e4b\u95f4\u7684\u6570\u636e\uff0c\u91ca\u653e\u539f\u6765\u7684vector\u7a7a\u95f4\uff0c\u65b0\u7684vector\u53ea\u5305\u542bsize()\u6570\u91cf\u7684\u6570\u636e\uff0c\u5e76\u4fee\u6539<code>_M_start</code>\u4e0e<code>_M_end_of_storage</code>\u6307\u5411\u3002</p>"},{"location":"src_analysis/stl/vector/#4vector","title":"4.vector\u6784\u9020\u4e0e\u6790\u6784","text":"<pre><code>//\u4f7f\u7528\u9ed8\u8ba4\u5185\u5b58\u5206\u914d\u5668\nvector() : _Base() { } //\u6307\u5b9a\u5185\u5b58\u5206\u914d\u5668\nexplicit vector(const allocator_type&amp; __a) : _Base(__a) { }\n//\u521d\u59cb\u5316\u4e3an\u4e2a__value\u503c\uff0c\u5982\u679c\u6ca1\u6307\u5b9a\u5c31\u4f7f\u7528\u8be5\u7c7b\u578b\u9ed8\u8ba4\u503c\nexplicit vector(size_type __n, const value_type&amp; __value = value_type(),\nconst allocator_type&amp; __a = allocator_type()): _Base(__n, __a)\n{ _M_fill_initialize(__n, __value); }\n//\u62f7\u8d1d\u6784\u9020\u51fd\u6570\nvector(const vector&amp; __x)\n: _Base(__x.size(),\n_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))\n{ this-&gt;_M_impl._M_finish =\nstd::__uninitialized_copy_a(__x.begin(), __x.end(),\nthis-&gt;_M_impl._M_start,\n_M_get_Tp_allocator());\n}\n//c++11\u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u83b7\u53d6__x\u7684M_start\uff0c_M_finish\uff0c_M_end_of_storage\uff0c\u5e76\u4e0d\u9700\u8981\u6570\u636e\u62f7\u8d1d\nvector(vector&amp;&amp; ) noexcept\n: _Base(std::move(__x)) { }\n//\u4ecelist\u4e2d\u62f7\u8d1d\u6570\u636e\uff0c\u4e5f\u662fc++11\u624d\u6709\u7684\nvector(initializer_list&lt;value_type&gt; __l,\nconst allocator_type&amp; __a = allocator_type())\n: _Base(__a)\n{\n_M_range_initialize(__l.begin(), __l.end(), random_access_iterator_tag());\n}\n//\u652f\u6301vector\u4f7f\u7528\u4e24\u4e2a\u8fed\u4ee3\u5668\u8303\u56f4\u5185\u7684\u503c\u521d\u59cb\u5316\uff0c\u9664\u4e86stl\u7684\u8fed\u4ee3\u5668\uff0c\u4e5f\u53ef\u4ee5\u662f\u6570\u7ec4\u5730\u5740\ntemplate&lt;typename _InputIterator,\ntypename = std::_RequireInputIter&lt;_InputIterator&gt;&gt;\nvector(_InputIterator __first, _InputIterator __last,\nconst allocator_type&amp; __a = allocator_type())\n: _Base(__a)\n{ _M_initialize_dispatch(__first, __last, __false_type()); }\n//\u53ea\u6790\u6784\u6240\u6709\u5143\u7d20\uff0c\u91ca\u653e\u5185\u5b58\u7531vector_base\u5b8c\u6210\n~vector() _GLIBCXX_NOEXCEPT\n{ std::_Destroy(this-&gt;_M_impl._M_start, this-&gt;_M_impl._M_finish,_M_get_Tp_allocator()); }\n</code></pre>"},{"location":"src_analysis/stl/vector/#5vector","title":"5.vector","text":"<p>\u63d2\u5165\u6d89\u53ca\u5230\u5185\u5b58\u5206\u914d\uff0c\u52a8\u6001\u8c03\u6574\uff0c\u4e0e\u4e00\u5f00\u59cb\u63d0\u5230\u7684vector\u4e0earray\u533a\u522b\uff0c\u5c31\u5728\u4e0b\u9762\u4f53\u73b0\u51fa\uff1a</p> <pre><code>typename vector&lt;_Tp, _Alloc&gt;::iterator\nvector&lt;_Tp, _Alloc&gt;::insert(iterator __position, const value_type&amp; __x)\n{\nconst size_type __n = __position \u2013 begin();\n//\u63d2\u5165\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u76f8\u5f53\u4e8epush_back\nif (this-&gt;_M_impl._M_finish != this-&gt;_M_impl._M_end_of_storage\n&amp;&amp; __position == end())\n{\n_Alloc_traits::construct(this-&gt;_M_impl, this-&gt;_M_impl._M_finish, __x);\n++this-&gt;_M_impl._M_finish;\n}\nelse\n{\n_M_insert_aux(__position, __x);\n}\nreturn iterator(this-&gt;_M_impl._M_start + __n);\n}\n</code></pre> <p>\u5176\u4e2d<code>_M_insert_aux</code>\u5b9e\u73b0\uff1a</p> <pre><code>template&lt;typename _Tp, typename _Alloc&gt;\nvoid vector&lt;_Tp, _Alloc&gt;::_M_insert_aux(iterator __position, const _Tp&amp; __x)\n{   //\u5185\u5b58\u7a7a\u95f4\u8db3\u591f\nif (this-&gt;_M_impl._M_finish != this-&gt;_M_impl._M_end_of_storage)\n{ _Alloc_traits::construct(this-&gt;_M_impl, this-&gt;_M_impl._M_finish,\n_GLIBCXX_MOVE(*(this-&gt;_M_impl._M_finish\n- 1)));\n++this-&gt;_M_impl._M_finish;\n//__position\u540e\u7684\u5143\u7d20\u4f9d\u6b21\u5411\u540e\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\n_GLIBCXX_MOVE_BACKWARD3(__position.base(),\nthis-&gt;_M_impl._M_finish - 2,\nthis-&gt;_M_impl._M_finish \u2013 1);\n//\u76ee\u6807\u5730\u5740\u8d4b\u503c\n*__position = _Tp(std::forward&lt;_Args&gt;(__args)...);\n}\nelse\n{\n//\u5185\u5b58\u52a0\u500d\nconst size_type __len =\n_M_check_len(size_type(1), \"vector::_M_insert_aux\");\nconst size_type __elems_before = __position - begin();\npointer __new_start(this-&gt;_M_allocate(__len));\npointer __new_finish(__new_start);\n__try\n{\n//\u7ed9position\u4f4d\u7f6e\u8d4b\u503c\n_Alloc_traits::construct(this-&gt;_M_impl,\n__new_start + __elems_before,\nstd::forward&lt;_Args&gt;(__args)...);\n__x);\n__new_finish = 0;\n//\u62f7\u8d1dposition\u4f4d\u7f6e\u524d\u5143\u7d20\n__new_finish = std::__uninitialized_move_if_noexcept_a\n(this-&gt;_M_impl._M_start, __position.base(),\n__new_start, _M_get_Tp_allocator());\n\n++__new_finish;\n//\u62f7\u8d1dposition\u4f4d\u7f6e\u540e\u5143\u7d20\n__new_finish\n= std::__uninitialized_move_if_noexcept_a\n(__position.base(), this-&gt;_M_impl._M_finish,\n__new_finish, _M_get_Tp_allocator());\n}\n__catch(...)\n{\nif (!__new_finish)\n_Alloc_traits::destroy(this-&gt;_M_impl,\n__new_start + __elems_before);\nelse\nstd::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());\n_M_deallocate(__new_start, __len);\n__throw_exception_again;\n}\n\n//\u6790\u6784\u539fvector\u6240\u6709\u5143\u7d20\nstd::_Destroy(this-&gt;_M_impl._M_start, this-&gt;_M_impl._M_finish,\n_M_get_Tp_allocator());\n//\u91ca\u653e\u539fvector\u5185\u5b58\u7a7a\u95f4\n_M_deallocate(this-&gt;_M_impl._M_start,\nthis-&gt;_M_impl._M_end_of_storage\uff0cthis-&gt;_M_impl._M_start);\n//vector\u5185\u5b58\u5730\u5740\u6307\u5411\u65b0\u7a7a\u95f4\nthis-&gt;_M_impl._M_start = __new_start;\nthis-&gt;_M_impl._M_finish = __new_finish;\nthis-&gt;_M_impl._M_end_of_storage = __new_start + __len;\n}\n}\n</code></pre> <p>\u5176\u4e2d<code>_M_check_len</code>\uff1a</p> <pre><code>size_type\n_M_check_len(size_type __n, const char* __s) const\n{\nif (max_size() - size() &lt; __n)\n__throw_length_error(__N(__s));\n\nconst size_type __len = size() + std::max(size(), __n); //\u5982\u679cn\u5c0f\u4e8e\u5f53\u524dsize\uff0c\u5185\u5b58\u52a0\u500d\uff0c\u5426\u5219\u5185\u5b58\u589e\u957fn\u3002\nreturn (__len &lt; size() || __len &gt; max_size()) ? max_size() : __len;\n}\n</code></pre> <p>\u5185\u5b58\u5206\u914d\u7b56\u7565\u5e76\u4e0d\u662f\u7b80\u5355\u7684\u52a0\u500d\uff0c\u5982\u679cn\u5c0f\u4e8e\u5f53\u524dsize\uff0c\u5185\u5b58\u52a0\u500d\uff0c\u5426\u5219\u5185\u5b58\u589e\u957fn\u3002</p> <p>\u5b66\u4e60\u8d44\u6599\uff1a</p> <p>\u4faf\u6377\u300aSTL\u6e90\u7801\u5256\u6790\u300b</p> <p>https://www.cnblogs.com/coderkian/p/3888429.html</p>"},{"location":"src_analysis/stl/%E8%B0%88%E8%B0%88STL%E8%AE%BE%E8%AE%A1%E4%B9%8BEBO%E4%BC%98%E5%8C%96/","title":"STL\u8bbe\u8ba1\u4e4bEBO(\u7a7a\u57fa\u7c7b\u4f18\u5316)","text":""},{"location":"src_analysis/stl/%E8%B0%88%E8%B0%88STL%E8%AE%BE%E8%AE%A1%E4%B9%8BEBO%E4%BC%98%E5%8C%96/#0","title":"0.\u5bfc\u8bed","text":"<p>EBO\u7b80\u79f0Empty Base Optimization\u3002</p> <p>\u672c\u8282\u4ece\u7a7a\u7c7b\u5f00\u59cb\uff0c\u5230STL\u5185\u90e8\uff0c\u5230\u6d4b\u8bd5\uff0c\u518d\u5230\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2aEBO\uff0c\u5bf9\u6bd4\u6027\u80fd\uff0c\u6700\u540e\u518d\u6d4b\u8bd5\uff0c\u603b\u7ed3\u3002</p>"},{"location":"src_analysis/stl/%E8%B0%88%E8%B0%88STL%E8%AE%BE%E8%AE%A1%E4%B9%8BEBO%E4%BC%98%E5%8C%96/#1","title":"1.\u7a7a\u7c7b","text":"<p>\u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7c7b\uff1a\u6ca1\u6709\u6210\u5458\u53d8\u91cf\uff0c\u6ca1\u6709\u7ee7\u627f\uff0c\u6ca1\u6709\u6570\u636e\u5143\u7d20\u7684\u7c7b\u3002</p> <pre><code>class Empty{\npublic:\nvoid print() {\nstd::cout&lt;&lt;\"I am Empty class\"&lt;&lt;std::endl;\n}\n};\n</code></pre> <p>\u7531\u4e8e\u5b83\u662f\u7a7a\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2asizeof\u662f\u591a\u5c11\u5462\uff1f</p> <pre><code>std::cout&lt;&lt;sizeof(Empty)&lt;&lt;std::endl; //1\n</code></pre> <p>\u7ed3\u679c\u662f1\uff0c\u5b83\u662f\u7a7a\u7684\u600e\u4e48\u4e0d\u662f0\u5462\uff1f</p> <p>\u56e0\u4e3a\u7a7a\u7c7b\u540c\u6837\u53ef\u4ee5\u88ab\u5b9e\u4f8b\u5316\uff0c\u6bcf\u4e2a\u5b9e\u4f8b\u5728\u5185\u5b58\u4e2d\u90fd\u6709\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u7684\u5730\u5740\uff0c\u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\uff0c\u7f16\u8bd1\u5668\u5f80\u5f80\u4f1a\u7ed9\u4e00\u4e2a\u7a7a\u7c7b\u9690\u542b\u7684\u52a0\u4e00\u4e2a\u5b57\u8282\uff0c\u8fd9\u6837\u7a7a\u7c7b\u5728\u5b9e\u4f8b\u5316\u540e\u5728\u5185\u5b58\u5f97\u5230\u4e86\u72ec\u4e00\u65e0\u4e8c\u7684\u5730\u5740\uff0e\u6240\u4ee5\u4e0a\u8ff0\u5927\u5c0f\u4e3a1.</p> <p>\u6839\u636e\u4e0a\u9762\u7684\u56de\u7b54\uff0c\u4f30\u8ba1\u5927\u5bb6\u6216\u5f15\u51fa\u53e6\u4e00\u4e2a\u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u4e24\u4e2a\u4e0d\u540c\u5bf9\u8c61\u7684\u5730\u5740\u5e94\u8be5\u4e0d\u540c\uff1f</p> <p>\u73b0\u5728\u6709\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>class Empty{\npublic:\nvoid print() {\nstd::cout&lt;&lt;\"I am Empty class\"&lt;&lt;std::endl;\n}\n};\ntemplate &lt; typename T &gt;\nbool isSame( T const &amp; t1, T const &amp; t2 )\n{\nreturn &amp;t1 == &amp;t2;\n}\n</code></pre> <p>\u6211\u4eec\u6765\u6d4b\u8bd5\u4e00\u4e0b\uff1a</p> <pre><code>int main() {\nEmpty a,b;\nassert(!isSame(a,b));  // \u7f16\u8bd1\u901a\u8fc7\uff0ca\u4e0eb\u7684\u5730\u5740\u4e0d\u540c\n\nEmpty *p=new Empty;\nEmpty *q=new Empty;\nassert(!isSame(p,q)); // \u7f16\u8bd1\u901a\u8fc7\uff0ca\u4e0eb\u7684\u5730\u5740\u4e0d\u540c\nreturn 0;\n}\n</code></pre> <p>\u4e0a\u9762\u6d4b\u8bd5\u4e86\uff0c\u4e24\u4e2a\u4e0d\u540c\u5bf9\u8c61\u5730\u5740\u662f\u4e0d\u540c\u7684\uff0c\u8003\u8651\u4e0b\u9762\u573a\u666f\uff1a</p> <pre><code>Empty a,b;\n// \u5728\u540c\u4e00\u5730\u5740\u5177\u6709\u4e24\u4e2a\u5bf9\u8c61\u5c06\u610f\u5473\u7740\u5728\u4f7f\u7528\u6307\u9488\u5f15\u7528\u5b83\u4eec\u65f6\u5c06\u65e0\u6cd5\u533a\u5206\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u3002\nEmpty *p1=&amp;a;\np1-&gt;print();\n</code></pre> <p>\u6b64\u65f6\u4f1a\u53d1\u73b0\uff0c\u5982\u679ca\u7684\u5730\u5740\u4e0eb\u7684\u5730\u5740\u4e00\u6837\uff0c\u90a3\u4e48\u5728\u540c\u4e00\u5730\u5740\u5177\u6709\u4e24\u4e2a\u5bf9\u8c61\u5c06\u610f\u5473\u7740\u5728\u4f7f\u7528\u6307\u9488\u5f15\u7528\u5b83\u4eec\u65f6\u5c06\u65e0\u6cd5\u533a\u5206\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u3002\u56e0\u6b64\u4e24\u4e2a\u4e0d\u540c\u5bf9\u8c61\u7684\u5730\u5740\u4e0d\u540c\u3002</p>"},{"location":"src_analysis/stl/%E8%B0%88%E8%B0%88STL%E8%AE%BE%E8%AE%A1%E4%B9%8BEBO%E4%BC%98%E5%8C%96/#2","title":"2.\u7a7a\u57fa\u7c7b\u4f18\u5316","text":"<p>\u73b0\u5728\u5bf9\u6bd4\u4e00\u4e0b\u4e0b\u9762\u4e24\u4e2a\u7528\u6cd5\uff0c\u7b2c\u4e00\u79cd\uff0c\u4e00\u4e2a\u7c7b\u4e2d\u5305\u542b\u4e86\u4e24\u4e00\u4e2a\u7c7b\u4f5c\u4e3a\u6210\u5458\uff0c\u7136\u540e\u901a\u8fc7\u8fd9\u4e2a\u6765\u83b7\u5f97\u88ab\u5305\u542b\u7c7b\u7684\u529f\u80fd\u3002</p> <pre><code>class notEbo  {\nint i;\nEmpty e;\n// do other things\n};\n</code></pre> <p>\u53e6\u4e00\u79cd\u76f4\u63a5\u91c7\u7528\u7ee7\u627f\u7684\u65b9\u5f0f\u6765\u83b7\u5f97\u57fa\u7c7b\u7684\u6210\u5458\u51fd\u6570\u53ca\u5176\u4ed6\u529f\u80fd\u7b49\u7b49\u3002</p> <pre><code>class ebo:public Empty {\nint i;\n// do other things\n};\n</code></pre> <p>\u63a5\u4e0b\u6765\u505a\u4e2a\u6d4b\u8bd5\uff1a</p> <pre><code>std::cout&lt;&lt;sizeof(notEbo)&lt;&lt;std::endl;\nstd::cout&lt;&lt;sizeof(ebo)&lt;&lt;std::endl;\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>8 4\n</code></pre> <p>\u7b2c\u4e00\u79cd\uff0c\u4f1a\u56e0\u4e3a\u5b57\u8282\u5bf9\u9f50\uff0c\u5c06\u5176\u539f\u6765\u53ea\u53601\u5b57\u8282\uff0c\u8fdb\u884c\u6269\u5145\u52304\u7684\u500d\u6570\uff0c\u6700\u540e\u5c31\u662f8\u5b57\u8282\u3002</p> <p>\u5bf9\u6bd4\u8fd9\u4e24\u4e2a\u53d1\u73b0\uff0c\u7b2c\u4e8c\u79cd\u901a\u8fc7\u7ee7\u627f\u65b9\u5f0f\u6765\u83b7\u5f97\u57fa\u7c7b\u7684\u529f\u80fd\uff0c\u5e76\u6ca1\u6709\u4ea7\u751f\u989d\u5916\u5927\u5c0f\u7684\u4f18\u5316\u79f0\u4e4b\u4e3aEBO(\u7a7a\u57fa\u7c7b\u4f18\u5316)\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u56de\u5230STL\u6e90\u7801\u4e2d\uff0c\u770b\u770b\u5176\u4e2d\u7684\u4f7f\u7528\uff01</p>"},{"location":"src_analysis/stl/%E8%B0%88%E8%B0%88STL%E8%AE%BE%E8%AE%A1%E4%B9%8BEBO%E4%BC%98%E5%8C%96/#3stlebo","title":"3.STL\u4e2d\u7684EBO\u4e16\u754c","text":"<p>\u4e0d\u7ba1\u662fdeque\u3001rb_tree\u3001list\u7b49\u5bb9\u5668\uff0c\u90fd\u79bb\u4e0d\u5f00\u5185\u5b58\u7ba1\u7406\uff0c\u5728\u8fd9\u51e0\u4e2a\u5bb9\u5668\u4e2d\u90fd\u5305\u542b\u4e86\u76f8\u5e94\u7684\u5185\u5b58\u7ba1\u7406\uff0c\u5e76\u901a\u8fc7<code>_xx_impl</code>\u6765\u7ee7\u627f\u4e0b\u9762\u8fd9\u51e0\u4e2a\u7c7b\uff1a</p> <pre><code>std::allocator&lt;_Tp&gt;\n__gnu_cxx::bitmap_allocator&lt;_Tp&gt;\n__gnu_cxx::bitmap_allocator&lt;_Tp&gt;\n__gnu_cxx::__mt_alloc&lt;_Tp&gt;\n__gnu_cxx::__pool_alloc&lt;_Tp&gt;\n__gnu_cxx::malloc_allocator&lt;_Tp&gt;\n</code></pre> <p>\u90a3\u8fd9\u548c\u6211\u4eec\u7684EBO\u6709\u5565\u5173\u7cfb\u5462\uff1f</p> <p>\u5b9e\u9645\u4e0a\uff0c\u4e0a\u9762\u6240\u5217\u51fa\u7ee7\u627f\u7684\u57fa\u7c7b\u90fd\u662f\u5185\u5b58\u7ba1\u7406\u7684EBO(\u7a7a\u57fa\u7c7b)\u3002</p> <p>\u5728\u6bcf\u4e2a\u5bb9\u5668\u4e2d\u7684\u4f7f\u7528\u90fd\u662f\u8c03\u7528\u6bcf\u4e2a\u5185\u5b58\u7ba1\u7406\u7684<code>rebind&lt;_Tp&gt;::other</code>\u3002</p> <p>\u4f8b\u5982\u7ea2\u9ed1\u6811\u6e90\u7801\u7ed3\u6784\uff1a</p> <pre><code>typedef typename __gnu_cxx::__alloc_traits&lt;_Alloc&gt;::template\nrebind&lt;_Rb_tree_node&lt;_Val&gt; &gt;::other _Node_allocator;\nstruct _Rb_tree_impl : public _Node_allocator\n{\n// do somethings\n};\n</code></pre> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e0a\u9762\u5217\u51fa\u7684\u5185\u5b58\u7ba1\u7406\u7c7b\u91cc\u9762\u7684\u6e90\u7801\u7ed3\u6784\uff1a\u8fd9\u91cc\u62ff<code>allocator</code>\u4e3e\u4f8b\uff1a</p> <pre><code>template&lt;typename _Tp&gt;\nclass allocator: public __allocator_base&lt;_Tp&gt;\n{\ntemplate&lt;typename _Tp1&gt;\nstruct rebind { typedef allocator&lt;_Tp1&gt; other; };\n};\n</code></pre> <p>\u770b\u5230\u4e86\u6ca1\uff0c\u901a\u8fc7<code>rebind&lt;_Tp&gt;::other</code>\u6765\u83b7\u5f97\u4f20\u9012\u8fdb\u6765\u7684\u5185\u5b58\u5206\u914d\u5668\uff0c\u4e5f\u5c31\u662f\u524d\u9762\u63d0\u5230\u7684\u8fd9\u4e9b\u3002</p> <pre><code>std::allocator&lt;_Tp&gt;\n__gnu_cxx::bitmap_allocator&lt;_Tp&gt;\n__gnu_cxx::bitmap_allocator&lt;_Tp&gt;\n__gnu_cxx::__mt_alloc&lt;_Tp&gt;\n__gnu_cxx::__pool_alloc&lt;_Tp&gt;\n__gnu_cxx::malloc_allocator&lt;_Tp&gt;\n</code></pre> <p>\u641e\u61c2\u4e86\u8fd9\u4e9b\uff0c\u6765\u6d4b\u8bd5\u4e00\u6ce2\uff1a</p> <pre><code>void print() {\ncout&lt;&lt;sizeof(std::allocator&lt;int&gt;)&lt;&lt;\" \"&lt;&lt;sizeof(std::allocator&lt;int&gt;::rebind&lt;int&gt;::other)&lt;&lt;endl;\ncout&lt;&lt;sizeof(__gnu_cxx::bitmap_allocator&lt;int&gt;)&lt;&lt;\" \"&lt;&lt;sizeof(__gnu_cxx::bitmap_allocator&lt;int&gt;::rebind&lt;int&gt;::other)&lt;&lt;endl;\ncout&lt;&lt;sizeof(__gnu_cxx::new_allocator&lt;int&gt;)&lt;&lt;\" \"&lt;&lt;sizeof(__gnu_cxx::new_allocator&lt;int&gt;::rebind&lt;int&gt;::other)&lt;&lt;endl;\ncout&lt;&lt;sizeof(__gnu_cxx::__mt_alloc&lt;int&gt;)&lt;&lt;\" \"&lt;&lt;sizeof(__gnu_cxx::__mt_alloc&lt;int&gt;::rebind&lt;int&gt;::other)&lt;&lt;endl;\ncout&lt;&lt;sizeof(__gnu_cxx::__pool_alloc&lt;int&gt;)&lt;&lt;\" \"&lt;&lt;sizeof(__gnu_cxx::__pool_alloc&lt;int&gt;::rebind&lt;int&gt;::other)&lt;&lt;endl;\ncout&lt;&lt;sizeof(__gnu_cxx::malloc_allocator&lt;int&gt;)&lt;&lt;\" \"&lt;&lt;sizeof(__gnu_cxx::malloc_allocator&lt;int&gt;::rebind&lt;int&gt;::other)&lt;&lt;endl;\n}\n</code></pre> <p>\u6211\u4eec\u6765\u6d4b\u8bd5\u8fd9\u4e9bsizeof\u662f\u4e0d\u662f1\uff0c\u7ecf\u8fc7\u6d4b\u8bd5\u8f93\u51fa\u5982\u4e0b\uff1a</p> <pre><code>1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n</code></pre> <p>\u8bf4\u660e\u5185\u5b58\u7ba1\u7406\u7684\u5b9e\u73b0\u5c31\u662f\u901a\u8fc7\u91c7\u7528\u7ee7\u627f\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528\u7a7a\u57fa\u7c7b\u4f18\u5316\uff0c\u6765\u8fbe\u5230\u5c3d\u91cf\u964d\u4f4e\u5bb9\u5668\u6240\u5360\u7684\u5927\u5c0f\u3002</p>"},{"location":"src_analysis/stl/%E8%B0%88%E8%B0%88STL%E8%AE%BE%E8%AE%A1%E4%B9%8BEBO%E4%BC%98%E5%8C%96/#4ebo","title":"4.\u5229\u7528EBO,\u624b\u52a8\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u5185\u5b58\u5206\u914d\u4e0e\u91ca\u653e","text":"<p>\u9996\u5148\u5b9a\u4e49\u4e00\u4e2asizeof(class)=1\u7684\u7c7b\uff0c\u540cSTL\u4e00\u6837\uff0c\u91cc\u9762\u4f7f\u7528allocate\u4e0edeallocate\u6765\u8fdb\u884c\u5185\u5b58\u7ba1\u7406\u3002</p> <pre><code>class MyAllocator {\npublic:\nvoid *allocate(std::size_t size) {\nreturn std::malloc(size);\n}\n\nvoid deallocate(void *ptr) {\nstd::free(ptr);\n}\n};\n</code></pre> <p>\u7b2c\u4e00\u79cd\u65b9\u5f0f\u7684\u5185\u5b58\u7ba1\u7406\uff1a\u5d4c\u5165\u4e00\u4e2a\u5185\u5b58\u7ba1\u7406\u7c7b</p> <pre><code>template&lt;class T, class Allocator&gt;\nclass MyContainerNotEBO {\nT *data_ = nullptr;\nstd::size_t capacity_;\nAllocator allocator_;   // \u5d4c\u5165\u4e00\u4e2aMyAllocator\npublic:\nMyContainerNotEBO(std::size_t capacity)\n: capacity_(capacity), allocator_(), data_(nullptr) {\nstd::cout &lt;&lt; \"alloc malloc\" &lt;&lt; std::endl;\ndata_ = reinterpret_cast&lt;T *&gt;(allocator_.allocate(capacity * sizeof(T))); // \u5206\u914d\u5185\u5b58\n}\n\n~MyContainerNotEBO() {\nstd::cout &lt;&lt; \"MyContainerNotEBO free malloc\" &lt;&lt; std::endl;\nallocator_.deallocate(data_);\n}\n};\n</code></pre> <p>\u7b2c\u4e8c\u79cd\u65b9\u5f0f\uff1a\u91c7\u7528\u7a7a\u57fa\u7c7b\u4f18\u5316\uff0c\u7ee7\u627f\u6765\u83b7\u5f97\u5185\u5b58\u7ba1\u7406\u529f\u80fd</p> <pre><code>template&lt;class T, class Allocator&gt;\nclass MyContainerEBO\n: public Allocator {    // \u7ee7\u627f\u4e00\u4e2aEBO\nT *data_ = nullptr;\nstd::size_t capacity_;\npublic:\nMyContainerEBO(std::size_t capacity)\n: capacity_(capacity), data_(nullptr) {\nstd::cout &lt;&lt; \"alloc malloc\" &lt;&lt; std::endl;\ndata_ = reinterpret_cast&lt;T *&gt;(this-&gt;allocate(capacity * sizeof(T)));\n}\n\n~MyContainerEBO() {\nstd::cout &lt;&lt; \"MyContainerEBO free malloc\" &lt;&lt; std::endl;\nthis-&gt;deallocate(data_);\n}\n};\n</code></pre> <p>\u5f00\u59cb\u6d4b\u8bd5\uff1a</p> <pre><code>int main() {\nMyContainerNotEBO&lt;int, MyAllocator&gt; notEbo = MyContainerNotEBO&lt;int, MyAllocator&gt;(0);\nstd::cout &lt;&lt; \"Using Not EBO Test sizeof is \" &lt;&lt; sizeof(notEbo) &lt;&lt; std::endl;\nMyContainerEBO&lt;int, MyAllocator&gt; ebo = MyContainerEBO&lt;int, MyAllocator&gt;(0);\nstd::cout &lt;&lt; \"Using EBO Test sizeof is \" &lt;&lt; sizeof(ebo) &lt;&lt; std::endl;\n\nreturn 0;\n}\n</code></pre> <p>\u6d4b\u8bd5\u7ed3\u679c\uff1a</p> <pre><code>alloc malloc\nUsing Not EBO Test sizeof is 24\nalloc malloc\nUsing EBO Test sizeof is 16\nMyContainerEBO free malloc\nMyContainerNotEBO free malloc\n</code></pre> <p>\u6211\u4eec\u53d1\u73b0\u91c7\u7528EBO\u7684\u8bbe\u8ba1\u786e\u5b9e\u6bd4\u5d4c\u5165\u8bbe\u8ba1\u597d\u5f88\u591a\u3002\u81f3\u6b64\uff0c\u672c\u8282\u5b66\u4e60\u5b8c\u6bd5\u3002</p>"},{"location":"tool/C%2B%2B%E7%9A%84Debug%E5%B7%A5%E5%85%B7dbg-macro/","title":"C++ \u7684 debug \u5de5\u5177\uff1adbg-macro","text":"<p>\u6253\u65e5\u5fd7\u662f C++ \u5f00\u53d1\u4e2d\u5fc5\u4e0d\u53ef\u5c11\u7684\u4e00\u79cd debug \u65b9\u5f0f\uff0cdbg-macro \u53d7 Rust \u8bed\u8a00\u4e2d \u7684 <code>dbg</code> \u542f\u53d1\uff0c\u63d0\u4f9b\u6bd4 <code>printf</code> \u548c <code>std::cout</code> \u66f4\u597d\u7684\u5b8f\u51fd\u6570\u3002\u4e3b\u8981\u6709\u5982\u4e0b\u7279\u70b9\uff1a</p> <ul> <li>\u7f8e\u89c2\u7684\u5f69\u8272\u8f93\u51fa\uff08\u5f53\u8f93\u51fa\u4e0d\u662f\u4ea4\u4e92\u5f0f\u7ec8\u7aef\u65f6\uff0c\u989c\u8272\u5c06\u81ea\u52a8\u7981\u7528\uff09</li> <li>\u517c\u5bb9 C++11\uff0c\u5e76\u4e14\u662f header-only</li> <li>\u652f\u6301\u57fa\u7840\u7c7b\u578b\u548c STL \u5bb9\u5668\u7c7b\u578b\u7684\u8f93\u51fa</li> <li>\u53ef\u4ee5\u8f93\u51fa\u6587\u4ef6\u540d\u3001\u884c\u53f7\u3001\u51fd\u6570\u540d\u548c\u539f\u59cb\u8868\u8fbe\u5f0f</li> </ul> <p>\u4f8b\u5982\u4e0b\u9762\u7684\u4ee3\u7801\uff1a</p> <pre><code>#include &lt;vector&gt;\n#include &lt;dbg.h&gt;\n\n// You can use \"dbg(..)\" in expressions:\nint factorial(int n) {\nif (dbg(n &lt;= 1)) {\nreturn dbg(1);\n} else {\nreturn dbg(n * factorial(n - 1));\n}\n}\n\nint main() {\nstd::string message = \"hello\";\ndbg(message);  // [example.cpp:15 (main)] message = \"hello\" (std::string)\n\nconst int a = 2;\nconst int b = dbg(3 * a) + 1;  // [example.cpp:18 (main)] 3 * a = 6 (int)\n\nstd::vector&lt;int&gt; numbers{b, 13, 42};\ndbg(numbers);  // [example.cpp:21 (main)] numbers = {7, 13, 42} (size: 3) (std::vector&lt;int&gt;)\n\ndbg(\"this line is executed\");  // [example.cpp:23 (main)] this line is executed\n\nfactorial(4);\n\nreturn 0;\n}\n</code></pre> <p>\u6548\u679c\u5982\u4e0b\uff1a</p> <p></p>"},{"location":"tool/C%2B%2B%E7%9A%84Debug%E5%B7%A5%E5%85%B7dbg-macro/#_1","title":"\u5b89\u88c5","text":"<pre><code>git clone https://github.com/sharkdp/dbg-macro\nsudo ln -s $(readlink -f dbg-macro/dbg.h) /usr/include/dbg.h\n</code></pre> <p>\u8fd9\u6837\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u4f7f\u7528 <code>dbg.h</code> \u4e86\u3002</p>"},{"location":"tool/C%2B%2B%E7%9A%84Debug%E5%B7%A5%E5%85%B7dbg-macro/#arch-linux","title":"\u5728 Arch Linux \u4e0a","text":"<pre><code>yay -S dbg-macro\n</code></pre>"},{"location":"tool/C%2B%2B%E7%9A%84Debug%E5%B7%A5%E5%85%B7dbg-macro/#vcpkg","title":"\u4f7f\u7528 vcpkg","text":"<pre><code>vcpkg install dbg-macro\n</code></pre> <p>\u66f4\u591a\u5185\u5bb9\u8be6\u89c1 \u5b98\u65b9\u6587\u6863\u3002</p>"},{"location":"tool/like_python/","title":"\u50cfPython\u4e00\u6837\u73a9C/C++","text":"<p>\u5728Python\u4e2d\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528<code>Jupyter Notebook</code>\u76f4\u63a5\u770b\u5230\u7ed3\u679c\uff0c\u4f8b\u5982\uff1a</p> <pre><code>l = [1,2]\nl\n</code></pre> <p>\u76f4\u63a5\u8f93\u51fa\uff1a</p> <pre><code>[1,2]\n</code></pre> <p>\u90a3\u5f53\u4f7f\u7528C++\u7684\u65f6\u5019\uff0c\u4f8b\u5982\uff1a</p> <pre><code>map&lt;string, int&gt; mp{\n{\"one\",   1},\n{\"two\",   2},\n{\"three\", 3},\n{\"four\",  4}\n};\n</code></pre> <p>\u5982\u679c\u8981\u8f93\u51fa\uff0c\u5c31\u5f97\u5faa\u73af\u904d\u5386\uff0c\u53ef\u5426\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c\u5462\uff1f</p> <p>so easy!!! <code>Jupyter Notebook</code>\u53ef\u4ee5\u89e3\u51b3\u4e00\u5207\u95ee\u9898\uff0c\u54c8\u54c8\uff5e</p>"},{"location":"tool/like_python/#jupyterc","title":"\u5982\u4f55\u5728Jupyter\u4e2d\u73a9C++\uff1f","text":"<p>\u5728github\u4e0a\u6709\u4e00\u4e2a\u4ed3\u5e93\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <p>https://github.com/QuantStack/xeus-cling</p> <p><code>xeus-cling</code> \u662f\u4e00\u4e2a\u7528\u4e8eC++\u7684Jupyter\u5185\u6838\uff0c\u57fa\u4e8eC++\u89e3\u91ca\u5668\u548cJupyter\u534f\u8baexeus\u7684\u539f\u751f\u5b9e\u73b0\u3002</p> <p>\u76ee\u524d\uff0c\u652f\u6301Mac\u4e0eLinux\uff0c\u4f46\u4e0d\u652f\u6301Windows\u3002</p> <p>\u5b89\u88c5\u4e5f\u662f\u975e\u5e38\u7b80\u5355\uff0c\u9996\u5148\u5b89\u88c5\u597dAnaconda\uff0c\u5728\u91cc\u9762\u521b\u5efa\u4e00\u4e2a\u865a\u62df\u73af\u5883\uff1a</p> <pre><code>conda create -n cling\n</code></pre> <p>\u5207\u6362\u8fdb\u53bb\uff1a</p> <pre><code>conda activate cling\n</code></pre> <p>\u7ed9\u65b0\u73af\u5883\u5b89\u88c5<code>jupyter</code>\u548c<code>notebook</code></p> <pre><code>conda install jupyter notebook\n</code></pre> <p>\u4f7f\u7528<code>conda-forge</code>\u5b89\u88c5<code>xeus-cling</code></p> <pre><code>conda install xeus-cling -c conda-forge\n</code></pre> <p>\u4e3a\u4e86\u52a0\u901f\u5b89\u88c5\uff0c\u8bf7\u8bb0\u5f97\u7ed9Anaconda\u914d\u7f6e\u6e90\uff01</p> <p>\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u597d\u4e86\u5185\u6838(kernel)\uff1a</p> <pre><code>jupyter kernelspec list\n</code></pre> <p>\u8f93\u51fa\uff1a</p> <pre><code>python3    /home/xxx/anaconda3/envs/cling/share/jupyter/kernels/python3\nxcpp11     /home/xxx/anaconda3/envs/cling/share/jupyter/kernels/xcpp11\nxcpp14     /home/xxx/anaconda3/envs/cling/share/jupyter/kernels/xcpp14\nxcpp17     /home/xxx/anaconda3/envs/cling/share/jupyter/kernels/xcpp17\n</code></pre> <p>\u6253\u5f00<code>Jupyter Notebook</code>\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u770b\u5230kernel\u4e86\u3002</p> <p>\u542f\u52a8<code>Jupyter Notebook</code>\uff1a</p> <pre><code>jupyter-notebook\n</code></pre>"},{"location":"tool/like_python/#jupyterc_1","title":"\u5982\u4f55\u5728Jupyter\u4e2d\u73a9C\uff1f","text":"<p>\u53ea\u9700\u8981\u5b89\u88c5c kernel\u5373\u53ef\uff01</p> <p>\u53ef\u4ee5\u76f4\u63a5\u5728\u5f53\u524d\u73af\u5883\u4e2d\u521b\u5efac kernel\uff0c\u4e5f\u53ef\u4ee5\u65b0\u5f00\u4e00\u4e2a\u73af\u5883\u5b89\u88c5\uff0c\u4e0b\u9762\u662f\u5728\u5f53\u524d\u73af\u5883\u4e2d\u76f4\u63a5\u5b89\u88c5\u3002</p> <pre><code>pip install jupyter-c-kernel\ninstall_c_kernel\njupyter kernelspec list\n</code></pre> <p>\u6b64\u65f6\uff0c\u5c31\u8f93\u51fa\uff1a</p> <pre><code>c          /home/light/anaconda3/envs/cling/share/jupyter/kernels/c\npython3    /home/light/anaconda3/envs/cling/share/jupyter/kernels/python3\nxcpp11     /home/light/anaconda3/envs/cling/share/jupyter/kernels/xcpp11\nxcpp14     /home/light/anaconda3/envs/cling/share/jupyter/kernels/xcpp14\nxcpp17     /home/light/anaconda3/envs/cling/share/jupyter/kernels/xcpp17\n</code></pre> <p>\u542f\u52a8<code>Jupyter Notebook</code>\uff1a</p> <pre><code>jupyter-notebook\n</code></pre>"},{"location":"tool/look/","title":"\u89c2\u5bdf\u7f16\u8bd1\u8fc7\u7a0b\u53d8\u5316","text":"<ul> <li>https://cppinsights.io</li> </ul>"},{"location":"tool/output/","title":"\u5bb9\u5668\u5feb\u6377\u8f93\u51fa\u5de5\u5177","text":"<p>\u5bf9\u5434\u8001\u5e08\u7684\u4ee3\u7801\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u70b9\u51fb\u6b64\u5904\u76f4\u901a\u4ee3\u7801</p> <p>\u8f93\u5165\uff1a</p> <pre><code>map&lt;int, int&gt; mp{\n{1, 1},\n{2, 4},\n{3, 9}};\ncout &lt;&lt; mp &lt;&lt; endl;\n</code></pre> <p>\u8f93\u51fa\u7ed3\u679c\u663e\u793a\uff1a</p> <pre><code>{ 1 =&gt; 1, 2 =&gt; 4, 3 =&gt; 9 }\n</code></pre>"},{"location":"tool/output/#_2","title":"\u5bb9\u5668\u5feb\u6377\u8f93\u51fa\u5de5\u5177","text":""}]}