[{"title":"EBO (Empty Base Optimization) in STL Design","date":"2024-10-24T00:00:00.000Z","tags":["C++","STL","Source Code Analysis"],"draft":false,"summary":"Exploring the Empty Base Optimization (EBO) in the design of the C++ Standard Template Library (STL)","type":"Blog","readingTime":{"text":"6 min read","minutes":5.55,"time":333000,"words":1110},"slug":"ebo","path":"blog/ebo","filePath":"blog/ebo.mdx","toc":[{"value":"EBO (Empty Base Optimization) in STL Design","url":"#ebo-empty-base-optimization-in-stl-design-1","depth":1},{"value":"0. Introduction","url":"#0-introduction-11","depth":2},{"value":"1. Empty Class","url":"#1-empty-class-1","depth":2},{"value":"2. Empty Base Class Optimization","url":"#2-empty-base-class-optimization-1","depth":2},{"value":"3. EBO World in the STL","url":"#3-ebo-world-in-the-stl-1","depth":2},{"value":"4. Implementing a Simple Memory Allocation and Deallocation Using EBO","url":"#4-implementing-a-simple-memory-allocation-and-deallocation-using-ebo-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"EBO (Empty Base Optimization) in STL Design","datePublished":"2024-10-24T00:00:00.000Z","dateModified":"2024-10-24T00:00:00.000Z","description":"Exploring the Empty Base Optimization (EBO) in the design of the C++ Standard Template Library (STL)","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/ebo"}},{"title":"Debugging a Simple Program with LLDB - Step-by-Step Guide","date":"2024-03-02T00:00:00.000Z","tags":["lldb","debug"],"draft":false,"summary":"Learn how to effectively debug a simple program using LLDB with this comprehensive step-by-step guide. Find out how to troubleshoot errors and optimize your code.","type":"Blog","readingTime":{"text":"4 min read","minutes":3.49,"time":209400,"words":698},"slug":"lldb_debug","path":"blog/lldb_debug","filePath":"blog/lldb_debug.mdx","toc":[{"value":"Debugging a Simple Program with LLDB","url":"#debugging-a-simple-program-with-lldb-1","depth":1},{"value":"Compilation","url":"#compilation-1","depth":2},{"value":"Getting Started with Debugging","url":"#getting-started-with-debugging-1","depth":2},{"value":"Breakpoints","url":"#breakpoints-1","depth":2},{"value":"Running","url":"#running-1","depth":2},{"value":"Viewing Breakpoints","url":"#viewing-breakpoints-1","depth":2},{"value":"Continuing Program Execution","url":"#continuing-program-execution-1","depth":2},{"value":"Printing Variables","url":"#printing-variables-1","depth":2},{"value":"Watchpoints","url":"#watchpoints-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Debugging a Simple Program with LLDB - Step-by-Step Guide","datePublished":"2024-03-02T00:00:00.000Z","dateModified":"2024-03-02T00:00:00.000Z","description":"Learn how to effectively debug a simple program using LLDB with this comprehensive step-by-step guide. Find out how to troubleshoot errors and optimize your code.","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/lldb_debug"}},{"title":"four interview questions","date":"2024-02-25T00:00:00.000Z","tags":["C++","Algorithm","Sword Offer"],"draft":false,"summary":"four interview questionsr","type":"Blog","readingTime":{"text":"9 min read","minutes":8.44,"time":506400,"words":1688},"slug":"come_on_inter","path":"blog/come_on_inter","filePath":"blog/come_on_inter.mdx","toc":[{"value":"Come on, let's solve four interview questions together","url":"#come-on-lets-solve-four-interview-questions-together-1","depth":1},{"value":"1. Introduction","url":"#1-introduction-1","depth":2},{"value":"2. Maximum Subarray","url":"#2-maximum-subarray-1","depth":2},{"value":"3. Deep Copy Linked List with Random Pointers","url":"#3-deep-copy-linked-list-with-random-pointers-1","depth":2},{"value":"4. Count the Number of 1s in a 32-bit Integer","url":"#4-count-the-number-of-1s-in-a-32-bit-integer-1","depth":2},{"value":"5. Big Number Multiplication","url":"#5-big-number-multiplication-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"four interview questions","datePublished":"2024-02-25T00:00:00.000Z","dateModified":"2024-02-25T00:00:00.000Z","description":"four interview questionsr","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/come_on_inter"}},{"title":"Exploring the C++ STL Source Code: The Story of set and multiset","date":"2024-02-19T00:00:00.000Z","tags":["C++","STL","Source Code Analysis"],"draft":false,"summary":"Discover the fascinating journey through the C++ STL source code to unravel the secrets behind set and multiset data structures. Gain insightful knowledge of their implementation and optimize your programming skills.","type":"Blog","readingTime":{"text":"5 min read","minutes":4.52,"time":271200,"words":904},"slug":"set_multiset","path":"blog/set_multiset","filePath":"blog/set_multiset.mdx","toc":[{"value":"Exploring the C++ STL Source Code: The Story of set and multiset","url":"#exploring-the-c-stl-source-code-the-story-of-set-and-multiset-1","depth":1},{"value":"1. set","url":"#1-set-1","depth":2},{"value":"2. Multiset","url":"#2-multiset-1","depth":1}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Exploring the C++ STL Source Code: The Story of set and multiset","datePublished":"2024-02-19T00:00:00.000Z","dateModified":"2024-02-19T00:00:00.000Z","description":"Discover the fascinating journey through the C++ STL source code to unravel the secrets behind set and multiset data structures. Gain insightful knowledge of their implementation and optimize your programming skills.","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/set_multiset"}},{"title":"Handwriting a HashTable: Building a Strong Foundation for Algorithms from Scratch","date":"2024-01-20T00:00:00.000Z","tags":["C++","STL","HashTable"],"draft":false,"summary":"Learn how to implement a HashTable from the ground up, setting the stage for mastering algorithms and data structures.","type":"Blog","readingTime":{"text":"7 min read","minutes":6.165,"time":369900,"words":1233},"slug":"myhashtable","path":"blog/myhashtable","filePath":"blog/myhashtable.mdx","toc":[{"value":"Handwriting a HashTable to Lay a Solid Foundation for Algorithms from 0 to 1","url":"#handwriting-a-hashtable-to-lay-a-solid-foundation-for-algorithms-from-0-to-1-1","depth":1},{"value":"0. Preface","url":"#0-preface-1","depth":2},{"value":"1. Simplified Hash Table","url":"#1-simplified-hash-table-1","depth":2},{"value":"1. Optimizing the Hash Table","url":"#1-optimizing-the-hash-table-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Handwriting a HashTable: Building a Strong Foundation for Algorithms from Scratch","datePublished":"2024-01-20T00:00:00.000Z","dateModified":"2024-01-20T00:00:00.000Z","description":"Learn how to implement a HashTable from the ground up, setting the stage for mastering algorithms and data structures.","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/myhashtable"}},{"title":"C++ STL源码剖析之红黑树","date":"2024-01-19T00:00:00.000Z","tags":["C++","STL","源码分析"],"draft":false,"summary":"C++ STL源码剖析之红黑树","type":"Blog","readingTime":{"text":"19 min read","minutes":18.49,"time":1109400,"words":3698},"slug":"rb_tree","path":"blog/rb_tree","filePath":"blog/rb_tree.mdx","toc":[{"value":"C++ STL源码剖析之红黑树","url":"#c-stl源码剖析之红黑树-1","depth":1},{"value":"0.导语","url":"#0导语-4","depth":2},{"value":"1.红黑树节点基类","url":"#1红黑树节点基类-1","depth":2},{"value":"2.红黑树节点","url":"#2红黑树节点-1","depth":2},{"value":"3.红黑树迭代器","url":"#3红黑树迭代器-1","depth":2},{"value":"4.红黑树操作","url":"#4红黑树操作-1","depth":2},{"value":"5.红黑树插入","url":"#5红黑树插入-1","depth":2},{"value":"5.1 旋转过程","url":"#51-旋转过程-1","depth":3},{"value":"5.2插入总结","url":"#52插入总结-1","depth":2},{"value":"6.使用","url":"#6使用-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"C++ STL源码剖析之红黑树","datePublished":"2024-01-19T00:00:00.000Z","dateModified":"2024-01-19T00:00:00.000Z","description":"C++ STL源码剖析之红黑树","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/rb_tree"}},{"title":"C++ STL Source Code Analysis: tr1 and std array","date":"2024-01-15T00:00:00.000Z","tags":["C++","STL","Source Code Analysis"],"draft":false,"summary":"An analysis of the C++ STL source code covering tr1 and std array","type":"Blog","readingTime":{"text":"3 min read","minutes":2.905,"time":174300,"words":581},"slug":"array","path":"blog/array","filePath":"blog/array.mdx","toc":[{"value":"C++ STL Source Code Analysis: tr1 and std array","url":"#c-stl-source-code-analysis-tr1-and-std-array-1","depth":1},{"value":"0. Introduction","url":"#0-introduction-10","depth":2},{"value":"1. std::tr1::array","url":"#1-stdtr1array-1","depth":2},{"value":"2. std::array","url":"#2-stdarray-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"C++ STL Source Code Analysis: tr1 and std array","datePublished":"2024-01-15T00:00:00.000Z","dateModified":"2024-01-15T00:00:00.000Z","description":"An analysis of the C++ STL source code covering tr1 and std array","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/array"}},{"title":"Implementation of a Simple iterator_category in C++ STL Source Code Analysis","date":"2024-01-08T00:00:00.000Z","tags":["C++","STL","Source Code Analysis"],"draft":false,"summary":"An analysis of C++ STL source code to implement a simple iterator_category","type":"Blog","readingTime":{"text":"8 min read","minutes":7.205,"time":432300,"words":1441},"slug":"iterator","path":"blog/iterator","filePath":"blog/iterator.mdx","toc":[{"value":"Implementation of a Simple iterator_category in C++ STL Source Code Analysis","url":"#implementation-of-a-simple-iterator_category-in-c-stl-source-code-analysis-1","depth":1},{"value":"0. Introduction","url":"#0-introduction-12","depth":2},{"value":"1. Implementing a Simple iterator_category Recognition Using Type Traits","url":"#1-implementing-a-simple-iterator_category-recognition-using-type-traits-1","depth":2},{"value":"2. STL Source Code Analysis of Iterator","url":"#2-stl-source-code-analysis-of-iterator-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Implementation of a Simple iterator_category in C++ STL Source Code Analysis","datePublished":"2024-01-08T00:00:00.000Z","dateModified":"2024-01-08T00:00:00.000Z","description":"An analysis of C++ STL source code to implement a simple iterator_category","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/iterator"}},{"title":"In-depth Analysis of C++ STL Source Code: Doubly Linked Circular List (list)","date":"2024-01-06T00:00:00.000Z","tags":["C++","STL","Source Code Analysis"],"draft":false,"summary":"In-depth Analysis of C++ STL Source Code: Doubly Linked Circular List (list)","type":"Blog","readingTime":{"text":"21 min read","minutes":20.33,"time":1219800,"words":4066},"slug":"list","path":"blog/list","filePath":"blog/list.mdx","toc":[{"value":"In-depth Analysis of C++ STL Source Code: Doubly Linked Circular List (list)","url":"#in-depth-analysis-of-c-stl-source-code-doubly-linked-circular-list-list-1","depth":1},{"value":"0. Introduction","url":"#0-introduction-13","depth":2},{"value":"1. list","url":"#1-list-1","depth":3},{"value":"1.1 List Source Code","url":"#11-list-source-code-1","depth":3},{"value":"1.1.1 Class Structure","url":"#111-class-structure-1","depth":4},{"value":"1.1.2 Implementation of Doubly Linked Circular List","url":"#112-implementation-of-doubly-linked-circular-list-1","depth":4},{"value":"1.2 List Base Source Code","url":"#12-list-base-source-code-1","depth":3},{"value":"2. Analysis of List's Iterator","url":"#2-analysis-of-lists-iterator-1","depth":2},{"value":"2.1 iterator","url":"#21-iterator-1","depth":3},{"value":"2.2 Node Design","url":"#22-node-design-1","depth":3}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"In-depth Analysis of C++ STL Source Code: Doubly Linked Circular List (list)","datePublished":"2024-01-06T00:00:00.000Z","dateModified":"2024-01-06T00:00:00.000Z","description":"In-depth Analysis of C++ STL Source Code: Doubly Linked Circular List (list)","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/list"}},{"title":"C++ STL源码剖析之map、multimap、initializer_list","date":"2024-01-03T00:00:00.000Z","tags":["C++","STL","源码分析"],"draft":false,"summary":"C++ STL源码剖析之map、multimap、initializer_list","type":"Blog","readingTime":{"text":"8 min read","minutes":7.705,"time":462300,"words":1541},"slug":"map_multimap","path":"blog/map_multimap","filePath":"blog/map_multimap.mdx","toc":[{"value":"C++ STL源码剖析之map、multimap、initializer_list","url":"#c-stl源码剖析之mapmultimapinitializer_list-1","depth":1},{"value":"1.map","url":"#1map-1","depth":2},{"value":"2.insert","url":"#2insert-1","depth":2},{"value":"3.initializer_list使用","url":"#3initializer_list使用-1","depth":2},{"value":"4.multimap","url":"#4multimap-1","depth":2},{"value":"5.map与multimap的重要操作符","url":"#5map与multimap的重要操作符-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"C++ STL源码剖析之map、multimap、initializer_list","datePublished":"2024-01-03T00:00:00.000Z","dateModified":"2024-01-03T00:00:00.000Z","description":"C++ STL源码剖析之map、multimap、initializer_list","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/map_multimap"}},{"title":"C++ STL源码剖析之容器配接器stack与queue、priority_queue","date":"2024-01-03T00:00:00.000Z","tags":["C++","STL","源码分析"],"draft":false,"summary":"C++ STL源码剖析之容器配接器stack与queue、priority_queue","type":"Blog","readingTime":{"text":"6 min read","minutes":5.115,"time":306900,"words":1023},"slug":"queue_stack","path":"blog/queue_stack","filePath":"blog/queue_stack.mdx","toc":[{"value":"C++ STL源码剖析之容器配接器stack与queue、priority_queue","url":"#c-stl源码剖析之容器配接器stack与queuepriority_queue-1","depth":1},{"value":"0.导语","url":"#0导语-3","depth":2},{"value":"1.stack","url":"#1stack-1","depth":2},{"value":"2.queue","url":"#2queue-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"C++ STL源码剖析之容器配接器stack与queue、priority_queue","datePublished":"2024-01-03T00:00:00.000Z","dateModified":"2024-01-03T00:00:00.000Z","description":"C++ STL源码剖析之容器配接器stack与queue、priority_queue","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/queue_stack"}},{"title":"In-depth Analysis of C++ STL Source Code: Traits Programming Technique","date":"2024-01-03T00:00:00.000Z","tags":["C++","STL","Source Code Analysis"],"draft":false,"summary":"In-depth Analysis of C++ STL Source Code: Traits Programming Technique","type":"Blog","readingTime":{"text":"7 min read","minutes":6.77,"time":406200,"words":1354},"slug":"traits","path":"blog/traits","filePath":"blog/traits.mdx","toc":[{"value":"Analysis of C++ STL Source Code: Traits Programming Technique","url":"#analysis-of-c-stl-source-code-traits-programming-technique-4","depth":1},{"value":"0. Introduction","url":"#0-introduction-9","depth":2},{"value":"1. Template Argument Deduction","url":"#1-template-argument-deduction-4","depth":2},{"value":"2. Declaration of Nested Types","url":"#2-declaration-of-nested-types-4","depth":2},{"value":"3. The Savior: Traits","url":"#3-the-savior-traits-4","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"In-depth Analysis of C++ STL Source Code: Traits Programming Technique","datePublished":"2024-01-03T00:00:00.000Z","dateModified":"2024-01-03T00:00:00.000Z","description":"In-depth Analysis of C++ STL Source Code: Traits Programming Technique","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/traits"}},{"title":"算法从0到1之trie(字典树)的增删改查(递归与非递归实现)","date":"2024-01-03T00:00:00.000Z","tags":["C++","算法"],"draft":false,"summary":"算法从0到1之trie(字典树)的增删改查(递归与非递归实现)","type":"Blog","readingTime":{"text":"10 min read","minutes":9.62,"time":577200,"words":1924},"slug":"trie","path":"blog/trie","filePath":"blog/trie.mdx","toc":[{"value":"算法从0到1之trie(字典树)的增删改查(递归与非递归实现)","url":"#算法从0到1之trie字典树的增删改查递归与非递归实现-1","depth":1},{"value":"0.导语","url":"#0导语-5","depth":2},{"value":"1.数据结构与类封装","url":"#1数据结构与类封装-1","depth":2},{"value":"1.1 数据结构定义","url":"#11-数据结构定义-1","depth":3},{"value":"1.2 类的封装","url":"#12-类的封装-1","depth":3},{"value":"2.具体功能实现","url":"#2具体功能实现-1","depth":2},{"value":"2.1 插入节点","url":"#21-插入节点-1","depth":3},{"value":"2.2 是否包含单词","url":"#22-是否包含单词-1","depth":3},{"value":"2.3 查询在Trie树中是否有以prefix为前缀的单词","url":"#23-查询在trie树中是否有以prefix为前缀的单词-1","depth":3},{"value":"2.4 删除单词","url":"#24-删除单词-1","depth":3},{"value":"2.5 统计词频","url":"#25-统计词频-1","depth":3},{"value":"3.测试","url":"#3测试-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"算法从0到1之trie(字典树)的增删改查(递归与非递归实现)","datePublished":"2024-01-03T00:00:00.000Z","dateModified":"2024-01-03T00:00:00.000Z","description":"算法从0到1之trie(字典树)的增删改查(递归与非递归实现)","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/trie"}},{"title":"Exploring the STL Source Code: Unordered Containers","date":"2023-03-04T00:00:00.000Z","tags":["C++","STL","Source Code Analysis"],"draft":false,"summary":"Delve into the implementation details of the STL unordered containers source code. Understand the inner workings and optimizations for efficient usage in C++ programming.","type":"Blog","readingTime":{"text":"6 min read","minutes":5.94,"time":356400,"words":1188},"slug":"uorndered_map","path":"blog/uorndered_map","filePath":"blog/uorndered_map.mdx","toc":[{"value":"Exploring the STL Source Code: Unordered Containers","url":"#exploring-the-stl-source-code-unordered-containers-1","depth":1},{"value":"0. Introduction","url":"#0-introduction-14","depth":2},{"value":"1. Fundamental Differences between unordered_map and unordered_multimap","url":"#1-fundamental-differences-between-unordered_map-and-unordered_multimap-1","depth":2},{"value":"2. Fundamental Differences between unordered_set and unordered_multiset","url":"#2-fundamental-differences-between-unordered_set-and-unordered_multiset-1","depth":2},{"value":"3. Three Main Conclusions","url":"#3-three-main-conclusions-1","depth":2},{"value":"4. Important Functions of unordered_map","url":"#4-important-functions-of-unordered_map-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Exploring the STL Source Code: Unordered Containers","datePublished":"2023-03-04T00:00:00.000Z","dateModified":"2023-03-04T00:00:00.000Z","description":"Delve into the implementation details of the STL unordered containers source code. Understand the inner workings and optimizations for efficient usage in C++ programming.","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/uorndered_map"}},{"title":"Fundamentals of C/C++ Multithreading Programming","date":"2020-09-24T00:00:00.000Z","tags":["C++","C","debug","multithreading"],"draft":false,"summary":"Troubleshooting multithreading issues with Linux commands","type":"Blog","readingTime":{"text":"5 min read","minutes":4.21,"time":252600,"words":842},"slug":"thread_debug_basic","path":"blog/thread_debug_basic","filePath":"blog/thread_debug_basic.mdx","toc":[{"value":"Fundamentals of C/C++ Multithreading Programming","url":"#fundamentals-of-cc-multithreading-programming-1","depth":1},{"value":"1. Basic Issues","url":"#1-basic-issues-1","depth":2},{"value":"2. Basic Commands","url":"#2-basic-commands-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Fundamentals of C/C++ Multithreading Programming","datePublished":"2020-09-24T00:00:00.000Z","dateModified":"2020-09-24T00:00:00.000Z","description":"Troubleshooting multithreading issues with Linux commands","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/thread_debug_basic"}},{"title":"C++ Project: Googletest Unit Testing","date":"2019-09-17T00:00:00.000Z","tags":["C++","googletest"],"draft":false,"summary":"Using Googletest and its assertions in Clion","type":"Blog","readingTime":{"text":"6 min read","minutes":5.19,"time":311400,"words":1038},"slug":"go_helloworld","path":"blog/go_helloworld","filePath":"blog/go_helloworld.mdx","toc":[{"value":"C++ Project: Googletest Unit Testing","url":"#c-project-googletest-unit-testing-1","depth":1},{"value":"1. Integrating Googletest Unit Testing into Clion","url":"#1-integrating-googletest-unit-testing-into-clion-1","depth":2},{"value":"2. HelloWorld with Googletest","url":"#2-helloworld-with-googletest-1","depth":2},{"value":"3. Introduction to Googletest Assertions","url":"#3-introduction-to-googletest-assertions-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"C++ Project: Googletest Unit Testing","datePublished":"2019-09-17T00:00:00.000Z","dateModified":"2019-09-17T00:00:00.000Z","description":"Using Googletest and its assertions in Clion","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/go_helloworld"}},{"title":"Googletest Unit Testing in C++ Projects","date":"2019-09-17T00:00:00.000Z","tags":["C++","Googletest"],"draft":false,"summary":"An introduction to using Googletest and its assertions in CLion.","type":"Blog","readingTime":{"text":"6 min read","minutes":5.58,"time":334800,"words":1116},"slug":"googletest","path":"blog/googletest","filePath":"blog/googletest.mdx","toc":[{"value":"Googletest Unit Testing in C++ Projects","url":"#googletest-unit-testing-in-c-projects-1","depth":1},{"value":"1. Integrating Googletest Unit Testing in CLion","url":"#1-integrating-googletest-unit-testing-in-clion-1","depth":2},{"value":"2. Introduction to Googletest: Hello World","url":"#2-introduction-to-googletest-hello-world-1","depth":2},{"value":"2. Introduction to Googletest Assertions","url":"#2-introduction-to-googletest-assertions-1","depth":2}],"structuredData":{"@context":"https://schema.org","@type":"BlogPosting","headline":"Googletest Unit Testing in C++ Projects","datePublished":"2019-09-17T00:00:00.000Z","dateModified":"2019-09-17T00:00:00.000Z","description":"An introduction to using Googletest and its assertions in CLion.","image":"/static/images/twitter-card.png","url":"https://tailwind-nextjs-starter-blog.vercel.app/blog/googletest"}}]